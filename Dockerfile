# --- Stage 1: Build Tailwind CSS assets ---
FROM node:22-alpine AS tailwind_builder

WORKDIR /app

# Copy package.json and package-lock.json first to leverage Docker cache
# This means if only source code changes, npm install isn't rerun.
COPY package.json ./

# Install Node.js dependencies
RUN npm install

# Copy Tailwind config and PostCSS config
COPY tailwind.config.js postcss.config.js ./

# Copy your input CSS and other web assets that Tailwind needs to process
COPY cmd/web/styles/input.css cmd/web/styles/
COPY cmd/web/**/*.html cmd/web/
COPY cmd/web/**/*.templ cmd/web/

# Run the Tailwind CSS build script. This will generate cmd/web/assets/css/output.css
# Ensure your package.json has a "tailwind:build" script that outputs to this path.
RUN npm run tailwind:build

# --- Stage 2: Build Go application ---
FROM golang:1.24.4-alpine AS build

# Install build-base for CGO (includes gcc, make, etc.)
# This is needed because CGO_ENABLED=1 for go-sqlite3 requires a C compiler.
RUN apk add --no-cache build-base

# Install templ. It's crucial to install it before copying Go code to use Docker cache effectively.
RUN go install github.com/a-h/templ/cmd/templ@latest

WORKDIR /app

# Copy go.mod and go.sum first to leverage Docker cache for Go modules
COPY go.mod go.sum ./
RUN go mod download

# Copy your Go source code and templ files
# The .go files and .templ files are all part of the application logic.
COPY . .

# Generate templ Go code. This must happen after copying all .templ files.
RUN templ generate

# Build Go binary
# IMPORTANT: CGO_ENABLED=1 is required for go-sqlite3 to link correctly.
# GOOS=linux ensures the binary is built for a Linux environment.
RUN CGO_ENABLED=1 GOOS=linux go build -o main ./cmd/api/main.go

# --- Stage 3: Final Production Image ---
FROM alpine:3.22 AS prod

WORKDIR /app

# IMPORTANT: Install sqlite-libs for the Go binary compiled with CGO_ENABLED=1
# This provides the necessary shared library for SQLite at runtime.
RUN apk add --no-cache sqlite-libs

# Copy the compiled Go binary from the 'build' stage
COPY --from=build /app/main /app/main

# Copy the generated Tailwind CSS output from the 'tailwind_builder' stage
COPY --from=tailwind_builder /app/cmd/web/assets/css /app/cmd/web/assets/css

# Copy other static assets that are not generated by Tailwind but are needed by your app.
# Based on your tree, this includes htmx.min.js and potentially other images/JS.
# If you have a dedicated 'static' or 'public' folder, you'd copy that here.
COPY cmd/web/assets/js /app/cmd/web/assets/js

# Copy your SQLite database if it's meant to be part of the image.
# For production, consider using an external database or persistent volume.
# If `db/test.db` is your production database, then copy it. If it's just for development, remove this.

# Expose the port your Go application listens on.
# It's good practice to make this configurable via an environment variable.
EXPOSE ${PORT:-8080} 

# Command to run your Go application.
# Make sure your main application starts an Echo server on the exposed port.
CMD ["./main"]
