// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/privatetoken"
	"rtglabs-go/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PrivateTokenUpdate is the builder for updating PrivateToken entities.
type PrivateTokenUpdate struct {
	config
	hooks    []Hook
	mutation *PrivateTokenMutation
}

// Where appends a list predicates to the PrivateTokenUpdate builder.
func (ptu *PrivateTokenUpdate) Where(ps ...predicate.PrivateToken) *PrivateTokenUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetToken sets the "token" field.
func (ptu *PrivateTokenUpdate) SetToken(s string) *PrivateTokenUpdate {
	ptu.mutation.SetToken(s)
	return ptu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (ptu *PrivateTokenUpdate) SetNillableToken(s *string) *PrivateTokenUpdate {
	if s != nil {
		ptu.SetToken(*s)
	}
	return ptu
}

// SetType sets the "type" field.
func (ptu *PrivateTokenUpdate) SetType(s string) *PrivateTokenUpdate {
	ptu.mutation.SetType(s)
	return ptu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptu *PrivateTokenUpdate) SetNillableType(s *string) *PrivateTokenUpdate {
	if s != nil {
		ptu.SetType(*s)
	}
	return ptu
}

// SetExpiresAt sets the "expires_at" field.
func (ptu *PrivateTokenUpdate) SetExpiresAt(t time.Time) *PrivateTokenUpdate {
	ptu.mutation.SetExpiresAt(t)
	return ptu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ptu *PrivateTokenUpdate) SetNillableExpiresAt(t *time.Time) *PrivateTokenUpdate {
	if t != nil {
		ptu.SetExpiresAt(*t)
	}
	return ptu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ptu *PrivateTokenUpdate) SetUserID(id uuid.UUID) *PrivateTokenUpdate {
	ptu.mutation.SetUserID(id)
	return ptu
}

// SetUser sets the "user" edge to the User entity.
func (ptu *PrivateTokenUpdate) SetUser(u *User) *PrivateTokenUpdate {
	return ptu.SetUserID(u.ID)
}

// Mutation returns the PrivateTokenMutation object of the builder.
func (ptu *PrivateTokenUpdate) Mutation() *PrivateTokenMutation {
	return ptu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ptu *PrivateTokenUpdate) ClearUser() *PrivateTokenUpdate {
	ptu.mutation.ClearUser()
	return ptu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PrivateTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PrivateTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PrivateTokenUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PrivateTokenUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PrivateTokenUpdate) check() error {
	if v, ok := ptu.mutation.Token(); ok {
		if err := privatetoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "PrivateToken.token": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.GetType(); ok {
		if err := privatetoken.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PrivateToken.type": %w`, err)}
		}
	}
	if ptu.mutation.UserCleared() && len(ptu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PrivateToken.user"`)
	}
	return nil
}

func (ptu *PrivateTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(privatetoken.Table, privatetoken.Columns, sqlgraph.NewFieldSpec(privatetoken.FieldID, field.TypeUUID))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptu.mutation.Token(); ok {
		_spec.SetField(privatetoken.FieldToken, field.TypeString, value)
	}
	if value, ok := ptu.mutation.GetType(); ok {
		_spec.SetField(privatetoken.FieldType, field.TypeString, value)
	}
	if value, ok := ptu.mutation.ExpiresAt(); ok {
		_spec.SetField(privatetoken.FieldExpiresAt, field.TypeTime, value)
	}
	if ptu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatetoken.UserTable,
			Columns: []string{privatetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatetoken.UserTable,
			Columns: []string{privatetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PrivateTokenUpdateOne is the builder for updating a single PrivateToken entity.
type PrivateTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrivateTokenMutation
}

// SetToken sets the "token" field.
func (ptuo *PrivateTokenUpdateOne) SetToken(s string) *PrivateTokenUpdateOne {
	ptuo.mutation.SetToken(s)
	return ptuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (ptuo *PrivateTokenUpdateOne) SetNillableToken(s *string) *PrivateTokenUpdateOne {
	if s != nil {
		ptuo.SetToken(*s)
	}
	return ptuo
}

// SetType sets the "type" field.
func (ptuo *PrivateTokenUpdateOne) SetType(s string) *PrivateTokenUpdateOne {
	ptuo.mutation.SetType(s)
	return ptuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptuo *PrivateTokenUpdateOne) SetNillableType(s *string) *PrivateTokenUpdateOne {
	if s != nil {
		ptuo.SetType(*s)
	}
	return ptuo
}

// SetExpiresAt sets the "expires_at" field.
func (ptuo *PrivateTokenUpdateOne) SetExpiresAt(t time.Time) *PrivateTokenUpdateOne {
	ptuo.mutation.SetExpiresAt(t)
	return ptuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ptuo *PrivateTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *PrivateTokenUpdateOne {
	if t != nil {
		ptuo.SetExpiresAt(*t)
	}
	return ptuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ptuo *PrivateTokenUpdateOne) SetUserID(id uuid.UUID) *PrivateTokenUpdateOne {
	ptuo.mutation.SetUserID(id)
	return ptuo
}

// SetUser sets the "user" edge to the User entity.
func (ptuo *PrivateTokenUpdateOne) SetUser(u *User) *PrivateTokenUpdateOne {
	return ptuo.SetUserID(u.ID)
}

// Mutation returns the PrivateTokenMutation object of the builder.
func (ptuo *PrivateTokenUpdateOne) Mutation() *PrivateTokenMutation {
	return ptuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ptuo *PrivateTokenUpdateOne) ClearUser() *PrivateTokenUpdateOne {
	ptuo.mutation.ClearUser()
	return ptuo
}

// Where appends a list predicates to the PrivateTokenUpdate builder.
func (ptuo *PrivateTokenUpdateOne) Where(ps ...predicate.PrivateToken) *PrivateTokenUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PrivateTokenUpdateOne) Select(field string, fields ...string) *PrivateTokenUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PrivateToken entity.
func (ptuo *PrivateTokenUpdateOne) Save(ctx context.Context) (*PrivateToken, error) {
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PrivateTokenUpdateOne) SaveX(ctx context.Context) *PrivateToken {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PrivateTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PrivateTokenUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PrivateTokenUpdateOne) check() error {
	if v, ok := ptuo.mutation.Token(); ok {
		if err := privatetoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "PrivateToken.token": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.GetType(); ok {
		if err := privatetoken.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PrivateToken.type": %w`, err)}
		}
	}
	if ptuo.mutation.UserCleared() && len(ptuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PrivateToken.user"`)
	}
	return nil
}

func (ptuo *PrivateTokenUpdateOne) sqlSave(ctx context.Context) (_node *PrivateToken, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(privatetoken.Table, privatetoken.Columns, sqlgraph.NewFieldSpec(privatetoken.FieldID, field.TypeUUID))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivateToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatetoken.FieldID)
		for _, f := range fields {
			if !privatetoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privatetoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptuo.mutation.Token(); ok {
		_spec.SetField(privatetoken.FieldToken, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.GetType(); ok {
		_spec.SetField(privatetoken.FieldType, field.TypeString, value)
	}
	if value, ok := ptuo.mutation.ExpiresAt(); ok {
		_spec.SetField(privatetoken.FieldExpiresAt, field.TypeTime, value)
	}
	if ptuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatetoken.UserTable,
			Columns: []string{privatetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatetoken.UserTable,
			Columns: []string{privatetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrivateToken{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatetoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
