// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/workoutlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExerciseSetCreate is the builder for creating a ExerciseSet entity.
type ExerciseSetCreate struct {
	config
	mutation *ExerciseSetMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (esc *ExerciseSetCreate) SetCreatedAt(t time.Time) *ExerciseSetCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableCreatedAt(t *time.Time) *ExerciseSetCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *ExerciseSetCreate) SetUpdatedAt(t time.Time) *ExerciseSetCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableUpdatedAt(t *time.Time) *ExerciseSetCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetDeletedAt sets the "deleted_at" field.
func (esc *ExerciseSetCreate) SetDeletedAt(t time.Time) *ExerciseSetCreate {
	esc.mutation.SetDeletedAt(t)
	return esc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableDeletedAt(t *time.Time) *ExerciseSetCreate {
	if t != nil {
		esc.SetDeletedAt(*t)
	}
	return esc
}

// SetWeight sets the "weight" field.
func (esc *ExerciseSetCreate) SetWeight(f float64) *ExerciseSetCreate {
	esc.mutation.SetWeight(f)
	return esc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableWeight(f *float64) *ExerciseSetCreate {
	if f != nil {
		esc.SetWeight(*f)
	}
	return esc
}

// SetReps sets the "reps" field.
func (esc *ExerciseSetCreate) SetReps(i int) *ExerciseSetCreate {
	esc.mutation.SetReps(i)
	return esc
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableReps(i *int) *ExerciseSetCreate {
	if i != nil {
		esc.SetReps(*i)
	}
	return esc
}

// SetSetNumber sets the "set_number" field.
func (esc *ExerciseSetCreate) SetSetNumber(i int) *ExerciseSetCreate {
	esc.mutation.SetSetNumber(i)
	return esc
}

// SetFinishedAt sets the "finished_at" field.
func (esc *ExerciseSetCreate) SetFinishedAt(t time.Time) *ExerciseSetCreate {
	esc.mutation.SetFinishedAt(t)
	return esc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableFinishedAt(t *time.Time) *ExerciseSetCreate {
	if t != nil {
		esc.SetFinishedAt(*t)
	}
	return esc
}

// SetStatus sets the "status" field.
func (esc *ExerciseSetCreate) SetStatus(i int) *ExerciseSetCreate {
	esc.mutation.SetStatus(i)
	return esc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableStatus(i *int) *ExerciseSetCreate {
	if i != nil {
		esc.SetStatus(*i)
	}
	return esc
}

// SetID sets the "id" field.
func (esc *ExerciseSetCreate) SetID(u uuid.UUID) *ExerciseSetCreate {
	esc.mutation.SetID(u)
	return esc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableID(u *uuid.UUID) *ExerciseSetCreate {
	if u != nil {
		esc.SetID(*u)
	}
	return esc
}

// SetWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by ID.
func (esc *ExerciseSetCreate) SetWorkoutLogID(id uuid.UUID) *ExerciseSetCreate {
	esc.mutation.SetWorkoutLogID(id)
	return esc
}

// SetWorkoutLog sets the "workout_log" edge to the WorkoutLog entity.
func (esc *ExerciseSetCreate) SetWorkoutLog(w *WorkoutLog) *ExerciseSetCreate {
	return esc.SetWorkoutLogID(w.ID)
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by ID.
func (esc *ExerciseSetCreate) SetExerciseID(id uuid.UUID) *ExerciseSetCreate {
	esc.mutation.SetExerciseID(id)
	return esc
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (esc *ExerciseSetCreate) SetExercise(e *Exercise) *ExerciseSetCreate {
	return esc.SetExerciseID(e.ID)
}

// SetExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by ID.
func (esc *ExerciseSetCreate) SetExerciseInstanceID(id uuid.UUID) *ExerciseSetCreate {
	esc.mutation.SetExerciseInstanceID(id)
	return esc
}

// SetNillableExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by ID if the given value is not nil.
func (esc *ExerciseSetCreate) SetNillableExerciseInstanceID(id *uuid.UUID) *ExerciseSetCreate {
	if id != nil {
		esc = esc.SetExerciseInstanceID(*id)
	}
	return esc
}

// SetExerciseInstance sets the "exercise_instance" edge to the ExerciseInstance entity.
func (esc *ExerciseSetCreate) SetExerciseInstance(e *ExerciseInstance) *ExerciseSetCreate {
	return esc.SetExerciseInstanceID(e.ID)
}

// Mutation returns the ExerciseSetMutation object of the builder.
func (esc *ExerciseSetCreate) Mutation() *ExerciseSetMutation {
	return esc.mutation
}

// Save creates the ExerciseSet in the database.
func (esc *ExerciseSetCreate) Save(ctx context.Context) (*ExerciseSet, error) {
	esc.defaults()
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *ExerciseSetCreate) SaveX(ctx context.Context) *ExerciseSet {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *ExerciseSetCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *ExerciseSetCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *ExerciseSetCreate) defaults() {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		v := exerciseset.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		v := exerciseset.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esc.mutation.Status(); !ok {
		v := exerciseset.DefaultStatus
		esc.mutation.SetStatus(v)
	}
	if _, ok := esc.mutation.ID(); !ok {
		v := exerciseset.DefaultID()
		esc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *ExerciseSetCreate) check() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExerciseSet.created_at"`)}
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExerciseSet.updated_at"`)}
	}
	if _, ok := esc.mutation.SetNumber(); !ok {
		return &ValidationError{Name: "set_number", err: errors.New(`ent: missing required field "ExerciseSet.set_number"`)}
	}
	if _, ok := esc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ExerciseSet.status"`)}
	}
	if len(esc.mutation.WorkoutLogIDs()) == 0 {
		return &ValidationError{Name: "workout_log", err: errors.New(`ent: missing required edge "ExerciseSet.workout_log"`)}
	}
	if len(esc.mutation.ExerciseIDs()) == 0 {
		return &ValidationError{Name: "exercise", err: errors.New(`ent: missing required edge "ExerciseSet.exercise"`)}
	}
	return nil
}

func (esc *ExerciseSetCreate) sqlSave(ctx context.Context) (*ExerciseSet, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *ExerciseSetCreate) createSpec() (*ExerciseSet, *sqlgraph.CreateSpec) {
	var (
		_node = &ExerciseSet{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(exerciseset.Table, sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID))
	)
	if id, ok := esc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(exerciseset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.SetField(exerciseset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.DeletedAt(); ok {
		_spec.SetField(exerciseset.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := esc.mutation.Weight(); ok {
		_spec.SetField(exerciseset.FieldWeight, field.TypeFloat64, value)
		_node.Weight = &value
	}
	if value, ok := esc.mutation.Reps(); ok {
		_spec.SetField(exerciseset.FieldReps, field.TypeInt, value)
		_node.Reps = &value
	}
	if value, ok := esc.mutation.SetNumber(); ok {
		_spec.SetField(exerciseset.FieldSetNumber, field.TypeInt, value)
		_node.SetNumber = value
	}
	if value, ok := esc.mutation.FinishedAt(); ok {
		_spec.SetField(exerciseset.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := esc.mutation.Status(); ok {
		_spec.SetField(exerciseset.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if nodes := esc.mutation.WorkoutLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.WorkoutLogTable,
			Columns: []string{exerciseset.WorkoutLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_log_exercise_sets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseTable,
			Columns: []string{exerciseset.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exercise_exercise_sets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.ExerciseInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseInstanceTable,
			Columns: []string{exerciseset.ExerciseInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exercise_instance_exercise_sets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExerciseSetCreateBulk is the builder for creating many ExerciseSet entities in bulk.
type ExerciseSetCreateBulk struct {
	config
	err      error
	builders []*ExerciseSetCreate
}

// Save creates the ExerciseSet entities in the database.
func (escb *ExerciseSetCreateBulk) Save(ctx context.Context) ([]*ExerciseSet, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*ExerciseSet, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExerciseSetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *ExerciseSetCreateBulk) SaveX(ctx context.Context) []*ExerciseSet {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *ExerciseSetCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *ExerciseSetCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}
