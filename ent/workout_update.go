// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutexercise"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutUpdate is the builder for updating Workout entities.
type WorkoutUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutMutation
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wu *WorkoutUpdate) Where(ps ...predicate.Workout) *WorkoutUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WorkoutUpdate) SetCreatedAt(t time.Time) *WorkoutUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableCreatedAt(t *time.Time) *WorkoutUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkoutUpdate) SetUpdatedAt(t time.Time) *WorkoutUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WorkoutUpdate) SetDeletedAt(t time.Time) *WorkoutUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableDeletedAt(t *time.Time) *WorkoutUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wu *WorkoutUpdate) ClearDeletedAt() *WorkoutUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetName sets the "name" field.
func (wu *WorkoutUpdate) SetName(s string) *WorkoutUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WorkoutUpdate) SetNillableName(s *string) *WorkoutUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (wu *WorkoutUpdate) AddWorkoutExerciseIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.AddWorkoutExerciseIDs(ids...)
	return wu
}

// AddWorkoutExercises adds the "workout_exercises" edges to the WorkoutExercise entity.
func (wu *WorkoutUpdate) AddWorkoutExercises(w ...*WorkoutExercise) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkoutExerciseIDs(ids...)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wu *WorkoutUpdate) Mutation() *WorkoutMutation {
	return wu.mutation
}

// ClearWorkoutExercises clears all "workout_exercises" edges to the WorkoutExercise entity.
func (wu *WorkoutUpdate) ClearWorkoutExercises() *WorkoutUpdate {
	wu.mutation.ClearWorkoutExercises()
	return wu
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to WorkoutExercise entities by IDs.
func (wu *WorkoutUpdate) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) *WorkoutUpdate {
	wu.mutation.RemoveWorkoutExerciseIDs(ids...)
	return wu
}

// RemoveWorkoutExercises removes "workout_exercises" edges to WorkoutExercise entities.
func (wu *WorkoutUpdate) RemoveWorkoutExercises(w ...*WorkoutExercise) *WorkoutUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkoutExerciseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkoutUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkoutUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkoutUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkoutUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkoutUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := workout.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkoutUpdate) check() error {
	if wu.mutation.UserCleared() && len(wu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Workout.user"`)
	}
	return nil
}

func (wu *WorkoutUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(workout.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workout.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(workout.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(workout.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
	}
	if wu.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutExercisesTable,
			Columns: []string{workout.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkoutExercisesIDs(); len(nodes) > 0 && !wu.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutExercisesTable,
			Columns: []string{workout.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkoutExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutExercisesTable,
			Columns: []string{workout.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkoutUpdateOne is the builder for updating a single Workout entity.
type WorkoutUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutMutation
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WorkoutUpdateOne) SetCreatedAt(t time.Time) *WorkoutUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkoutUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkoutUpdateOne) SetUpdatedAt(t time.Time) *WorkoutUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WorkoutUpdateOne) SetDeletedAt(t time.Time) *WorkoutUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableDeletedAt(t *time.Time) *WorkoutUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wuo *WorkoutUpdateOne) ClearDeletedAt() *WorkoutUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetName sets the "name" field.
func (wuo *WorkoutUpdateOne) SetName(s string) *WorkoutUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WorkoutUpdateOne) SetNillableName(s *string) *WorkoutUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (wuo *WorkoutUpdateOne) AddWorkoutExerciseIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.AddWorkoutExerciseIDs(ids...)
	return wuo
}

// AddWorkoutExercises adds the "workout_exercises" edges to the WorkoutExercise entity.
func (wuo *WorkoutUpdateOne) AddWorkoutExercises(w ...*WorkoutExercise) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkoutExerciseIDs(ids...)
}

// Mutation returns the WorkoutMutation object of the builder.
func (wuo *WorkoutUpdateOne) Mutation() *WorkoutMutation {
	return wuo.mutation
}

// ClearWorkoutExercises clears all "workout_exercises" edges to the WorkoutExercise entity.
func (wuo *WorkoutUpdateOne) ClearWorkoutExercises() *WorkoutUpdateOne {
	wuo.mutation.ClearWorkoutExercises()
	return wuo
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to WorkoutExercise entities by IDs.
func (wuo *WorkoutUpdateOne) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) *WorkoutUpdateOne {
	wuo.mutation.RemoveWorkoutExerciseIDs(ids...)
	return wuo
}

// RemoveWorkoutExercises removes "workout_exercises" edges to WorkoutExercise entities.
func (wuo *WorkoutUpdateOne) RemoveWorkoutExercises(w ...*WorkoutExercise) *WorkoutUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkoutExerciseIDs(ids...)
}

// Where appends a list predicates to the WorkoutUpdate builder.
func (wuo *WorkoutUpdateOne) Where(ps ...predicate.Workout) *WorkoutUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkoutUpdateOne) Select(field string, fields ...string) *WorkoutUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workout entity.
func (wuo *WorkoutUpdateOne) Save(ctx context.Context) (*Workout, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) SaveX(ctx context.Context) *Workout {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkoutUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkoutUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkoutUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := workout.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkoutUpdateOne) check() error {
	if wuo.mutation.UserCleared() && len(wuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Workout.user"`)
	}
	return nil
}

func (wuo *WorkoutUpdateOne) sqlSave(ctx context.Context) (_node *Workout, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workout.Table, workout.Columns, sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workout.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workout.FieldID)
		for _, f := range fields {
			if !workout.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workout.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(workout.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workout.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(workout.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(workout.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(workout.FieldName, field.TypeString, value)
	}
	if wuo.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutExercisesTable,
			Columns: []string{workout.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkoutExercisesIDs(); len(nodes) > 0 && !wuo.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutExercisesTable,
			Columns: []string{workout.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkoutExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workout.WorkoutExercisesTable,
			Columns: []string{workout.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workout{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workout.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
