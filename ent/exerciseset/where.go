// Code generated by ent, DO NOT EDIT.

package exerciseset

import (
	"rtglabs-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldDeletedAt, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldWeight, v))
}

// Reps applies equality check predicate on the "reps" field. It's identical to RepsEQ.
func Reps(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldReps, v))
}

// SetNumber applies equality check predicate on the "set_number" field. It's identical to SetNumberEQ.
func SetNumber(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldSetNumber, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldFinishedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotNull(FieldDeletedAt))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotNull(FieldWeight))
}

// RepsEQ applies the EQ predicate on the "reps" field.
func RepsEQ(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldReps, v))
}

// RepsNEQ applies the NEQ predicate on the "reps" field.
func RepsNEQ(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldReps, v))
}

// RepsIn applies the In predicate on the "reps" field.
func RepsIn(vs ...int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldReps, vs...))
}

// RepsNotIn applies the NotIn predicate on the "reps" field.
func RepsNotIn(vs ...int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldReps, vs...))
}

// RepsGT applies the GT predicate on the "reps" field.
func RepsGT(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldReps, v))
}

// RepsGTE applies the GTE predicate on the "reps" field.
func RepsGTE(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldReps, v))
}

// RepsLT applies the LT predicate on the "reps" field.
func RepsLT(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldReps, v))
}

// RepsLTE applies the LTE predicate on the "reps" field.
func RepsLTE(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldReps, v))
}

// RepsIsNil applies the IsNil predicate on the "reps" field.
func RepsIsNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIsNull(FieldReps))
}

// RepsNotNil applies the NotNil predicate on the "reps" field.
func RepsNotNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotNull(FieldReps))
}

// SetNumberEQ applies the EQ predicate on the "set_number" field.
func SetNumberEQ(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldSetNumber, v))
}

// SetNumberNEQ applies the NEQ predicate on the "set_number" field.
func SetNumberNEQ(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldSetNumber, v))
}

// SetNumberIn applies the In predicate on the "set_number" field.
func SetNumberIn(vs ...int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldSetNumber, vs...))
}

// SetNumberNotIn applies the NotIn predicate on the "set_number" field.
func SetNumberNotIn(vs ...int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldSetNumber, vs...))
}

// SetNumberGT applies the GT predicate on the "set_number" field.
func SetNumberGT(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldSetNumber, v))
}

// SetNumberGTE applies the GTE predicate on the "set_number" field.
func SetNumberGTE(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldSetNumber, v))
}

// SetNumberLT applies the LT predicate on the "set_number" field.
func SetNumberLT(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldSetNumber, v))
}

// SetNumberLTE applies the LTE predicate on the "set_number" field.
func SetNumberLTE(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldSetNumber, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotNull(FieldFinishedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.FieldLTE(FieldStatus, v))
}

// HasWorkoutLog applies the HasEdge predicate on the "workout_log" edge.
func HasWorkoutLog() predicate.ExerciseSet {
	return predicate.ExerciseSet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkoutLogTable, WorkoutLogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutLogWith applies the HasEdge predicate on the "workout_log" edge with a given conditions (other predicates).
func HasWorkoutLogWith(preds ...predicate.WorkoutLog) predicate.ExerciseSet {
	return predicate.ExerciseSet(func(s *sql.Selector) {
		step := newWorkoutLogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExercise applies the HasEdge predicate on the "exercise" edge.
func HasExercise() predicate.ExerciseSet {
	return predicate.ExerciseSet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExerciseTable, ExerciseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExerciseWith applies the HasEdge predicate on the "exercise" edge with a given conditions (other predicates).
func HasExerciseWith(preds ...predicate.Exercise) predicate.ExerciseSet {
	return predicate.ExerciseSet(func(s *sql.Selector) {
		step := newExerciseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExerciseInstance applies the HasEdge predicate on the "exercise_instance" edge.
func HasExerciseInstance() predicate.ExerciseSet {
	return predicate.ExerciseSet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExerciseInstanceTable, ExerciseInstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExerciseInstanceWith applies the HasEdge predicate on the "exercise_instance" edge with a given conditions (other predicates).
func HasExerciseInstanceWith(preds ...predicate.ExerciseInstance) predicate.ExerciseSet {
	return predicate.ExerciseSet(func(s *sql.Selector) {
		step := newExerciseInstanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExerciseSet) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExerciseSet) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExerciseSet) predicate.ExerciseSet {
	return predicate.ExerciseSet(sql.NotPredicates(p))
}
