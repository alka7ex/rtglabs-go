// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/privatetoken"
	"rtglabs-go/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PrivateTokenCreate is the builder for creating a PrivateToken entity.
type PrivateTokenCreate struct {
	config
	mutation *PrivateTokenMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (ptc *PrivateTokenCreate) SetToken(s string) *PrivateTokenCreate {
	ptc.mutation.SetToken(s)
	return ptc
}

// SetType sets the "type" field.
func (ptc *PrivateTokenCreate) SetType(s string) *PrivateTokenCreate {
	ptc.mutation.SetType(s)
	return ptc
}

// SetExpiresAt sets the "expires_at" field.
func (ptc *PrivateTokenCreate) SetExpiresAt(t time.Time) *PrivateTokenCreate {
	ptc.mutation.SetExpiresAt(t)
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *PrivateTokenCreate) SetCreatedAt(t time.Time) *PrivateTokenCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *PrivateTokenCreate) SetNillableCreatedAt(t *time.Time) *PrivateTokenCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *PrivateTokenCreate) SetID(u uuid.UUID) *PrivateTokenCreate {
	ptc.mutation.SetID(u)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *PrivateTokenCreate) SetNillableID(u *uuid.UUID) *PrivateTokenCreate {
	if u != nil {
		ptc.SetID(*u)
	}
	return ptc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ptc *PrivateTokenCreate) SetUserID(id uuid.UUID) *PrivateTokenCreate {
	ptc.mutation.SetUserID(id)
	return ptc
}

// SetUser sets the "user" edge to the User entity.
func (ptc *PrivateTokenCreate) SetUser(u *User) *PrivateTokenCreate {
	return ptc.SetUserID(u.ID)
}

// Mutation returns the PrivateTokenMutation object of the builder.
func (ptc *PrivateTokenCreate) Mutation() *PrivateTokenMutation {
	return ptc.mutation
}

// Save creates the PrivateToken in the database.
func (ptc *PrivateTokenCreate) Save(ctx context.Context) (*PrivateToken, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PrivateTokenCreate) SaveX(ctx context.Context) *PrivateToken {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PrivateTokenCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PrivateTokenCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PrivateTokenCreate) defaults() {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		v := privatetoken.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		v := privatetoken.DefaultID()
		ptc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PrivateTokenCreate) check() error {
	if _, ok := ptc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "PrivateToken.token"`)}
	}
	if v, ok := ptc.mutation.Token(); ok {
		if err := privatetoken.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "PrivateToken.token": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PrivateToken.type"`)}
	}
	if v, ok := ptc.mutation.GetType(); ok {
		if err := privatetoken.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PrivateToken.type": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "PrivateToken.expires_at"`)}
	}
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PrivateToken.created_at"`)}
	}
	if len(ptc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PrivateToken.user"`)}
	}
	return nil
}

func (ptc *PrivateTokenCreate) sqlSave(ctx context.Context) (*PrivateToken, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PrivateTokenCreate) createSpec() (*PrivateToken, *sqlgraph.CreateSpec) {
	var (
		_node = &PrivateToken{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(privatetoken.Table, sqlgraph.NewFieldSpec(privatetoken.FieldID, field.TypeUUID))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.Token(); ok {
		_spec.SetField(privatetoken.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.SetField(privatetoken.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ptc.mutation.ExpiresAt(); ok {
		_spec.SetField(privatetoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(privatetoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ptc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatetoken.UserTable,
			Columns: []string{privatetoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_private_token = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PrivateTokenCreateBulk is the builder for creating many PrivateToken entities in bulk.
type PrivateTokenCreateBulk struct {
	config
	err      error
	builders []*PrivateTokenCreate
}

// Save creates the PrivateToken entities in the database.
func (ptcb *PrivateTokenCreateBulk) Save(ctx context.Context) ([]*PrivateToken, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PrivateToken, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrivateTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PrivateTokenCreateBulk) SaveX(ctx context.Context) []*PrivateToken {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PrivateTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PrivateTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}
