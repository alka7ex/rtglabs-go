// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rtglabs-go/ent/user"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkoutLog is the model entity for the WorkoutLog schema.
type WorkoutLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// TotalActiveDurationSeconds holds the value of the "total_active_duration_seconds" field.
	TotalActiveDurationSeconds uint `json:"total_active_duration_seconds,omitempty"`
	// TotalPauseDurationSeconds holds the value of the "total_pause_duration_seconds" field.
	TotalPauseDurationSeconds uint `json:"total_pause_duration_seconds,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutLogQuery when eager-loading is set.
	Edges                WorkoutLogEdges `json:"edges"`
	user_workout_logs    *uuid.UUID
	workout_workout_logs *uuid.UUID
	selectValues         sql.SelectValues
}

// WorkoutLogEdges holds the relations/edges for other nodes in the graph.
type WorkoutLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Workout holds the value of the workout edge.
	Workout *Workout `json:"workout,omitempty"`
	// ExerciseSets holds the value of the exercise_sets edge.
	ExerciseSets []*ExerciseSet `json:"exercise_sets,omitempty"`
	// ExerciseInstances holds the value of the exercise_instances edge.
	ExerciseInstances []*ExerciseInstance `json:"exercise_instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutLogEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// WorkoutOrErr returns the Workout value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutLogEdges) WorkoutOrErr() (*Workout, error) {
	if e.Workout != nil {
		return e.Workout, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workout.Label}
	}
	return nil, &NotLoadedError{edge: "workout"}
}

// ExerciseSetsOrErr returns the ExerciseSets value or an error if the edge
// was not loaded in eager-loading.
func (e WorkoutLogEdges) ExerciseSetsOrErr() ([]*ExerciseSet, error) {
	if e.loadedTypes[2] {
		return e.ExerciseSets, nil
	}
	return nil, &NotLoadedError{edge: "exercise_sets"}
}

// ExerciseInstancesOrErr returns the ExerciseInstances value or an error if the edge
// was not loaded in eager-loading.
func (e WorkoutLogEdges) ExerciseInstancesOrErr() ([]*ExerciseInstance, error) {
	if e.loadedTypes[3] {
		return e.ExerciseInstances, nil
	}
	return nil, &NotLoadedError{edge: "exercise_instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkoutLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoutlog.FieldStatus, workoutlog.FieldTotalActiveDurationSeconds, workoutlog.FieldTotalPauseDurationSeconds:
			values[i] = new(sql.NullInt64)
		case workoutlog.FieldCreatedAt, workoutlog.FieldUpdatedAt, workoutlog.FieldDeletedAt, workoutlog.FieldStartedAt, workoutlog.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		case workoutlog.FieldID:
			values[i] = new(uuid.UUID)
		case workoutlog.ForeignKeys[0]: // user_workout_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workoutlog.ForeignKeys[1]: // workout_workout_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkoutLog fields.
func (wl *WorkoutLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoutlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wl.ID = *value
			}
		case workoutlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wl.CreatedAt = value.Time
			}
		case workoutlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wl.UpdatedAt = value.Time
			}
		case workoutlog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wl.DeletedAt = new(time.Time)
				*wl.DeletedAt = value.Time
			}
		case workoutlog.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				wl.StartedAt = new(time.Time)
				*wl.StartedAt = value.Time
			}
		case workoutlog.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				wl.FinishedAt = new(time.Time)
				*wl.FinishedAt = value.Time
			}
		case workoutlog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wl.Status = int(value.Int64)
			}
		case workoutlog.FieldTotalActiveDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_active_duration_seconds", values[i])
			} else if value.Valid {
				wl.TotalActiveDurationSeconds = uint(value.Int64)
			}
		case workoutlog.FieldTotalPauseDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_pause_duration_seconds", values[i])
			} else if value.Valid {
				wl.TotalPauseDurationSeconds = uint(value.Int64)
			}
		case workoutlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_workout_logs", values[i])
			} else if value.Valid {
				wl.user_workout_logs = new(uuid.UUID)
				*wl.user_workout_logs = *value.S.(*uuid.UUID)
			}
		case workoutlog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_workout_logs", values[i])
			} else if value.Valid {
				wl.workout_workout_logs = new(uuid.UUID)
				*wl.workout_workout_logs = *value.S.(*uuid.UUID)
			}
		default:
			wl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkoutLog.
// This includes values selected through modifiers, order, etc.
func (wl *WorkoutLog) Value(name string) (ent.Value, error) {
	return wl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the WorkoutLog entity.
func (wl *WorkoutLog) QueryUser() *UserQuery {
	return NewWorkoutLogClient(wl.config).QueryUser(wl)
}

// QueryWorkout queries the "workout" edge of the WorkoutLog entity.
func (wl *WorkoutLog) QueryWorkout() *WorkoutQuery {
	return NewWorkoutLogClient(wl.config).QueryWorkout(wl)
}

// QueryExerciseSets queries the "exercise_sets" edge of the WorkoutLog entity.
func (wl *WorkoutLog) QueryExerciseSets() *ExerciseSetQuery {
	return NewWorkoutLogClient(wl.config).QueryExerciseSets(wl)
}

// QueryExerciseInstances queries the "exercise_instances" edge of the WorkoutLog entity.
func (wl *WorkoutLog) QueryExerciseInstances() *ExerciseInstanceQuery {
	return NewWorkoutLogClient(wl.config).QueryExerciseInstances(wl)
}

// Update returns a builder for updating this WorkoutLog.
// Note that you need to call WorkoutLog.Unwrap() before calling this method if this WorkoutLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (wl *WorkoutLog) Update() *WorkoutLogUpdateOne {
	return NewWorkoutLogClient(wl.config).UpdateOne(wl)
}

// Unwrap unwraps the WorkoutLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wl *WorkoutLog) Unwrap() *WorkoutLog {
	_tx, ok := wl.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkoutLog is not a transactional entity")
	}
	wl.config.driver = _tx.drv
	return wl
}

// String implements the fmt.Stringer.
func (wl *WorkoutLog) String() string {
	var builder strings.Builder
	builder.WriteString("WorkoutLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := wl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := wl.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := wl.FinishedAt; v != nil {
		builder.WriteString("finished_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wl.Status))
	builder.WriteString(", ")
	builder.WriteString("total_active_duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", wl.TotalActiveDurationSeconds))
	builder.WriteString(", ")
	builder.WriteString("total_pause_duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", wl.TotalPauseDurationSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// WorkoutLogs is a parsable slice of WorkoutLog.
type WorkoutLogs []*WorkoutLog
