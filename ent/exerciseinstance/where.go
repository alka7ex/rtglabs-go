// Code generated by ent, DO NOT EDIT.

package exerciseinstance

import (
	"rtglabs-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldUpdateTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldDeletedAt, v))
}

// WorkoutLogID applies equality check predicate on the "workout_log_id" field. It's identical to WorkoutLogIDEQ.
func WorkoutLogID(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldWorkoutLogID, v))
}

// ExerciseID applies equality check predicate on the "exercise_id" field. It's identical to ExerciseIDEQ.
func ExerciseID(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldExerciseID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldUpdateTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotNull(FieldDeletedAt))
}

// WorkoutLogIDEQ applies the EQ predicate on the "workout_log_id" field.
func WorkoutLogIDEQ(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldWorkoutLogID, v))
}

// WorkoutLogIDNEQ applies the NEQ predicate on the "workout_log_id" field.
func WorkoutLogIDNEQ(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldWorkoutLogID, v))
}

// WorkoutLogIDIn applies the In predicate on the "workout_log_id" field.
func WorkoutLogIDIn(vs ...uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldWorkoutLogID, vs...))
}

// WorkoutLogIDNotIn applies the NotIn predicate on the "workout_log_id" field.
func WorkoutLogIDNotIn(vs ...uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldWorkoutLogID, vs...))
}

// WorkoutLogIDGT applies the GT predicate on the "workout_log_id" field.
func WorkoutLogIDGT(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldWorkoutLogID, v))
}

// WorkoutLogIDGTE applies the GTE predicate on the "workout_log_id" field.
func WorkoutLogIDGTE(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldWorkoutLogID, v))
}

// WorkoutLogIDLT applies the LT predicate on the "workout_log_id" field.
func WorkoutLogIDLT(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldWorkoutLogID, v))
}

// WorkoutLogIDLTE applies the LTE predicate on the "workout_log_id" field.
func WorkoutLogIDLTE(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldWorkoutLogID, v))
}

// WorkoutLogIDIsNil applies the IsNil predicate on the "workout_log_id" field.
func WorkoutLogIDIsNil() predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIsNull(FieldWorkoutLogID))
}

// WorkoutLogIDNotNil applies the NotNil predicate on the "workout_log_id" field.
func WorkoutLogIDNotNil() predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotNull(FieldWorkoutLogID))
}

// ExerciseIDEQ applies the EQ predicate on the "exercise_id" field.
func ExerciseIDEQ(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldEQ(FieldExerciseID, v))
}

// ExerciseIDNEQ applies the NEQ predicate on the "exercise_id" field.
func ExerciseIDNEQ(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNEQ(FieldExerciseID, v))
}

// ExerciseIDIn applies the In predicate on the "exercise_id" field.
func ExerciseIDIn(vs ...uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldIn(FieldExerciseID, vs...))
}

// ExerciseIDNotIn applies the NotIn predicate on the "exercise_id" field.
func ExerciseIDNotIn(vs ...uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldNotIn(FieldExerciseID, vs...))
}

// ExerciseIDGT applies the GT predicate on the "exercise_id" field.
func ExerciseIDGT(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGT(FieldExerciseID, v))
}

// ExerciseIDGTE applies the GTE predicate on the "exercise_id" field.
func ExerciseIDGTE(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldGTE(FieldExerciseID, v))
}

// ExerciseIDLT applies the LT predicate on the "exercise_id" field.
func ExerciseIDLT(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLT(FieldExerciseID, v))
}

// ExerciseIDLTE applies the LTE predicate on the "exercise_id" field.
func ExerciseIDLTE(v uuid.UUID) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.FieldLTE(FieldExerciseID, v))
}

// HasWorkoutExercises applies the HasEdge predicate on the "workout_exercises" edge.
func HasWorkoutExercises() predicate.ExerciseInstance {
	return predicate.ExerciseInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkoutExercisesTable, WorkoutExercisesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutExercisesWith applies the HasEdge predicate on the "workout_exercises" edge with a given conditions (other predicates).
func HasWorkoutExercisesWith(preds ...predicate.WorkoutExercise) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(func(s *sql.Selector) {
		step := newWorkoutExercisesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExerciseInstance) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExerciseInstance) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExerciseInstance) predicate.ExerciseInstance {
	return predicate.ExerciseInstance(sql.NotPredicates(p))
}
