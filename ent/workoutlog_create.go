// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/user"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutLogCreate is the builder for creating a WorkoutLog entity.
type WorkoutLogCreate struct {
	config
	mutation *WorkoutLogMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wlc *WorkoutLogCreate) SetCreatedAt(t time.Time) *WorkoutLogCreate {
	wlc.mutation.SetCreatedAt(t)
	return wlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableCreatedAt(t *time.Time) *WorkoutLogCreate {
	if t != nil {
		wlc.SetCreatedAt(*t)
	}
	return wlc
}

// SetUpdatedAt sets the "updated_at" field.
func (wlc *WorkoutLogCreate) SetUpdatedAt(t time.Time) *WorkoutLogCreate {
	wlc.mutation.SetUpdatedAt(t)
	return wlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableUpdatedAt(t *time.Time) *WorkoutLogCreate {
	if t != nil {
		wlc.SetUpdatedAt(*t)
	}
	return wlc
}

// SetDeletedAt sets the "deleted_at" field.
func (wlc *WorkoutLogCreate) SetDeletedAt(t time.Time) *WorkoutLogCreate {
	wlc.mutation.SetDeletedAt(t)
	return wlc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableDeletedAt(t *time.Time) *WorkoutLogCreate {
	if t != nil {
		wlc.SetDeletedAt(*t)
	}
	return wlc
}

// SetStartedAt sets the "started_at" field.
func (wlc *WorkoutLogCreate) SetStartedAt(t time.Time) *WorkoutLogCreate {
	wlc.mutation.SetStartedAt(t)
	return wlc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableStartedAt(t *time.Time) *WorkoutLogCreate {
	if t != nil {
		wlc.SetStartedAt(*t)
	}
	return wlc
}

// SetFinishedAt sets the "finished_at" field.
func (wlc *WorkoutLogCreate) SetFinishedAt(t time.Time) *WorkoutLogCreate {
	wlc.mutation.SetFinishedAt(t)
	return wlc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableFinishedAt(t *time.Time) *WorkoutLogCreate {
	if t != nil {
		wlc.SetFinishedAt(*t)
	}
	return wlc
}

// SetStatus sets the "status" field.
func (wlc *WorkoutLogCreate) SetStatus(i int) *WorkoutLogCreate {
	wlc.mutation.SetStatus(i)
	return wlc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableStatus(i *int) *WorkoutLogCreate {
	if i != nil {
		wlc.SetStatus(*i)
	}
	return wlc
}

// SetTotalActiveDurationSeconds sets the "total_active_duration_seconds" field.
func (wlc *WorkoutLogCreate) SetTotalActiveDurationSeconds(u uint) *WorkoutLogCreate {
	wlc.mutation.SetTotalActiveDurationSeconds(u)
	return wlc
}

// SetNillableTotalActiveDurationSeconds sets the "total_active_duration_seconds" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableTotalActiveDurationSeconds(u *uint) *WorkoutLogCreate {
	if u != nil {
		wlc.SetTotalActiveDurationSeconds(*u)
	}
	return wlc
}

// SetTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field.
func (wlc *WorkoutLogCreate) SetTotalPauseDurationSeconds(u uint) *WorkoutLogCreate {
	wlc.mutation.SetTotalPauseDurationSeconds(u)
	return wlc
}

// SetNillableTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableTotalPauseDurationSeconds(u *uint) *WorkoutLogCreate {
	if u != nil {
		wlc.SetTotalPauseDurationSeconds(*u)
	}
	return wlc
}

// SetID sets the "id" field.
func (wlc *WorkoutLogCreate) SetID(u uuid.UUID) *WorkoutLogCreate {
	wlc.mutation.SetID(u)
	return wlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableID(u *uuid.UUID) *WorkoutLogCreate {
	if u != nil {
		wlc.SetID(*u)
	}
	return wlc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wlc *WorkoutLogCreate) SetUserID(id uuid.UUID) *WorkoutLogCreate {
	wlc.mutation.SetUserID(id)
	return wlc
}

// SetUser sets the "user" edge to the User entity.
func (wlc *WorkoutLogCreate) SetUser(u *User) *WorkoutLogCreate {
	return wlc.SetUserID(u.ID)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (wlc *WorkoutLogCreate) SetWorkoutID(id uuid.UUID) *WorkoutLogCreate {
	wlc.mutation.SetWorkoutID(id)
	return wlc
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (wlc *WorkoutLogCreate) SetNillableWorkoutID(id *uuid.UUID) *WorkoutLogCreate {
	if id != nil {
		wlc = wlc.SetWorkoutID(*id)
	}
	return wlc
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (wlc *WorkoutLogCreate) SetWorkout(w *Workout) *WorkoutLogCreate {
	return wlc.SetWorkoutID(w.ID)
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (wlc *WorkoutLogCreate) AddExerciseSetIDs(ids ...uuid.UUID) *WorkoutLogCreate {
	wlc.mutation.AddExerciseSetIDs(ids...)
	return wlc
}

// AddExerciseSets adds the "exercise_sets" edges to the ExerciseSet entity.
func (wlc *WorkoutLogCreate) AddExerciseSets(e ...*ExerciseSet) *WorkoutLogCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wlc.AddExerciseSetIDs(ids...)
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (wlc *WorkoutLogCreate) AddExerciseInstanceIDs(ids ...uuid.UUID) *WorkoutLogCreate {
	wlc.mutation.AddExerciseInstanceIDs(ids...)
	return wlc
}

// AddExerciseInstances adds the "exercise_instances" edges to the ExerciseInstance entity.
func (wlc *WorkoutLogCreate) AddExerciseInstances(e ...*ExerciseInstance) *WorkoutLogCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wlc.AddExerciseInstanceIDs(ids...)
}

// Mutation returns the WorkoutLogMutation object of the builder.
func (wlc *WorkoutLogCreate) Mutation() *WorkoutLogMutation {
	return wlc.mutation
}

// Save creates the WorkoutLog in the database.
func (wlc *WorkoutLogCreate) Save(ctx context.Context) (*WorkoutLog, error) {
	wlc.defaults()
	return withHooks(ctx, wlc.sqlSave, wlc.mutation, wlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wlc *WorkoutLogCreate) SaveX(ctx context.Context) *WorkoutLog {
	v, err := wlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlc *WorkoutLogCreate) Exec(ctx context.Context) error {
	_, err := wlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlc *WorkoutLogCreate) ExecX(ctx context.Context) {
	if err := wlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wlc *WorkoutLogCreate) defaults() {
	if _, ok := wlc.mutation.CreatedAt(); !ok {
		v := workoutlog.DefaultCreatedAt()
		wlc.mutation.SetCreatedAt(v)
	}
	if _, ok := wlc.mutation.UpdatedAt(); !ok {
		v := workoutlog.DefaultUpdatedAt()
		wlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wlc.mutation.Status(); !ok {
		v := workoutlog.DefaultStatus
		wlc.mutation.SetStatus(v)
	}
	if _, ok := wlc.mutation.TotalActiveDurationSeconds(); !ok {
		v := workoutlog.DefaultTotalActiveDurationSeconds
		wlc.mutation.SetTotalActiveDurationSeconds(v)
	}
	if _, ok := wlc.mutation.TotalPauseDurationSeconds(); !ok {
		v := workoutlog.DefaultTotalPauseDurationSeconds
		wlc.mutation.SetTotalPauseDurationSeconds(v)
	}
	if _, ok := wlc.mutation.ID(); !ok {
		v := workoutlog.DefaultID()
		wlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wlc *WorkoutLogCreate) check() error {
	if _, ok := wlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkoutLog.created_at"`)}
	}
	if _, ok := wlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkoutLog.updated_at"`)}
	}
	if _, ok := wlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WorkoutLog.status"`)}
	}
	if _, ok := wlc.mutation.TotalActiveDurationSeconds(); !ok {
		return &ValidationError{Name: "total_active_duration_seconds", err: errors.New(`ent: missing required field "WorkoutLog.total_active_duration_seconds"`)}
	}
	if _, ok := wlc.mutation.TotalPauseDurationSeconds(); !ok {
		return &ValidationError{Name: "total_pause_duration_seconds", err: errors.New(`ent: missing required field "WorkoutLog.total_pause_duration_seconds"`)}
	}
	if len(wlc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "WorkoutLog.user"`)}
	}
	return nil
}

func (wlc *WorkoutLogCreate) sqlSave(ctx context.Context) (*WorkoutLog, error) {
	if err := wlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wlc.mutation.id = &_node.ID
	wlc.mutation.done = true
	return _node, nil
}

func (wlc *WorkoutLogCreate) createSpec() (*WorkoutLog, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkoutLog{config: wlc.config}
		_spec = sqlgraph.NewCreateSpec(workoutlog.Table, sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID))
	)
	if id, ok := wlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wlc.mutation.CreatedAt(); ok {
		_spec.SetField(workoutlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wlc.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wlc.mutation.DeletedAt(); ok {
		_spec.SetField(workoutlog.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := wlc.mutation.StartedAt(); ok {
		_spec.SetField(workoutlog.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := wlc.mutation.FinishedAt(); ok {
		_spec.SetField(workoutlog.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := wlc.mutation.Status(); ok {
		_spec.SetField(workoutlog.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := wlc.mutation.TotalActiveDurationSeconds(); ok {
		_spec.SetField(workoutlog.FieldTotalActiveDurationSeconds, field.TypeUint, value)
		_node.TotalActiveDurationSeconds = value
	}
	if value, ok := wlc.mutation.TotalPauseDurationSeconds(); ok {
		_spec.SetField(workoutlog.FieldTotalPauseDurationSeconds, field.TypeUint, value)
		_node.TotalPauseDurationSeconds = value
	}
	if nodes := wlc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UserTable,
			Columns: []string{workoutlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_workout_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wlc.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutTable,
			Columns: []string{workoutlog.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_workout_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wlc.mutation.ExerciseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wlc.mutation.ExerciseInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkoutLogCreateBulk is the builder for creating many WorkoutLog entities in bulk.
type WorkoutLogCreateBulk struct {
	config
	err      error
	builders []*WorkoutLogCreate
}

// Save creates the WorkoutLog entities in the database.
func (wlcb *WorkoutLogCreateBulk) Save(ctx context.Context) ([]*WorkoutLog, error) {
	if wlcb.err != nil {
		return nil, wlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wlcb.builders))
	nodes := make([]*WorkoutLog, len(wlcb.builders))
	mutators := make([]Mutator, len(wlcb.builders))
	for i := range wlcb.builders {
		func(i int, root context.Context) {
			builder := wlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkoutLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wlcb *WorkoutLogCreateBulk) SaveX(ctx context.Context) []*WorkoutLog {
	v, err := wlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wlcb *WorkoutLogCreateBulk) Exec(ctx context.Context) error {
	_, err := wlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlcb *WorkoutLogCreateBulk) ExecX(ctx context.Context) {
	if err := wlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
