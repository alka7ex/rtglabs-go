// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExerciseInstanceUpdate is the builder for updating ExerciseInstance entities.
type ExerciseInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *ExerciseInstanceMutation
}

// Where appends a list predicates to the ExerciseInstanceUpdate builder.
func (eiu *ExerciseInstanceUpdate) Where(ps ...predicate.ExerciseInstance) *ExerciseInstanceUpdate {
	eiu.mutation.Where(ps...)
	return eiu
}

// SetUpdateTime sets the "update_time" field.
func (eiu *ExerciseInstanceUpdate) SetUpdateTime(t time.Time) *ExerciseInstanceUpdate {
	eiu.mutation.SetUpdateTime(t)
	return eiu
}

// SetCreatedAt sets the "created_at" field.
func (eiu *ExerciseInstanceUpdate) SetCreatedAt(t time.Time) *ExerciseInstanceUpdate {
	eiu.mutation.SetCreatedAt(t)
	return eiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eiu *ExerciseInstanceUpdate) SetNillableCreatedAt(t *time.Time) *ExerciseInstanceUpdate {
	if t != nil {
		eiu.SetCreatedAt(*t)
	}
	return eiu
}

// SetUpdatedAt sets the "updated_at" field.
func (eiu *ExerciseInstanceUpdate) SetUpdatedAt(t time.Time) *ExerciseInstanceUpdate {
	eiu.mutation.SetUpdatedAt(t)
	return eiu
}

// SetDeletedAt sets the "deleted_at" field.
func (eiu *ExerciseInstanceUpdate) SetDeletedAt(t time.Time) *ExerciseInstanceUpdate {
	eiu.mutation.SetDeletedAt(t)
	return eiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eiu *ExerciseInstanceUpdate) SetNillableDeletedAt(t *time.Time) *ExerciseInstanceUpdate {
	if t != nil {
		eiu.SetDeletedAt(*t)
	}
	return eiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eiu *ExerciseInstanceUpdate) ClearDeletedAt() *ExerciseInstanceUpdate {
	eiu.mutation.ClearDeletedAt()
	return eiu
}

// SetWorkoutLogID sets the "workout_log_id" field.
func (eiu *ExerciseInstanceUpdate) SetWorkoutLogID(u uuid.UUID) *ExerciseInstanceUpdate {
	eiu.mutation.SetWorkoutLogID(u)
	return eiu
}

// SetNillableWorkoutLogID sets the "workout_log_id" field if the given value is not nil.
func (eiu *ExerciseInstanceUpdate) SetNillableWorkoutLogID(u *uuid.UUID) *ExerciseInstanceUpdate {
	if u != nil {
		eiu.SetWorkoutLogID(*u)
	}
	return eiu
}

// ClearWorkoutLogID clears the value of the "workout_log_id" field.
func (eiu *ExerciseInstanceUpdate) ClearWorkoutLogID() *ExerciseInstanceUpdate {
	eiu.mutation.ClearWorkoutLogID()
	return eiu
}

// Mutation returns the ExerciseInstanceMutation object of the builder.
func (eiu *ExerciseInstanceUpdate) Mutation() *ExerciseInstanceMutation {
	return eiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eiu *ExerciseInstanceUpdate) Save(ctx context.Context) (int, error) {
	eiu.defaults()
	return withHooks(ctx, eiu.sqlSave, eiu.mutation, eiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiu *ExerciseInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := eiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eiu *ExerciseInstanceUpdate) Exec(ctx context.Context) error {
	_, err := eiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiu *ExerciseInstanceUpdate) ExecX(ctx context.Context) {
	if err := eiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiu *ExerciseInstanceUpdate) defaults() {
	if _, ok := eiu.mutation.UpdateTime(); !ok {
		v := exerciseinstance.UpdateDefaultUpdateTime()
		eiu.mutation.SetUpdateTime(v)
	}
	if _, ok := eiu.mutation.UpdatedAt(); !ok {
		v := exerciseinstance.UpdateDefaultUpdatedAt()
		eiu.mutation.SetUpdatedAt(v)
	}
}

func (eiu *ExerciseInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exerciseinstance.Table, exerciseinstance.Columns, sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID))
	if ps := eiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiu.mutation.UpdateTime(); ok {
		_spec.SetField(exerciseinstance.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eiu.mutation.CreatedAt(); ok {
		_spec.SetField(exerciseinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eiu.mutation.UpdatedAt(); ok {
		_spec.SetField(exerciseinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eiu.mutation.DeletedAt(); ok {
		_spec.SetField(exerciseinstance.FieldDeletedAt, field.TypeTime, value)
	}
	if eiu.mutation.DeletedAtCleared() {
		_spec.ClearField(exerciseinstance.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eiu.mutation.WorkoutLogID(); ok {
		_spec.SetField(exerciseinstance.FieldWorkoutLogID, field.TypeUUID, value)
	}
	if eiu.mutation.WorkoutLogIDCleared() {
		_spec.ClearField(exerciseinstance.FieldWorkoutLogID, field.TypeUUID)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exerciseinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eiu.mutation.done = true
	return n, nil
}

// ExerciseInstanceUpdateOne is the builder for updating a single ExerciseInstance entity.
type ExerciseInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExerciseInstanceMutation
}

// SetUpdateTime sets the "update_time" field.
func (eiuo *ExerciseInstanceUpdateOne) SetUpdateTime(t time.Time) *ExerciseInstanceUpdateOne {
	eiuo.mutation.SetUpdateTime(t)
	return eiuo
}

// SetCreatedAt sets the "created_at" field.
func (eiuo *ExerciseInstanceUpdateOne) SetCreatedAt(t time.Time) *ExerciseInstanceUpdateOne {
	eiuo.mutation.SetCreatedAt(t)
	return eiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eiuo *ExerciseInstanceUpdateOne) SetNillableCreatedAt(t *time.Time) *ExerciseInstanceUpdateOne {
	if t != nil {
		eiuo.SetCreatedAt(*t)
	}
	return eiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (eiuo *ExerciseInstanceUpdateOne) SetUpdatedAt(t time.Time) *ExerciseInstanceUpdateOne {
	eiuo.mutation.SetUpdatedAt(t)
	return eiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (eiuo *ExerciseInstanceUpdateOne) SetDeletedAt(t time.Time) *ExerciseInstanceUpdateOne {
	eiuo.mutation.SetDeletedAt(t)
	return eiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eiuo *ExerciseInstanceUpdateOne) SetNillableDeletedAt(t *time.Time) *ExerciseInstanceUpdateOne {
	if t != nil {
		eiuo.SetDeletedAt(*t)
	}
	return eiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eiuo *ExerciseInstanceUpdateOne) ClearDeletedAt() *ExerciseInstanceUpdateOne {
	eiuo.mutation.ClearDeletedAt()
	return eiuo
}

// SetWorkoutLogID sets the "workout_log_id" field.
func (eiuo *ExerciseInstanceUpdateOne) SetWorkoutLogID(u uuid.UUID) *ExerciseInstanceUpdateOne {
	eiuo.mutation.SetWorkoutLogID(u)
	return eiuo
}

// SetNillableWorkoutLogID sets the "workout_log_id" field if the given value is not nil.
func (eiuo *ExerciseInstanceUpdateOne) SetNillableWorkoutLogID(u *uuid.UUID) *ExerciseInstanceUpdateOne {
	if u != nil {
		eiuo.SetWorkoutLogID(*u)
	}
	return eiuo
}

// ClearWorkoutLogID clears the value of the "workout_log_id" field.
func (eiuo *ExerciseInstanceUpdateOne) ClearWorkoutLogID() *ExerciseInstanceUpdateOne {
	eiuo.mutation.ClearWorkoutLogID()
	return eiuo
}

// Mutation returns the ExerciseInstanceMutation object of the builder.
func (eiuo *ExerciseInstanceUpdateOne) Mutation() *ExerciseInstanceMutation {
	return eiuo.mutation
}

// Where appends a list predicates to the ExerciseInstanceUpdate builder.
func (eiuo *ExerciseInstanceUpdateOne) Where(ps ...predicate.ExerciseInstance) *ExerciseInstanceUpdateOne {
	eiuo.mutation.Where(ps...)
	return eiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eiuo *ExerciseInstanceUpdateOne) Select(field string, fields ...string) *ExerciseInstanceUpdateOne {
	eiuo.fields = append([]string{field}, fields...)
	return eiuo
}

// Save executes the query and returns the updated ExerciseInstance entity.
func (eiuo *ExerciseInstanceUpdateOne) Save(ctx context.Context) (*ExerciseInstance, error) {
	eiuo.defaults()
	return withHooks(ctx, eiuo.sqlSave, eiuo.mutation, eiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiuo *ExerciseInstanceUpdateOne) SaveX(ctx context.Context) *ExerciseInstance {
	node, err := eiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eiuo *ExerciseInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := eiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiuo *ExerciseInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := eiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiuo *ExerciseInstanceUpdateOne) defaults() {
	if _, ok := eiuo.mutation.UpdateTime(); !ok {
		v := exerciseinstance.UpdateDefaultUpdateTime()
		eiuo.mutation.SetUpdateTime(v)
	}
	if _, ok := eiuo.mutation.UpdatedAt(); !ok {
		v := exerciseinstance.UpdateDefaultUpdatedAt()
		eiuo.mutation.SetUpdatedAt(v)
	}
}

func (eiuo *ExerciseInstanceUpdateOne) sqlSave(ctx context.Context) (_node *ExerciseInstance, err error) {
	_spec := sqlgraph.NewUpdateSpec(exerciseinstance.Table, exerciseinstance.Columns, sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID))
	id, ok := eiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExerciseInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exerciseinstance.FieldID)
		for _, f := range fields {
			if !exerciseinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exerciseinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiuo.mutation.UpdateTime(); ok {
		_spec.SetField(exerciseinstance.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eiuo.mutation.CreatedAt(); ok {
		_spec.SetField(exerciseinstance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exerciseinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eiuo.mutation.DeletedAt(); ok {
		_spec.SetField(exerciseinstance.FieldDeletedAt, field.TypeTime, value)
	}
	if eiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(exerciseinstance.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eiuo.mutation.WorkoutLogID(); ok {
		_spec.SetField(exerciseinstance.FieldWorkoutLogID, field.TypeUUID, value)
	}
	if eiuo.mutation.WorkoutLogIDCleared() {
		_spec.ClearField(exerciseinstance.FieldWorkoutLogID, field.TypeUUID)
	}
	_node = &ExerciseInstance{config: eiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exerciseinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eiuo.mutation.done = true
	return _node, nil
}
