// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutexercise"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkoutExercise is the model entity for the WorkoutExercise schema.
type WorkoutExercise struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Order holds the value of the "order" field.
	Order *uint `json:"order,omitempty"`
	// Sets holds the value of the "sets" field.
	Sets *uint `json:"sets,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight *float64 `json:"weight,omitempty"`
	// Reps holds the value of the "reps" field.
	Reps *uint `json:"reps,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutExerciseQuery when eager-loading is set.
	Edges                               WorkoutExerciseEdges `json:"edges"`
	exercise_workout_exercises          *uuid.UUID
	exercise_instance_workout_exercises *uuid.UUID
	workout_workout_exercises           *uuid.UUID
	selectValues                        sql.SelectValues
}

// WorkoutExerciseEdges holds the relations/edges for other nodes in the graph.
type WorkoutExerciseEdges struct {
	// Workout holds the value of the workout edge.
	Workout *Workout `json:"workout,omitempty"`
	// Exercise holds the value of the exercise edge.
	Exercise *Exercise `json:"exercise,omitempty"`
	// ExerciseInstance holds the value of the exercise_instance edge.
	ExerciseInstance *ExerciseInstance `json:"exercise_instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WorkoutOrErr returns the Workout value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutExerciseEdges) WorkoutOrErr() (*Workout, error) {
	if e.Workout != nil {
		return e.Workout, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workout.Label}
	}
	return nil, &NotLoadedError{edge: "workout"}
}

// ExerciseOrErr returns the Exercise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutExerciseEdges) ExerciseOrErr() (*Exercise, error) {
	if e.Exercise != nil {
		return e.Exercise, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: exercise.Label}
	}
	return nil, &NotLoadedError{edge: "exercise"}
}

// ExerciseInstanceOrErr returns the ExerciseInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutExerciseEdges) ExerciseInstanceOrErr() (*ExerciseInstance, error) {
	if e.ExerciseInstance != nil {
		return e.ExerciseInstance, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: exerciseinstance.Label}
	}
	return nil, &NotLoadedError{edge: "exercise_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkoutExercise) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoutexercise.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case workoutexercise.FieldOrder, workoutexercise.FieldSets, workoutexercise.FieldReps:
			values[i] = new(sql.NullInt64)
		case workoutexercise.FieldCreatedAt, workoutexercise.FieldUpdatedAt, workoutexercise.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case workoutexercise.FieldID:
			values[i] = new(uuid.UUID)
		case workoutexercise.ForeignKeys[0]: // exercise_workout_exercises
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workoutexercise.ForeignKeys[1]: // exercise_instance_workout_exercises
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case workoutexercise.ForeignKeys[2]: // workout_workout_exercises
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkoutExercise fields.
func (we *WorkoutExercise) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoutexercise.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				we.ID = *value
			}
		case workoutexercise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				we.CreatedAt = value.Time
			}
		case workoutexercise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				we.UpdatedAt = value.Time
			}
		case workoutexercise.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				we.DeletedAt = new(time.Time)
				*we.DeletedAt = value.Time
			}
		case workoutexercise.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				we.Order = new(uint)
				*we.Order = uint(value.Int64)
			}
		case workoutexercise.FieldSets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sets", values[i])
			} else if value.Valid {
				we.Sets = new(uint)
				*we.Sets = uint(value.Int64)
			}
		case workoutexercise.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				we.Weight = new(float64)
				*we.Weight = value.Float64
			}
		case workoutexercise.FieldReps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reps", values[i])
			} else if value.Valid {
				we.Reps = new(uint)
				*we.Reps = uint(value.Int64)
			}
		case workoutexercise.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_workout_exercises", values[i])
			} else if value.Valid {
				we.exercise_workout_exercises = new(uuid.UUID)
				*we.exercise_workout_exercises = *value.S.(*uuid.UUID)
			}
		case workoutexercise.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_instance_workout_exercises", values[i])
			} else if value.Valid {
				we.exercise_instance_workout_exercises = new(uuid.UUID)
				*we.exercise_instance_workout_exercises = *value.S.(*uuid.UUID)
			}
		case workoutexercise.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_workout_exercises", values[i])
			} else if value.Valid {
				we.workout_workout_exercises = new(uuid.UUID)
				*we.workout_workout_exercises = *value.S.(*uuid.UUID)
			}
		default:
			we.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkoutExercise.
// This includes values selected through modifiers, order, etc.
func (we *WorkoutExercise) Value(name string) (ent.Value, error) {
	return we.selectValues.Get(name)
}

// QueryWorkout queries the "workout" edge of the WorkoutExercise entity.
func (we *WorkoutExercise) QueryWorkout() *WorkoutQuery {
	return NewWorkoutExerciseClient(we.config).QueryWorkout(we)
}

// QueryExercise queries the "exercise" edge of the WorkoutExercise entity.
func (we *WorkoutExercise) QueryExercise() *ExerciseQuery {
	return NewWorkoutExerciseClient(we.config).QueryExercise(we)
}

// QueryExerciseInstance queries the "exercise_instance" edge of the WorkoutExercise entity.
func (we *WorkoutExercise) QueryExerciseInstance() *ExerciseInstanceQuery {
	return NewWorkoutExerciseClient(we.config).QueryExerciseInstance(we)
}

// Update returns a builder for updating this WorkoutExercise.
// Note that you need to call WorkoutExercise.Unwrap() before calling this method if this WorkoutExercise
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkoutExercise) Update() *WorkoutExerciseUpdateOne {
	return NewWorkoutExerciseClient(we.config).UpdateOne(we)
}

// Unwrap unwraps the WorkoutExercise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkoutExercise) Unwrap() *WorkoutExercise {
	_tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkoutExercise is not a transactional entity")
	}
	we.config.driver = _tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkoutExercise) String() string {
	var builder strings.Builder
	builder.WriteString("WorkoutExercise(")
	builder.WriteString(fmt.Sprintf("id=%v, ", we.ID))
	builder.WriteString("created_at=")
	builder.WriteString(we.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(we.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := we.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := we.Order; v != nil {
		builder.WriteString("order=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := we.Sets; v != nil {
		builder.WriteString("sets=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := we.Weight; v != nil {
		builder.WriteString("weight=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := we.Reps; v != nil {
		builder.WriteString("reps=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// WorkoutExercises is a parsable slice of WorkoutExercise.
type WorkoutExercises []*WorkoutExercise
