// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/bodyweight"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/privatetoken"
	"rtglabs-go/ent/profile"
	"rtglabs-go/ent/session"
	"rtglabs-go/ent/user"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutexercise"
	"rtglabs-go/ent/workoutlog"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBodyweight       = "Bodyweight"
	TypeExercise         = "Exercise"
	TypeExerciseInstance = "ExerciseInstance"
	TypeExerciseSet      = "ExerciseSet"
	TypePrivateToken     = "PrivateToken"
	TypeProfile          = "Profile"
	TypeSession          = "Session"
	TypeUser             = "User"
	TypeWorkout          = "Workout"
	TypeWorkoutExercise  = "WorkoutExercise"
	TypeWorkoutLog       = "WorkoutLog"
)

// BodyweightMutation represents an operation that mutates the Bodyweight nodes in the graph.
type BodyweightMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	weight        *float64
	addweight     *float64
	unit          *string
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Bodyweight, error)
	predicates    []predicate.Bodyweight
}

var _ ent.Mutation = (*BodyweightMutation)(nil)

// bodyweightOption allows management of the mutation configuration using functional options.
type bodyweightOption func(*BodyweightMutation)

// newBodyweightMutation creates new mutation for the Bodyweight entity.
func newBodyweightMutation(c config, op Op, opts ...bodyweightOption) *BodyweightMutation {
	m := &BodyweightMutation{
		config:        c,
		op:            op,
		typ:           TypeBodyweight,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBodyweightID sets the ID field of the mutation.
func withBodyweightID(id uuid.UUID) bodyweightOption {
	return func(m *BodyweightMutation) {
		var (
			err   error
			once  sync.Once
			value *Bodyweight
		)
		m.oldValue = func(ctx context.Context) (*Bodyweight, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bodyweight.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBodyweight sets the old Bodyweight of the mutation.
func withBodyweight(node *Bodyweight) bodyweightOption {
	return func(m *BodyweightMutation) {
		m.oldValue = func(context.Context) (*Bodyweight, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BodyweightMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BodyweightMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bodyweight entities.
func (m *BodyweightMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BodyweightMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BodyweightMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bodyweight.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BodyweightMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BodyweightMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bodyweight entity.
// If the Bodyweight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BodyweightMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BodyweightMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BodyweightMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BodyweightMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bodyweight entity.
// If the Bodyweight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BodyweightMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BodyweightMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BodyweightMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BodyweightMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Bodyweight entity.
// If the Bodyweight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BodyweightMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *BodyweightMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[bodyweight.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *BodyweightMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[bodyweight.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BodyweightMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, bodyweight.FieldDeletedAt)
}

// SetWeight sets the "weight" field.
func (m *BodyweightMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *BodyweightMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Bodyweight entity.
// If the Bodyweight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BodyweightMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *BodyweightMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *BodyweightMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *BodyweightMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetUnit sets the "unit" field.
func (m *BodyweightMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *BodyweightMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the Bodyweight entity.
// If the Bodyweight object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BodyweightMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *BodyweightMutation) ResetUnit() {
	m.unit = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *BodyweightMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *BodyweightMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *BodyweightMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *BodyweightMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *BodyweightMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *BodyweightMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the BodyweightMutation builder.
func (m *BodyweightMutation) Where(ps ...predicate.Bodyweight) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BodyweightMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BodyweightMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bodyweight, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BodyweightMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BodyweightMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bodyweight).
func (m *BodyweightMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BodyweightMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, bodyweight.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bodyweight.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, bodyweight.FieldDeletedAt)
	}
	if m.weight != nil {
		fields = append(fields, bodyweight.FieldWeight)
	}
	if m.unit != nil {
		fields = append(fields, bodyweight.FieldUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BodyweightMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bodyweight.FieldCreatedAt:
		return m.CreatedAt()
	case bodyweight.FieldUpdatedAt:
		return m.UpdatedAt()
	case bodyweight.FieldDeletedAt:
		return m.DeletedAt()
	case bodyweight.FieldWeight:
		return m.Weight()
	case bodyweight.FieldUnit:
		return m.Unit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BodyweightMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bodyweight.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bodyweight.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bodyweight.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case bodyweight.FieldWeight:
		return m.OldWeight(ctx)
	case bodyweight.FieldUnit:
		return m.OldUnit(ctx)
	}
	return nil, fmt.Errorf("unknown Bodyweight field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BodyweightMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bodyweight.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bodyweight.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bodyweight.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case bodyweight.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case bodyweight.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	}
	return fmt.Errorf("unknown Bodyweight field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BodyweightMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, bodyweight.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BodyweightMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bodyweight.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BodyweightMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bodyweight.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Bodyweight numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BodyweightMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bodyweight.FieldDeletedAt) {
		fields = append(fields, bodyweight.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BodyweightMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BodyweightMutation) ClearField(name string) error {
	switch name {
	case bodyweight.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Bodyweight nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BodyweightMutation) ResetField(name string) error {
	switch name {
	case bodyweight.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bodyweight.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bodyweight.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case bodyweight.FieldWeight:
		m.ResetWeight()
		return nil
	case bodyweight.FieldUnit:
		m.ResetUnit()
		return nil
	}
	return fmt.Errorf("unknown Bodyweight field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BodyweightMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, bodyweight.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BodyweightMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bodyweight.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BodyweightMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BodyweightMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BodyweightMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, bodyweight.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BodyweightMutation) EdgeCleared(name string) bool {
	switch name {
	case bodyweight.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BodyweightMutation) ClearEdge(name string) error {
	switch name {
	case bodyweight.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Bodyweight unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BodyweightMutation) ResetEdge(name string) error {
	switch name {
	case bodyweight.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Bodyweight edge %s", name)
}

// ExerciseMutation represents an operation that mutates the Exercise nodes in the graph.
type ExerciseMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *time.Time
	updated_at                *time.Time
	deleted_at                *time.Time
	name                      *string
	clearedFields             map[string]struct{}
	exercise_instances        map[uuid.UUID]struct{}
	removedexercise_instances map[uuid.UUID]struct{}
	clearedexercise_instances bool
	workout_exercises         map[uuid.UUID]struct{}
	removedworkout_exercises  map[uuid.UUID]struct{}
	clearedworkout_exercises  bool
	exercise_sets             map[uuid.UUID]struct{}
	removedexercise_sets      map[uuid.UUID]struct{}
	clearedexercise_sets      bool
	done                      bool
	oldValue                  func(context.Context) (*Exercise, error)
	predicates                []predicate.Exercise
}

var _ ent.Mutation = (*ExerciseMutation)(nil)

// exerciseOption allows management of the mutation configuration using functional options.
type exerciseOption func(*ExerciseMutation)

// newExerciseMutation creates new mutation for the Exercise entity.
func newExerciseMutation(c config, op Op, opts ...exerciseOption) *ExerciseMutation {
	m := &ExerciseMutation{
		config:        c,
		op:            op,
		typ:           TypeExercise,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExerciseID sets the ID field of the mutation.
func withExerciseID(id uuid.UUID) exerciseOption {
	return func(m *ExerciseMutation) {
		var (
			err   error
			once  sync.Once
			value *Exercise
		)
		m.oldValue = func(ctx context.Context) (*Exercise, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exercise.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExercise sets the old Exercise of the mutation.
func withExercise(node *Exercise) exerciseOption {
	return func(m *ExerciseMutation) {
		m.oldValue = func(context.Context) (*Exercise, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExerciseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExerciseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Exercise entities.
func (m *ExerciseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExerciseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExerciseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exercise.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExerciseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExerciseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Exercise entity.
// If the Exercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExerciseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExerciseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExerciseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Exercise entity.
// If the Exercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExerciseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExerciseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExerciseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Exercise entity.
// If the Exercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExerciseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[exercise.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExerciseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[exercise.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExerciseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, exercise.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *ExerciseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExerciseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Exercise entity.
// If the Exercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExerciseMutation) ResetName() {
	m.name = nil
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by ids.
func (m *ExerciseMutation) AddExerciseInstanceIDs(ids ...uuid.UUID) {
	if m.exercise_instances == nil {
		m.exercise_instances = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.exercise_instances[ids[i]] = struct{}{}
	}
}

// ClearExerciseInstances clears the "exercise_instances" edge to the ExerciseInstance entity.
func (m *ExerciseMutation) ClearExerciseInstances() {
	m.clearedexercise_instances = true
}

// ExerciseInstancesCleared reports if the "exercise_instances" edge to the ExerciseInstance entity was cleared.
func (m *ExerciseMutation) ExerciseInstancesCleared() bool {
	return m.clearedexercise_instances
}

// RemoveExerciseInstanceIDs removes the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (m *ExerciseMutation) RemoveExerciseInstanceIDs(ids ...uuid.UUID) {
	if m.removedexercise_instances == nil {
		m.removedexercise_instances = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.exercise_instances, ids[i])
		m.removedexercise_instances[ids[i]] = struct{}{}
	}
}

// RemovedExerciseInstances returns the removed IDs of the "exercise_instances" edge to the ExerciseInstance entity.
func (m *ExerciseMutation) RemovedExerciseInstancesIDs() (ids []uuid.UUID) {
	for id := range m.removedexercise_instances {
		ids = append(ids, id)
	}
	return
}

// ExerciseInstancesIDs returns the "exercise_instances" edge IDs in the mutation.
func (m *ExerciseMutation) ExerciseInstancesIDs() (ids []uuid.UUID) {
	for id := range m.exercise_instances {
		ids = append(ids, id)
	}
	return
}

// ResetExerciseInstances resets all changes to the "exercise_instances" edge.
func (m *ExerciseMutation) ResetExerciseInstances() {
	m.exercise_instances = nil
	m.clearedexercise_instances = false
	m.removedexercise_instances = nil
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by ids.
func (m *ExerciseMutation) AddWorkoutExerciseIDs(ids ...uuid.UUID) {
	if m.workout_exercises == nil {
		m.workout_exercises = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workout_exercises[ids[i]] = struct{}{}
	}
}

// ClearWorkoutExercises clears the "workout_exercises" edge to the WorkoutExercise entity.
func (m *ExerciseMutation) ClearWorkoutExercises() {
	m.clearedworkout_exercises = true
}

// WorkoutExercisesCleared reports if the "workout_exercises" edge to the WorkoutExercise entity was cleared.
func (m *ExerciseMutation) WorkoutExercisesCleared() bool {
	return m.clearedworkout_exercises
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (m *ExerciseMutation) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) {
	if m.removedworkout_exercises == nil {
		m.removedworkout_exercises = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workout_exercises, ids[i])
		m.removedworkout_exercises[ids[i]] = struct{}{}
	}
}

// RemovedWorkoutExercises returns the removed IDs of the "workout_exercises" edge to the WorkoutExercise entity.
func (m *ExerciseMutation) RemovedWorkoutExercisesIDs() (ids []uuid.UUID) {
	for id := range m.removedworkout_exercises {
		ids = append(ids, id)
	}
	return
}

// WorkoutExercisesIDs returns the "workout_exercises" edge IDs in the mutation.
func (m *ExerciseMutation) WorkoutExercisesIDs() (ids []uuid.UUID) {
	for id := range m.workout_exercises {
		ids = append(ids, id)
	}
	return
}

// ResetWorkoutExercises resets all changes to the "workout_exercises" edge.
func (m *ExerciseMutation) ResetWorkoutExercises() {
	m.workout_exercises = nil
	m.clearedworkout_exercises = false
	m.removedworkout_exercises = nil
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by ids.
func (m *ExerciseMutation) AddExerciseSetIDs(ids ...uuid.UUID) {
	if m.exercise_sets == nil {
		m.exercise_sets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.exercise_sets[ids[i]] = struct{}{}
	}
}

// ClearExerciseSets clears the "exercise_sets" edge to the ExerciseSet entity.
func (m *ExerciseMutation) ClearExerciseSets() {
	m.clearedexercise_sets = true
}

// ExerciseSetsCleared reports if the "exercise_sets" edge to the ExerciseSet entity was cleared.
func (m *ExerciseMutation) ExerciseSetsCleared() bool {
	return m.clearedexercise_sets
}

// RemoveExerciseSetIDs removes the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (m *ExerciseMutation) RemoveExerciseSetIDs(ids ...uuid.UUID) {
	if m.removedexercise_sets == nil {
		m.removedexercise_sets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.exercise_sets, ids[i])
		m.removedexercise_sets[ids[i]] = struct{}{}
	}
}

// RemovedExerciseSets returns the removed IDs of the "exercise_sets" edge to the ExerciseSet entity.
func (m *ExerciseMutation) RemovedExerciseSetsIDs() (ids []uuid.UUID) {
	for id := range m.removedexercise_sets {
		ids = append(ids, id)
	}
	return
}

// ExerciseSetsIDs returns the "exercise_sets" edge IDs in the mutation.
func (m *ExerciseMutation) ExerciseSetsIDs() (ids []uuid.UUID) {
	for id := range m.exercise_sets {
		ids = append(ids, id)
	}
	return
}

// ResetExerciseSets resets all changes to the "exercise_sets" edge.
func (m *ExerciseMutation) ResetExerciseSets() {
	m.exercise_sets = nil
	m.clearedexercise_sets = false
	m.removedexercise_sets = nil
}

// Where appends a list predicates to the ExerciseMutation builder.
func (m *ExerciseMutation) Where(ps ...predicate.Exercise) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExerciseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExerciseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Exercise, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExerciseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExerciseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Exercise).
func (m *ExerciseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExerciseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, exercise.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exercise.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exercise.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, exercise.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExerciseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exercise.FieldCreatedAt:
		return m.CreatedAt()
	case exercise.FieldUpdatedAt:
		return m.UpdatedAt()
	case exercise.FieldDeletedAt:
		return m.DeletedAt()
	case exercise.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExerciseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exercise.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exercise.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exercise.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case exercise.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Exercise field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExerciseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exercise.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exercise.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exercise.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case exercise.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Exercise field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExerciseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExerciseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExerciseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Exercise numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExerciseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exercise.FieldDeletedAt) {
		fields = append(fields, exercise.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExerciseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExerciseMutation) ClearField(name string) error {
	switch name {
	case exercise.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Exercise nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExerciseMutation) ResetField(name string) error {
	switch name {
	case exercise.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exercise.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exercise.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case exercise.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Exercise field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExerciseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.exercise_instances != nil {
		edges = append(edges, exercise.EdgeExerciseInstances)
	}
	if m.workout_exercises != nil {
		edges = append(edges, exercise.EdgeWorkoutExercises)
	}
	if m.exercise_sets != nil {
		edges = append(edges, exercise.EdgeExerciseSets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExerciseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exercise.EdgeExerciseInstances:
		ids := make([]ent.Value, 0, len(m.exercise_instances))
		for id := range m.exercise_instances {
			ids = append(ids, id)
		}
		return ids
	case exercise.EdgeWorkoutExercises:
		ids := make([]ent.Value, 0, len(m.workout_exercises))
		for id := range m.workout_exercises {
			ids = append(ids, id)
		}
		return ids
	case exercise.EdgeExerciseSets:
		ids := make([]ent.Value, 0, len(m.exercise_sets))
		for id := range m.exercise_sets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExerciseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedexercise_instances != nil {
		edges = append(edges, exercise.EdgeExerciseInstances)
	}
	if m.removedworkout_exercises != nil {
		edges = append(edges, exercise.EdgeWorkoutExercises)
	}
	if m.removedexercise_sets != nil {
		edges = append(edges, exercise.EdgeExerciseSets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExerciseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case exercise.EdgeExerciseInstances:
		ids := make([]ent.Value, 0, len(m.removedexercise_instances))
		for id := range m.removedexercise_instances {
			ids = append(ids, id)
		}
		return ids
	case exercise.EdgeWorkoutExercises:
		ids := make([]ent.Value, 0, len(m.removedworkout_exercises))
		for id := range m.removedworkout_exercises {
			ids = append(ids, id)
		}
		return ids
	case exercise.EdgeExerciseSets:
		ids := make([]ent.Value, 0, len(m.removedexercise_sets))
		for id := range m.removedexercise_sets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExerciseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedexercise_instances {
		edges = append(edges, exercise.EdgeExerciseInstances)
	}
	if m.clearedworkout_exercises {
		edges = append(edges, exercise.EdgeWorkoutExercises)
	}
	if m.clearedexercise_sets {
		edges = append(edges, exercise.EdgeExerciseSets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExerciseMutation) EdgeCleared(name string) bool {
	switch name {
	case exercise.EdgeExerciseInstances:
		return m.clearedexercise_instances
	case exercise.EdgeWorkoutExercises:
		return m.clearedworkout_exercises
	case exercise.EdgeExerciseSets:
		return m.clearedexercise_sets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExerciseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Exercise unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExerciseMutation) ResetEdge(name string) error {
	switch name {
	case exercise.EdgeExerciseInstances:
		m.ResetExerciseInstances()
		return nil
	case exercise.EdgeWorkoutExercises:
		m.ResetWorkoutExercises()
		return nil
	case exercise.EdgeExerciseSets:
		m.ResetExerciseSets()
		return nil
	}
	return fmt.Errorf("unknown Exercise edge %s", name)
}

// ExerciseInstanceMutation represents an operation that mutates the ExerciseInstance nodes in the graph.
type ExerciseInstanceMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	created_at               *time.Time
	updated_at               *time.Time
	deleted_at               *time.Time
	clearedFields            map[string]struct{}
	exercise                 *uuid.UUID
	clearedexercise          bool
	workout_exercises        map[uuid.UUID]struct{}
	removedworkout_exercises map[uuid.UUID]struct{}
	clearedworkout_exercises bool
	exercise_sets            map[uuid.UUID]struct{}
	removedexercise_sets     map[uuid.UUID]struct{}
	clearedexercise_sets     bool
	workout_log              *uuid.UUID
	clearedworkout_log       bool
	done                     bool
	oldValue                 func(context.Context) (*ExerciseInstance, error)
	predicates               []predicate.ExerciseInstance
}

var _ ent.Mutation = (*ExerciseInstanceMutation)(nil)

// exerciseinstanceOption allows management of the mutation configuration using functional options.
type exerciseinstanceOption func(*ExerciseInstanceMutation)

// newExerciseInstanceMutation creates new mutation for the ExerciseInstance entity.
func newExerciseInstanceMutation(c config, op Op, opts ...exerciseinstanceOption) *ExerciseInstanceMutation {
	m := &ExerciseInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeExerciseInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExerciseInstanceID sets the ID field of the mutation.
func withExerciseInstanceID(id uuid.UUID) exerciseinstanceOption {
	return func(m *ExerciseInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *ExerciseInstance
		)
		m.oldValue = func(ctx context.Context) (*ExerciseInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExerciseInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExerciseInstance sets the old ExerciseInstance of the mutation.
func withExerciseInstance(node *ExerciseInstance) exerciseinstanceOption {
	return func(m *ExerciseInstanceMutation) {
		m.oldValue = func(context.Context) (*ExerciseInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExerciseInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExerciseInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExerciseInstance entities.
func (m *ExerciseInstanceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExerciseInstanceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExerciseInstanceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExerciseInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExerciseInstanceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExerciseInstanceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExerciseInstance entity.
// If the ExerciseInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseInstanceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExerciseInstanceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExerciseInstanceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExerciseInstanceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExerciseInstance entity.
// If the ExerciseInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseInstanceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExerciseInstanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExerciseInstanceMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExerciseInstanceMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ExerciseInstance entity.
// If the ExerciseInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseInstanceMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExerciseInstanceMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[exerciseinstance.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExerciseInstanceMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[exerciseinstance.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExerciseInstanceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, exerciseinstance.FieldDeletedAt)
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by id.
func (m *ExerciseInstanceMutation) SetExerciseID(id uuid.UUID) {
	m.exercise = &id
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (m *ExerciseInstanceMutation) ClearExercise() {
	m.clearedexercise = true
}

// ExerciseCleared reports if the "exercise" edge to the Exercise entity was cleared.
func (m *ExerciseInstanceMutation) ExerciseCleared() bool {
	return m.clearedexercise
}

// ExerciseID returns the "exercise" edge ID in the mutation.
func (m *ExerciseInstanceMutation) ExerciseID() (id uuid.UUID, exists bool) {
	if m.exercise != nil {
		return *m.exercise, true
	}
	return
}

// ExerciseIDs returns the "exercise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExerciseID instead. It exists only for internal usage by the builders.
func (m *ExerciseInstanceMutation) ExerciseIDs() (ids []uuid.UUID) {
	if id := m.exercise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExercise resets all changes to the "exercise" edge.
func (m *ExerciseInstanceMutation) ResetExercise() {
	m.exercise = nil
	m.clearedexercise = false
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by ids.
func (m *ExerciseInstanceMutation) AddWorkoutExerciseIDs(ids ...uuid.UUID) {
	if m.workout_exercises == nil {
		m.workout_exercises = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workout_exercises[ids[i]] = struct{}{}
	}
}

// ClearWorkoutExercises clears the "workout_exercises" edge to the WorkoutExercise entity.
func (m *ExerciseInstanceMutation) ClearWorkoutExercises() {
	m.clearedworkout_exercises = true
}

// WorkoutExercisesCleared reports if the "workout_exercises" edge to the WorkoutExercise entity was cleared.
func (m *ExerciseInstanceMutation) WorkoutExercisesCleared() bool {
	return m.clearedworkout_exercises
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (m *ExerciseInstanceMutation) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) {
	if m.removedworkout_exercises == nil {
		m.removedworkout_exercises = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workout_exercises, ids[i])
		m.removedworkout_exercises[ids[i]] = struct{}{}
	}
}

// RemovedWorkoutExercises returns the removed IDs of the "workout_exercises" edge to the WorkoutExercise entity.
func (m *ExerciseInstanceMutation) RemovedWorkoutExercisesIDs() (ids []uuid.UUID) {
	for id := range m.removedworkout_exercises {
		ids = append(ids, id)
	}
	return
}

// WorkoutExercisesIDs returns the "workout_exercises" edge IDs in the mutation.
func (m *ExerciseInstanceMutation) WorkoutExercisesIDs() (ids []uuid.UUID) {
	for id := range m.workout_exercises {
		ids = append(ids, id)
	}
	return
}

// ResetWorkoutExercises resets all changes to the "workout_exercises" edge.
func (m *ExerciseInstanceMutation) ResetWorkoutExercises() {
	m.workout_exercises = nil
	m.clearedworkout_exercises = false
	m.removedworkout_exercises = nil
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by ids.
func (m *ExerciseInstanceMutation) AddExerciseSetIDs(ids ...uuid.UUID) {
	if m.exercise_sets == nil {
		m.exercise_sets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.exercise_sets[ids[i]] = struct{}{}
	}
}

// ClearExerciseSets clears the "exercise_sets" edge to the ExerciseSet entity.
func (m *ExerciseInstanceMutation) ClearExerciseSets() {
	m.clearedexercise_sets = true
}

// ExerciseSetsCleared reports if the "exercise_sets" edge to the ExerciseSet entity was cleared.
func (m *ExerciseInstanceMutation) ExerciseSetsCleared() bool {
	return m.clearedexercise_sets
}

// RemoveExerciseSetIDs removes the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (m *ExerciseInstanceMutation) RemoveExerciseSetIDs(ids ...uuid.UUID) {
	if m.removedexercise_sets == nil {
		m.removedexercise_sets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.exercise_sets, ids[i])
		m.removedexercise_sets[ids[i]] = struct{}{}
	}
}

// RemovedExerciseSets returns the removed IDs of the "exercise_sets" edge to the ExerciseSet entity.
func (m *ExerciseInstanceMutation) RemovedExerciseSetsIDs() (ids []uuid.UUID) {
	for id := range m.removedexercise_sets {
		ids = append(ids, id)
	}
	return
}

// ExerciseSetsIDs returns the "exercise_sets" edge IDs in the mutation.
func (m *ExerciseInstanceMutation) ExerciseSetsIDs() (ids []uuid.UUID) {
	for id := range m.exercise_sets {
		ids = append(ids, id)
	}
	return
}

// ResetExerciseSets resets all changes to the "exercise_sets" edge.
func (m *ExerciseInstanceMutation) ResetExerciseSets() {
	m.exercise_sets = nil
	m.clearedexercise_sets = false
	m.removedexercise_sets = nil
}

// SetWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by id.
func (m *ExerciseInstanceMutation) SetWorkoutLogID(id uuid.UUID) {
	m.workout_log = &id
}

// ClearWorkoutLog clears the "workout_log" edge to the WorkoutLog entity.
func (m *ExerciseInstanceMutation) ClearWorkoutLog() {
	m.clearedworkout_log = true
}

// WorkoutLogCleared reports if the "workout_log" edge to the WorkoutLog entity was cleared.
func (m *ExerciseInstanceMutation) WorkoutLogCleared() bool {
	return m.clearedworkout_log
}

// WorkoutLogID returns the "workout_log" edge ID in the mutation.
func (m *ExerciseInstanceMutation) WorkoutLogID() (id uuid.UUID, exists bool) {
	if m.workout_log != nil {
		return *m.workout_log, true
	}
	return
}

// WorkoutLogIDs returns the "workout_log" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkoutLogID instead. It exists only for internal usage by the builders.
func (m *ExerciseInstanceMutation) WorkoutLogIDs() (ids []uuid.UUID) {
	if id := m.workout_log; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkoutLog resets all changes to the "workout_log" edge.
func (m *ExerciseInstanceMutation) ResetWorkoutLog() {
	m.workout_log = nil
	m.clearedworkout_log = false
}

// Where appends a list predicates to the ExerciseInstanceMutation builder.
func (m *ExerciseInstanceMutation) Where(ps ...predicate.ExerciseInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExerciseInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExerciseInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExerciseInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExerciseInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExerciseInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExerciseInstance).
func (m *ExerciseInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExerciseInstanceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, exerciseinstance.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exerciseinstance.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exerciseinstance.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExerciseInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exerciseinstance.FieldCreatedAt:
		return m.CreatedAt()
	case exerciseinstance.FieldUpdatedAt:
		return m.UpdatedAt()
	case exerciseinstance.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExerciseInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exerciseinstance.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exerciseinstance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exerciseinstance.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExerciseInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExerciseInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exerciseinstance.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exerciseinstance.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exerciseinstance.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExerciseInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExerciseInstanceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExerciseInstanceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExerciseInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExerciseInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExerciseInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exerciseinstance.FieldDeletedAt) {
		fields = append(fields, exerciseinstance.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExerciseInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExerciseInstanceMutation) ClearField(name string) error {
	switch name {
	case exerciseinstance.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown ExerciseInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExerciseInstanceMutation) ResetField(name string) error {
	switch name {
	case exerciseinstance.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exerciseinstance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exerciseinstance.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown ExerciseInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExerciseInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.exercise != nil {
		edges = append(edges, exerciseinstance.EdgeExercise)
	}
	if m.workout_exercises != nil {
		edges = append(edges, exerciseinstance.EdgeWorkoutExercises)
	}
	if m.exercise_sets != nil {
		edges = append(edges, exerciseinstance.EdgeExerciseSets)
	}
	if m.workout_log != nil {
		edges = append(edges, exerciseinstance.EdgeWorkoutLog)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExerciseInstanceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exerciseinstance.EdgeExercise:
		if id := m.exercise; id != nil {
			return []ent.Value{*id}
		}
	case exerciseinstance.EdgeWorkoutExercises:
		ids := make([]ent.Value, 0, len(m.workout_exercises))
		for id := range m.workout_exercises {
			ids = append(ids, id)
		}
		return ids
	case exerciseinstance.EdgeExerciseSets:
		ids := make([]ent.Value, 0, len(m.exercise_sets))
		for id := range m.exercise_sets {
			ids = append(ids, id)
		}
		return ids
	case exerciseinstance.EdgeWorkoutLog:
		if id := m.workout_log; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExerciseInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedworkout_exercises != nil {
		edges = append(edges, exerciseinstance.EdgeWorkoutExercises)
	}
	if m.removedexercise_sets != nil {
		edges = append(edges, exerciseinstance.EdgeExerciseSets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExerciseInstanceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case exerciseinstance.EdgeWorkoutExercises:
		ids := make([]ent.Value, 0, len(m.removedworkout_exercises))
		for id := range m.removedworkout_exercises {
			ids = append(ids, id)
		}
		return ids
	case exerciseinstance.EdgeExerciseSets:
		ids := make([]ent.Value, 0, len(m.removedexercise_sets))
		for id := range m.removedexercise_sets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExerciseInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedexercise {
		edges = append(edges, exerciseinstance.EdgeExercise)
	}
	if m.clearedworkout_exercises {
		edges = append(edges, exerciseinstance.EdgeWorkoutExercises)
	}
	if m.clearedexercise_sets {
		edges = append(edges, exerciseinstance.EdgeExerciseSets)
	}
	if m.clearedworkout_log {
		edges = append(edges, exerciseinstance.EdgeWorkoutLog)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExerciseInstanceMutation) EdgeCleared(name string) bool {
	switch name {
	case exerciseinstance.EdgeExercise:
		return m.clearedexercise
	case exerciseinstance.EdgeWorkoutExercises:
		return m.clearedworkout_exercises
	case exerciseinstance.EdgeExerciseSets:
		return m.clearedexercise_sets
	case exerciseinstance.EdgeWorkoutLog:
		return m.clearedworkout_log
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExerciseInstanceMutation) ClearEdge(name string) error {
	switch name {
	case exerciseinstance.EdgeExercise:
		m.ClearExercise()
		return nil
	case exerciseinstance.EdgeWorkoutLog:
		m.ClearWorkoutLog()
		return nil
	}
	return fmt.Errorf("unknown ExerciseInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExerciseInstanceMutation) ResetEdge(name string) error {
	switch name {
	case exerciseinstance.EdgeExercise:
		m.ResetExercise()
		return nil
	case exerciseinstance.EdgeWorkoutExercises:
		m.ResetWorkoutExercises()
		return nil
	case exerciseinstance.EdgeExerciseSets:
		m.ResetExerciseSets()
		return nil
	case exerciseinstance.EdgeWorkoutLog:
		m.ResetWorkoutLog()
		return nil
	}
	return fmt.Errorf("unknown ExerciseInstance edge %s", name)
}

// ExerciseSetMutation represents an operation that mutates the ExerciseSet nodes in the graph.
type ExerciseSetMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	created_at               *time.Time
	updated_at               *time.Time
	deleted_at               *time.Time
	weight                   *float64
	addweight                *float64
	reps                     *int
	addreps                  *int
	set_number               *int
	addset_number            *int
	finished_at              *time.Time
	status                   *int
	addstatus                *int
	clearedFields            map[string]struct{}
	workout_log              *uuid.UUID
	clearedworkout_log       bool
	exercise                 *uuid.UUID
	clearedexercise          bool
	exercise_instance        *uuid.UUID
	clearedexercise_instance bool
	done                     bool
	oldValue                 func(context.Context) (*ExerciseSet, error)
	predicates               []predicate.ExerciseSet
}

var _ ent.Mutation = (*ExerciseSetMutation)(nil)

// exercisesetOption allows management of the mutation configuration using functional options.
type exercisesetOption func(*ExerciseSetMutation)

// newExerciseSetMutation creates new mutation for the ExerciseSet entity.
func newExerciseSetMutation(c config, op Op, opts ...exercisesetOption) *ExerciseSetMutation {
	m := &ExerciseSetMutation{
		config:        c,
		op:            op,
		typ:           TypeExerciseSet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExerciseSetID sets the ID field of the mutation.
func withExerciseSetID(id uuid.UUID) exercisesetOption {
	return func(m *ExerciseSetMutation) {
		var (
			err   error
			once  sync.Once
			value *ExerciseSet
		)
		m.oldValue = func(ctx context.Context) (*ExerciseSet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExerciseSet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExerciseSet sets the old ExerciseSet of the mutation.
func withExerciseSet(node *ExerciseSet) exercisesetOption {
	return func(m *ExerciseSetMutation) {
		m.oldValue = func(context.Context) (*ExerciseSet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExerciseSetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExerciseSetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExerciseSet entities.
func (m *ExerciseSetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExerciseSetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExerciseSetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExerciseSet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExerciseSetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExerciseSetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExerciseSetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExerciseSetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExerciseSetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExerciseSetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExerciseSetMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExerciseSetMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExerciseSetMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[exerciseset.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExerciseSetMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[exerciseset.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExerciseSetMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, exerciseset.FieldDeletedAt)
}

// SetWeight sets the "weight" field.
func (m *ExerciseSetMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *ExerciseSetMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldWeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *ExerciseSetMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *ExerciseSetMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *ExerciseSetMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[exerciseset.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *ExerciseSetMutation) WeightCleared() bool {
	_, ok := m.clearedFields[exerciseset.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *ExerciseSetMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, exerciseset.FieldWeight)
}

// SetReps sets the "reps" field.
func (m *ExerciseSetMutation) SetReps(i int) {
	m.reps = &i
	m.addreps = nil
}

// Reps returns the value of the "reps" field in the mutation.
func (m *ExerciseSetMutation) Reps() (r int, exists bool) {
	v := m.reps
	if v == nil {
		return
	}
	return *v, true
}

// OldReps returns the old "reps" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldReps(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReps: %w", err)
	}
	return oldValue.Reps, nil
}

// AddReps adds i to the "reps" field.
func (m *ExerciseSetMutation) AddReps(i int) {
	if m.addreps != nil {
		*m.addreps += i
	} else {
		m.addreps = &i
	}
}

// AddedReps returns the value that was added to the "reps" field in this mutation.
func (m *ExerciseSetMutation) AddedReps() (r int, exists bool) {
	v := m.addreps
	if v == nil {
		return
	}
	return *v, true
}

// ClearReps clears the value of the "reps" field.
func (m *ExerciseSetMutation) ClearReps() {
	m.reps = nil
	m.addreps = nil
	m.clearedFields[exerciseset.FieldReps] = struct{}{}
}

// RepsCleared returns if the "reps" field was cleared in this mutation.
func (m *ExerciseSetMutation) RepsCleared() bool {
	_, ok := m.clearedFields[exerciseset.FieldReps]
	return ok
}

// ResetReps resets all changes to the "reps" field.
func (m *ExerciseSetMutation) ResetReps() {
	m.reps = nil
	m.addreps = nil
	delete(m.clearedFields, exerciseset.FieldReps)
}

// SetSetNumber sets the "set_number" field.
func (m *ExerciseSetMutation) SetSetNumber(i int) {
	m.set_number = &i
	m.addset_number = nil
}

// SetNumber returns the value of the "set_number" field in the mutation.
func (m *ExerciseSetMutation) SetNumber() (r int, exists bool) {
	v := m.set_number
	if v == nil {
		return
	}
	return *v, true
}

// OldSetNumber returns the old "set_number" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldSetNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSetNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSetNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSetNumber: %w", err)
	}
	return oldValue.SetNumber, nil
}

// AddSetNumber adds i to the "set_number" field.
func (m *ExerciseSetMutation) AddSetNumber(i int) {
	if m.addset_number != nil {
		*m.addset_number += i
	} else {
		m.addset_number = &i
	}
}

// AddedSetNumber returns the value that was added to the "set_number" field in this mutation.
func (m *ExerciseSetMutation) AddedSetNumber() (r int, exists bool) {
	v := m.addset_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetSetNumber resets all changes to the "set_number" field.
func (m *ExerciseSetMutation) ResetSetNumber() {
	m.set_number = nil
	m.addset_number = nil
}

// SetFinishedAt sets the "finished_at" field.
func (m *ExerciseSetMutation) SetFinishedAt(t time.Time) {
	m.finished_at = &t
}

// FinishedAt returns the value of the "finished_at" field in the mutation.
func (m *ExerciseSetMutation) FinishedAt() (r time.Time, exists bool) {
	v := m.finished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishedAt returns the old "finished_at" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldFinishedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishedAt: %w", err)
	}
	return oldValue.FinishedAt, nil
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (m *ExerciseSetMutation) ClearFinishedAt() {
	m.finished_at = nil
	m.clearedFields[exerciseset.FieldFinishedAt] = struct{}{}
}

// FinishedAtCleared returns if the "finished_at" field was cleared in this mutation.
func (m *ExerciseSetMutation) FinishedAtCleared() bool {
	_, ok := m.clearedFields[exerciseset.FieldFinishedAt]
	return ok
}

// ResetFinishedAt resets all changes to the "finished_at" field.
func (m *ExerciseSetMutation) ResetFinishedAt() {
	m.finished_at = nil
	delete(m.clearedFields, exerciseset.FieldFinishedAt)
}

// SetStatus sets the "status" field.
func (m *ExerciseSetMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ExerciseSetMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ExerciseSet entity.
// If the ExerciseSet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExerciseSetMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ExerciseSetMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ExerciseSetMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ExerciseSetMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by id.
func (m *ExerciseSetMutation) SetWorkoutLogID(id uuid.UUID) {
	m.workout_log = &id
}

// ClearWorkoutLog clears the "workout_log" edge to the WorkoutLog entity.
func (m *ExerciseSetMutation) ClearWorkoutLog() {
	m.clearedworkout_log = true
}

// WorkoutLogCleared reports if the "workout_log" edge to the WorkoutLog entity was cleared.
func (m *ExerciseSetMutation) WorkoutLogCleared() bool {
	return m.clearedworkout_log
}

// WorkoutLogID returns the "workout_log" edge ID in the mutation.
func (m *ExerciseSetMutation) WorkoutLogID() (id uuid.UUID, exists bool) {
	if m.workout_log != nil {
		return *m.workout_log, true
	}
	return
}

// WorkoutLogIDs returns the "workout_log" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkoutLogID instead. It exists only for internal usage by the builders.
func (m *ExerciseSetMutation) WorkoutLogIDs() (ids []uuid.UUID) {
	if id := m.workout_log; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkoutLog resets all changes to the "workout_log" edge.
func (m *ExerciseSetMutation) ResetWorkoutLog() {
	m.workout_log = nil
	m.clearedworkout_log = false
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by id.
func (m *ExerciseSetMutation) SetExerciseID(id uuid.UUID) {
	m.exercise = &id
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (m *ExerciseSetMutation) ClearExercise() {
	m.clearedexercise = true
}

// ExerciseCleared reports if the "exercise" edge to the Exercise entity was cleared.
func (m *ExerciseSetMutation) ExerciseCleared() bool {
	return m.clearedexercise
}

// ExerciseID returns the "exercise" edge ID in the mutation.
func (m *ExerciseSetMutation) ExerciseID() (id uuid.UUID, exists bool) {
	if m.exercise != nil {
		return *m.exercise, true
	}
	return
}

// ExerciseIDs returns the "exercise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExerciseID instead. It exists only for internal usage by the builders.
func (m *ExerciseSetMutation) ExerciseIDs() (ids []uuid.UUID) {
	if id := m.exercise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExercise resets all changes to the "exercise" edge.
func (m *ExerciseSetMutation) ResetExercise() {
	m.exercise = nil
	m.clearedexercise = false
}

// SetExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by id.
func (m *ExerciseSetMutation) SetExerciseInstanceID(id uuid.UUID) {
	m.exercise_instance = &id
}

// ClearExerciseInstance clears the "exercise_instance" edge to the ExerciseInstance entity.
func (m *ExerciseSetMutation) ClearExerciseInstance() {
	m.clearedexercise_instance = true
}

// ExerciseInstanceCleared reports if the "exercise_instance" edge to the ExerciseInstance entity was cleared.
func (m *ExerciseSetMutation) ExerciseInstanceCleared() bool {
	return m.clearedexercise_instance
}

// ExerciseInstanceID returns the "exercise_instance" edge ID in the mutation.
func (m *ExerciseSetMutation) ExerciseInstanceID() (id uuid.UUID, exists bool) {
	if m.exercise_instance != nil {
		return *m.exercise_instance, true
	}
	return
}

// ExerciseInstanceIDs returns the "exercise_instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExerciseInstanceID instead. It exists only for internal usage by the builders.
func (m *ExerciseSetMutation) ExerciseInstanceIDs() (ids []uuid.UUID) {
	if id := m.exercise_instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExerciseInstance resets all changes to the "exercise_instance" edge.
func (m *ExerciseSetMutation) ResetExerciseInstance() {
	m.exercise_instance = nil
	m.clearedexercise_instance = false
}

// Where appends a list predicates to the ExerciseSetMutation builder.
func (m *ExerciseSetMutation) Where(ps ...predicate.ExerciseSet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExerciseSetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExerciseSetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExerciseSet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExerciseSetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExerciseSetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExerciseSet).
func (m *ExerciseSetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExerciseSetMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, exerciseset.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exerciseset.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exerciseset.FieldDeletedAt)
	}
	if m.weight != nil {
		fields = append(fields, exerciseset.FieldWeight)
	}
	if m.reps != nil {
		fields = append(fields, exerciseset.FieldReps)
	}
	if m.set_number != nil {
		fields = append(fields, exerciseset.FieldSetNumber)
	}
	if m.finished_at != nil {
		fields = append(fields, exerciseset.FieldFinishedAt)
	}
	if m.status != nil {
		fields = append(fields, exerciseset.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExerciseSetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exerciseset.FieldCreatedAt:
		return m.CreatedAt()
	case exerciseset.FieldUpdatedAt:
		return m.UpdatedAt()
	case exerciseset.FieldDeletedAt:
		return m.DeletedAt()
	case exerciseset.FieldWeight:
		return m.Weight()
	case exerciseset.FieldReps:
		return m.Reps()
	case exerciseset.FieldSetNumber:
		return m.SetNumber()
	case exerciseset.FieldFinishedAt:
		return m.FinishedAt()
	case exerciseset.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExerciseSetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exerciseset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exerciseset.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exerciseset.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case exerciseset.FieldWeight:
		return m.OldWeight(ctx)
	case exerciseset.FieldReps:
		return m.OldReps(ctx)
	case exerciseset.FieldSetNumber:
		return m.OldSetNumber(ctx)
	case exerciseset.FieldFinishedAt:
		return m.OldFinishedAt(ctx)
	case exerciseset.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ExerciseSet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExerciseSetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exerciseset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exerciseset.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exerciseset.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case exerciseset.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case exerciseset.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReps(v)
		return nil
	case exerciseset.FieldSetNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSetNumber(v)
		return nil
	case exerciseset.FieldFinishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishedAt(v)
		return nil
	case exerciseset.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ExerciseSet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExerciseSetMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, exerciseset.FieldWeight)
	}
	if m.addreps != nil {
		fields = append(fields, exerciseset.FieldReps)
	}
	if m.addset_number != nil {
		fields = append(fields, exerciseset.FieldSetNumber)
	}
	if m.addstatus != nil {
		fields = append(fields, exerciseset.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExerciseSetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exerciseset.FieldWeight:
		return m.AddedWeight()
	case exerciseset.FieldReps:
		return m.AddedReps()
	case exerciseset.FieldSetNumber:
		return m.AddedSetNumber()
	case exerciseset.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExerciseSetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exerciseset.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case exerciseset.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReps(v)
		return nil
	case exerciseset.FieldSetNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSetNumber(v)
		return nil
	case exerciseset.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ExerciseSet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExerciseSetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exerciseset.FieldDeletedAt) {
		fields = append(fields, exerciseset.FieldDeletedAt)
	}
	if m.FieldCleared(exerciseset.FieldWeight) {
		fields = append(fields, exerciseset.FieldWeight)
	}
	if m.FieldCleared(exerciseset.FieldReps) {
		fields = append(fields, exerciseset.FieldReps)
	}
	if m.FieldCleared(exerciseset.FieldFinishedAt) {
		fields = append(fields, exerciseset.FieldFinishedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExerciseSetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExerciseSetMutation) ClearField(name string) error {
	switch name {
	case exerciseset.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case exerciseset.FieldWeight:
		m.ClearWeight()
		return nil
	case exerciseset.FieldReps:
		m.ClearReps()
		return nil
	case exerciseset.FieldFinishedAt:
		m.ClearFinishedAt()
		return nil
	}
	return fmt.Errorf("unknown ExerciseSet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExerciseSetMutation) ResetField(name string) error {
	switch name {
	case exerciseset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exerciseset.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exerciseset.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case exerciseset.FieldWeight:
		m.ResetWeight()
		return nil
	case exerciseset.FieldReps:
		m.ResetReps()
		return nil
	case exerciseset.FieldSetNumber:
		m.ResetSetNumber()
		return nil
	case exerciseset.FieldFinishedAt:
		m.ResetFinishedAt()
		return nil
	case exerciseset.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ExerciseSet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExerciseSetMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.workout_log != nil {
		edges = append(edges, exerciseset.EdgeWorkoutLog)
	}
	if m.exercise != nil {
		edges = append(edges, exerciseset.EdgeExercise)
	}
	if m.exercise_instance != nil {
		edges = append(edges, exerciseset.EdgeExerciseInstance)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExerciseSetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exerciseset.EdgeWorkoutLog:
		if id := m.workout_log; id != nil {
			return []ent.Value{*id}
		}
	case exerciseset.EdgeExercise:
		if id := m.exercise; id != nil {
			return []ent.Value{*id}
		}
	case exerciseset.EdgeExerciseInstance:
		if id := m.exercise_instance; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExerciseSetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExerciseSetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExerciseSetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedworkout_log {
		edges = append(edges, exerciseset.EdgeWorkoutLog)
	}
	if m.clearedexercise {
		edges = append(edges, exerciseset.EdgeExercise)
	}
	if m.clearedexercise_instance {
		edges = append(edges, exerciseset.EdgeExerciseInstance)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExerciseSetMutation) EdgeCleared(name string) bool {
	switch name {
	case exerciseset.EdgeWorkoutLog:
		return m.clearedworkout_log
	case exerciseset.EdgeExercise:
		return m.clearedexercise
	case exerciseset.EdgeExerciseInstance:
		return m.clearedexercise_instance
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExerciseSetMutation) ClearEdge(name string) error {
	switch name {
	case exerciseset.EdgeWorkoutLog:
		m.ClearWorkoutLog()
		return nil
	case exerciseset.EdgeExercise:
		m.ClearExercise()
		return nil
	case exerciseset.EdgeExerciseInstance:
		m.ClearExerciseInstance()
		return nil
	}
	return fmt.Errorf("unknown ExerciseSet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExerciseSetMutation) ResetEdge(name string) error {
	switch name {
	case exerciseset.EdgeWorkoutLog:
		m.ResetWorkoutLog()
		return nil
	case exerciseset.EdgeExercise:
		m.ResetExercise()
		return nil
	case exerciseset.EdgeExerciseInstance:
		m.ResetExerciseInstance()
		return nil
	}
	return fmt.Errorf("unknown ExerciseSet edge %s", name)
}

// PrivateTokenMutation represents an operation that mutates the PrivateToken nodes in the graph.
type PrivateTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	token         *string
	_type         *string
	expires_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*PrivateToken, error)
	predicates    []predicate.PrivateToken
}

var _ ent.Mutation = (*PrivateTokenMutation)(nil)

// privatetokenOption allows management of the mutation configuration using functional options.
type privatetokenOption func(*PrivateTokenMutation)

// newPrivateTokenMutation creates new mutation for the PrivateToken entity.
func newPrivateTokenMutation(c config, op Op, opts ...privatetokenOption) *PrivateTokenMutation {
	m := &PrivateTokenMutation{
		config:        c,
		op:            op,
		typ:           TypePrivateToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrivateTokenID sets the ID field of the mutation.
func withPrivateTokenID(id uuid.UUID) privatetokenOption {
	return func(m *PrivateTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *PrivateToken
		)
		m.oldValue = func(ctx context.Context) (*PrivateToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PrivateToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrivateToken sets the old PrivateToken of the mutation.
func withPrivateToken(node *PrivateToken) privatetokenOption {
	return func(m *PrivateTokenMutation) {
		m.oldValue = func(context.Context) (*PrivateToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrivateTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrivateTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PrivateToken entities.
func (m *PrivateTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrivateTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PrivateTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PrivateToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *PrivateTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *PrivateTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the PrivateToken entity.
// If the PrivateToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *PrivateTokenMutation) ResetToken() {
	m.token = nil
}

// SetType sets the "type" field.
func (m *PrivateTokenMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *PrivateTokenMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the PrivateToken entity.
// If the PrivateToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateTokenMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PrivateTokenMutation) ResetType() {
	m._type = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *PrivateTokenMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *PrivateTokenMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the PrivateToken entity.
// If the PrivateToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateTokenMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *PrivateTokenMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PrivateTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PrivateTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PrivateToken entity.
// If the PrivateToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrivateTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PrivateTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PrivateTokenMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PrivateTokenMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PrivateTokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PrivateTokenMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PrivateTokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PrivateTokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the PrivateTokenMutation builder.
func (m *PrivateTokenMutation) Where(ps ...predicate.PrivateToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PrivateTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PrivateTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PrivateToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PrivateTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PrivateTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PrivateToken).
func (m *PrivateTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrivateTokenMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.token != nil {
		fields = append(fields, privatetoken.FieldToken)
	}
	if m._type != nil {
		fields = append(fields, privatetoken.FieldType)
	}
	if m.expires_at != nil {
		fields = append(fields, privatetoken.FieldExpiresAt)
	}
	if m.created_at != nil {
		fields = append(fields, privatetoken.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrivateTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case privatetoken.FieldToken:
		return m.Token()
	case privatetoken.FieldType:
		return m.GetType()
	case privatetoken.FieldExpiresAt:
		return m.ExpiresAt()
	case privatetoken.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrivateTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case privatetoken.FieldToken:
		return m.OldToken(ctx)
	case privatetoken.FieldType:
		return m.OldType(ctx)
	case privatetoken.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case privatetoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PrivateToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case privatetoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case privatetoken.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case privatetoken.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case privatetoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PrivateToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrivateTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrivateTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrivateTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PrivateToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrivateTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrivateTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrivateTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PrivateToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrivateTokenMutation) ResetField(name string) error {
	switch name {
	case privatetoken.FieldToken:
		m.ResetToken()
		return nil
	case privatetoken.FieldType:
		m.ResetType()
		return nil
	case privatetoken.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case privatetoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown PrivateToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrivateTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, privatetoken.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrivateTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case privatetoken.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrivateTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrivateTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrivateTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, privatetoken.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrivateTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case privatetoken.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrivateTokenMutation) ClearEdge(name string) error {
	switch name {
	case privatetoken.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown PrivateToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrivateTokenMutation) ResetEdge(name string) error {
	switch name {
	case privatetoken.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown PrivateToken edge %s", name)
}

// ProfileMutation represents an operation that mutates the Profile nodes in the graph.
type ProfileMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	units         *int
	addunits      *int
	age           *int
	addage        *int
	height        *float64
	addheight     *float64
	gender        *int
	addgender     *int
	weight        *float64
	addweight     *float64
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Profile, error)
	predicates    []predicate.Profile
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// profileOption allows management of the mutation configuration using functional options.
type profileOption func(*ProfileMutation)

// newProfileMutation creates new mutation for the Profile entity.
func newProfileMutation(c config, op Op, opts ...profileOption) *ProfileMutation {
	m := &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProfileID sets the ID field of the mutation.
func withProfileID(id uuid.UUID) profileOption {
	return func(m *ProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *Profile
		)
		m.oldValue = func(ctx context.Context) (*Profile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Profile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProfile sets the old Profile of the mutation.
func withProfile(node *Profile) profileOption {
	return func(m *ProfileMutation) {
		m.oldValue = func(context.Context) (*Profile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Profile entities.
func (m *ProfileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProfileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProfileMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Profile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ProfileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProfileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProfileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProfileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProfileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProfileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ProfileMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ProfileMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ProfileMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[profile.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ProfileMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[profile.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ProfileMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, profile.FieldDeletedAt)
}

// SetUnits sets the "units" field.
func (m *ProfileMutation) SetUnits(i int) {
	m.units = &i
	m.addunits = nil
}

// Units returns the value of the "units" field in the mutation.
func (m *ProfileMutation) Units() (r int, exists bool) {
	v := m.units
	if v == nil {
		return
	}
	return *v, true
}

// OldUnits returns the old "units" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldUnits(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnits: %w", err)
	}
	return oldValue.Units, nil
}

// AddUnits adds i to the "units" field.
func (m *ProfileMutation) AddUnits(i int) {
	if m.addunits != nil {
		*m.addunits += i
	} else {
		m.addunits = &i
	}
}

// AddedUnits returns the value that was added to the "units" field in this mutation.
func (m *ProfileMutation) AddedUnits() (r int, exists bool) {
	v := m.addunits
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnits resets all changes to the "units" field.
func (m *ProfileMutation) ResetUnits() {
	m.units = nil
	m.addunits = nil
}

// SetAge sets the "age" field.
func (m *ProfileMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *ProfileMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *ProfileMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *ProfileMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *ProfileMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetHeight sets the "height" field.
func (m *ProfileMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *ProfileMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldHeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *ProfileMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *ProfileMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *ProfileMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetGender sets the "gender" field.
func (m *ProfileMutation) SetGender(i int) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *ProfileMutation) Gender() (r int, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldGender(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *ProfileMutation) AddGender(i int) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *ProfileMutation) AddedGender() (r int, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender resets all changes to the "gender" field.
func (m *ProfileMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetWeight sets the "weight" field.
func (m *ProfileMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *ProfileMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Profile entity.
// If the Profile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProfileMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *ProfileMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *ProfileMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *ProfileMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ProfileMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ProfileMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ProfileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ProfileMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ProfileMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ProfileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ProfileMutation builder.
func (m *ProfileMutation) Where(ps ...predicate.Profile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Profile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, profile.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profile.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, profile.FieldDeletedAt)
	}
	if m.units != nil {
		fields = append(fields, profile.FieldUnits)
	}
	if m.age != nil {
		fields = append(fields, profile.FieldAge)
	}
	if m.height != nil {
		fields = append(fields, profile.FieldHeight)
	}
	if m.gender != nil {
		fields = append(fields, profile.FieldGender)
	}
	if m.weight != nil {
		fields = append(fields, profile.FieldWeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldCreatedAt:
		return m.CreatedAt()
	case profile.FieldUpdatedAt:
		return m.UpdatedAt()
	case profile.FieldDeletedAt:
		return m.DeletedAt()
	case profile.FieldUnits:
		return m.Units()
	case profile.FieldAge:
		return m.Age()
	case profile.FieldHeight:
		return m.Height()
	case profile.FieldGender:
		return m.Gender()
	case profile.FieldWeight:
		return m.Weight()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case profile.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case profile.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case profile.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case profile.FieldUnits:
		return m.OldUnits(ctx)
	case profile.FieldAge:
		return m.OldAge(ctx)
	case profile.FieldHeight:
		return m.OldHeight(ctx)
	case profile.FieldGender:
		return m.OldGender(ctx)
	case profile.FieldWeight:
		return m.OldWeight(ctx)
	}
	return nil, fmt.Errorf("unknown Profile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case profile.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case profile.FieldUnits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnits(v)
		return nil
	case profile.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case profile.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case profile.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case profile.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProfileMutation) AddedFields() []string {
	var fields []string
	if m.addunits != nil {
		fields = append(fields, profile.FieldUnits)
	}
	if m.addage != nil {
		fields = append(fields, profile.FieldAge)
	}
	if m.addheight != nil {
		fields = append(fields, profile.FieldHeight)
	}
	if m.addgender != nil {
		fields = append(fields, profile.FieldGender)
	}
	if m.addweight != nil {
		fields = append(fields, profile.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldUnits:
		return m.AddedUnits()
	case profile.FieldAge:
		return m.AddedAge()
	case profile.FieldHeight:
		return m.AddedHeight()
	case profile.FieldGender:
		return m.AddedGender()
	case profile.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case profile.FieldUnits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnits(v)
		return nil
	case profile.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case profile.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case profile.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case profile.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profile.FieldDeletedAt) {
		fields = append(fields, profile.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	switch name {
	case profile.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case profile.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case profile.FieldUnits:
		m.ResetUnits()
		return nil
	case profile.FieldAge:
		m.ResetAge()
		return nil
	case profile.FieldHeight:
		m.ResetHeight()
		return nil
	case profile.FieldGender:
		m.ResetGender()
		return nil
	case profile.FieldWeight:
		m.ResetWeight()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, profile.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, profile.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case profile.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	case profile.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	token         *string
	expires_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id uuid.UUID) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetToken sets the "token" field.
func (m *SessionMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *SessionMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *SessionMutation) ResetToken() {
	m.token = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *SessionMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *SessionMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *SessionMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.token != nil {
		fields = append(fields, session.FieldToken)
	}
	if m.expires_at != nil {
		fields = append(fields, session.FieldExpiresAt)
	}
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldToken:
		return m.Token()
	case session.FieldExpiresAt:
		return m.ExpiresAt()
	case session.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldToken:
		return m.OldToken(ctx)
	case session.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case session.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case session.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldToken:
		m.ResetToken()
		return nil
	case session.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	updated_at           *time.Time
	deleted_at           *time.Time
	name                 *string
	email                *string
	password             *string
	email_verified_at    *time.Time
	clearedFields        map[string]struct{}
	bodyweights          map[uuid.UUID]struct{}
	removedbodyweights   map[uuid.UUID]struct{}
	clearedbodyweights   bool
	sessions             map[uuid.UUID]struct{}
	removedsessions      map[uuid.UUID]struct{}
	clearedsessions      bool
	profile              *uuid.UUID
	clearedprofile       bool
	workouts             map[uuid.UUID]struct{}
	removedworkouts      map[uuid.UUID]struct{}
	clearedworkouts      bool
	workout_logs         map[uuid.UUID]struct{}
	removedworkout_logs  map[uuid.UUID]struct{}
	clearedworkout_logs  bool
	private_token        map[uuid.UUID]struct{}
	removedprivate_token map[uuid.UUID]struct{}
	clearedprivate_token bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmailVerifiedAt sets the "email_verified_at" field.
func (m *UserMutation) SetEmailVerifiedAt(t time.Time) {
	m.email_verified_at = &t
}

// EmailVerifiedAt returns the value of the "email_verified_at" field in the mutation.
func (m *UserMutation) EmailVerifiedAt() (r time.Time, exists bool) {
	v := m.email_verified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerifiedAt returns the old "email_verified_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerifiedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailVerifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailVerifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerifiedAt: %w", err)
	}
	return oldValue.EmailVerifiedAt, nil
}

// ClearEmailVerifiedAt clears the value of the "email_verified_at" field.
func (m *UserMutation) ClearEmailVerifiedAt() {
	m.email_verified_at = nil
	m.clearedFields[user.FieldEmailVerifiedAt] = struct{}{}
}

// EmailVerifiedAtCleared returns if the "email_verified_at" field was cleared in this mutation.
func (m *UserMutation) EmailVerifiedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldEmailVerifiedAt]
	return ok
}

// ResetEmailVerifiedAt resets all changes to the "email_verified_at" field.
func (m *UserMutation) ResetEmailVerifiedAt() {
	m.email_verified_at = nil
	delete(m.clearedFields, user.FieldEmailVerifiedAt)
}

// AddBodyweightIDs adds the "bodyweights" edge to the Bodyweight entity by ids.
func (m *UserMutation) AddBodyweightIDs(ids ...uuid.UUID) {
	if m.bodyweights == nil {
		m.bodyweights = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.bodyweights[ids[i]] = struct{}{}
	}
}

// ClearBodyweights clears the "bodyweights" edge to the Bodyweight entity.
func (m *UserMutation) ClearBodyweights() {
	m.clearedbodyweights = true
}

// BodyweightsCleared reports if the "bodyweights" edge to the Bodyweight entity was cleared.
func (m *UserMutation) BodyweightsCleared() bool {
	return m.clearedbodyweights
}

// RemoveBodyweightIDs removes the "bodyweights" edge to the Bodyweight entity by IDs.
func (m *UserMutation) RemoveBodyweightIDs(ids ...uuid.UUID) {
	if m.removedbodyweights == nil {
		m.removedbodyweights = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.bodyweights, ids[i])
		m.removedbodyweights[ids[i]] = struct{}{}
	}
}

// RemovedBodyweights returns the removed IDs of the "bodyweights" edge to the Bodyweight entity.
func (m *UserMutation) RemovedBodyweightsIDs() (ids []uuid.UUID) {
	for id := range m.removedbodyweights {
		ids = append(ids, id)
	}
	return
}

// BodyweightsIDs returns the "bodyweights" edge IDs in the mutation.
func (m *UserMutation) BodyweightsIDs() (ids []uuid.UUID) {
	for id := range m.bodyweights {
		ids = append(ids, id)
	}
	return
}

// ResetBodyweights resets all changes to the "bodyweights" edge.
func (m *UserMutation) ResetBodyweights() {
	m.bodyweights = nil
	m.clearedbodyweights = false
	m.removedbodyweights = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...uuid.UUID) {
	if m.sessions == nil {
		m.sessions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...uuid.UUID) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []uuid.UUID) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []uuid.UUID) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// SetProfileID sets the "profile" edge to the Profile entity by id.
func (m *UserMutation) SetProfileID(id uuid.UUID) {
	m.profile = &id
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (m *UserMutation) ClearProfile() {
	m.clearedprofile = true
}

// ProfileCleared reports if the "profile" edge to the Profile entity was cleared.
func (m *UserMutation) ProfileCleared() bool {
	return m.clearedprofile
}

// ProfileID returns the "profile" edge ID in the mutation.
func (m *UserMutation) ProfileID() (id uuid.UUID, exists bool) {
	if m.profile != nil {
		return *m.profile, true
	}
	return
}

// ProfileIDs returns the "profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProfileIDs() (ids []uuid.UUID) {
	if id := m.profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile resets all changes to the "profile" edge.
func (m *UserMutation) ResetProfile() {
	m.profile = nil
	m.clearedprofile = false
}

// AddWorkoutIDs adds the "workouts" edge to the Workout entity by ids.
func (m *UserMutation) AddWorkoutIDs(ids ...uuid.UUID) {
	if m.workouts == nil {
		m.workouts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workouts[ids[i]] = struct{}{}
	}
}

// ClearWorkouts clears the "workouts" edge to the Workout entity.
func (m *UserMutation) ClearWorkouts() {
	m.clearedworkouts = true
}

// WorkoutsCleared reports if the "workouts" edge to the Workout entity was cleared.
func (m *UserMutation) WorkoutsCleared() bool {
	return m.clearedworkouts
}

// RemoveWorkoutIDs removes the "workouts" edge to the Workout entity by IDs.
func (m *UserMutation) RemoveWorkoutIDs(ids ...uuid.UUID) {
	if m.removedworkouts == nil {
		m.removedworkouts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workouts, ids[i])
		m.removedworkouts[ids[i]] = struct{}{}
	}
}

// RemovedWorkouts returns the removed IDs of the "workouts" edge to the Workout entity.
func (m *UserMutation) RemovedWorkoutsIDs() (ids []uuid.UUID) {
	for id := range m.removedworkouts {
		ids = append(ids, id)
	}
	return
}

// WorkoutsIDs returns the "workouts" edge IDs in the mutation.
func (m *UserMutation) WorkoutsIDs() (ids []uuid.UUID) {
	for id := range m.workouts {
		ids = append(ids, id)
	}
	return
}

// ResetWorkouts resets all changes to the "workouts" edge.
func (m *UserMutation) ResetWorkouts() {
	m.workouts = nil
	m.clearedworkouts = false
	m.removedworkouts = nil
}

// AddWorkoutLogIDs adds the "workout_logs" edge to the WorkoutLog entity by ids.
func (m *UserMutation) AddWorkoutLogIDs(ids ...uuid.UUID) {
	if m.workout_logs == nil {
		m.workout_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workout_logs[ids[i]] = struct{}{}
	}
}

// ClearWorkoutLogs clears the "workout_logs" edge to the WorkoutLog entity.
func (m *UserMutation) ClearWorkoutLogs() {
	m.clearedworkout_logs = true
}

// WorkoutLogsCleared reports if the "workout_logs" edge to the WorkoutLog entity was cleared.
func (m *UserMutation) WorkoutLogsCleared() bool {
	return m.clearedworkout_logs
}

// RemoveWorkoutLogIDs removes the "workout_logs" edge to the WorkoutLog entity by IDs.
func (m *UserMutation) RemoveWorkoutLogIDs(ids ...uuid.UUID) {
	if m.removedworkout_logs == nil {
		m.removedworkout_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workout_logs, ids[i])
		m.removedworkout_logs[ids[i]] = struct{}{}
	}
}

// RemovedWorkoutLogs returns the removed IDs of the "workout_logs" edge to the WorkoutLog entity.
func (m *UserMutation) RemovedWorkoutLogsIDs() (ids []uuid.UUID) {
	for id := range m.removedworkout_logs {
		ids = append(ids, id)
	}
	return
}

// WorkoutLogsIDs returns the "workout_logs" edge IDs in the mutation.
func (m *UserMutation) WorkoutLogsIDs() (ids []uuid.UUID) {
	for id := range m.workout_logs {
		ids = append(ids, id)
	}
	return
}

// ResetWorkoutLogs resets all changes to the "workout_logs" edge.
func (m *UserMutation) ResetWorkoutLogs() {
	m.workout_logs = nil
	m.clearedworkout_logs = false
	m.removedworkout_logs = nil
}

// AddPrivateTokenIDs adds the "private_token" edge to the PrivateToken entity by ids.
func (m *UserMutation) AddPrivateTokenIDs(ids ...uuid.UUID) {
	if m.private_token == nil {
		m.private_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.private_token[ids[i]] = struct{}{}
	}
}

// ClearPrivateToken clears the "private_token" edge to the PrivateToken entity.
func (m *UserMutation) ClearPrivateToken() {
	m.clearedprivate_token = true
}

// PrivateTokenCleared reports if the "private_token" edge to the PrivateToken entity was cleared.
func (m *UserMutation) PrivateTokenCleared() bool {
	return m.clearedprivate_token
}

// RemovePrivateTokenIDs removes the "private_token" edge to the PrivateToken entity by IDs.
func (m *UserMutation) RemovePrivateTokenIDs(ids ...uuid.UUID) {
	if m.removedprivate_token == nil {
		m.removedprivate_token = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.private_token, ids[i])
		m.removedprivate_token[ids[i]] = struct{}{}
	}
}

// RemovedPrivateToken returns the removed IDs of the "private_token" edge to the PrivateToken entity.
func (m *UserMutation) RemovedPrivateTokenIDs() (ids []uuid.UUID) {
	for id := range m.removedprivate_token {
		ids = append(ids, id)
	}
	return
}

// PrivateTokenIDs returns the "private_token" edge IDs in the mutation.
func (m *UserMutation) PrivateTokenIDs() (ids []uuid.UUID) {
	for id := range m.private_token {
		ids = append(ids, id)
	}
	return
}

// ResetPrivateToken resets all changes to the "private_token" edge.
func (m *UserMutation) ResetPrivateToken() {
	m.private_token = nil
	m.clearedprivate_token = false
	m.removedprivate_token = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email_verified_at != nil {
		fields = append(fields, user.FieldEmailVerifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmailVerifiedAt:
		return m.EmailVerifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmailVerifiedAt:
		return m.OldEmailVerifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmailVerifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.FieldCleared(user.FieldEmailVerifiedAt) {
		fields = append(fields, user.FieldEmailVerifiedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case user.FieldEmailVerifiedAt:
		m.ClearEmailVerifiedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmailVerifiedAt:
		m.ResetEmailVerifiedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.bodyweights != nil {
		edges = append(edges, user.EdgeBodyweights)
	}
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.profile != nil {
		edges = append(edges, user.EdgeProfile)
	}
	if m.workouts != nil {
		edges = append(edges, user.EdgeWorkouts)
	}
	if m.workout_logs != nil {
		edges = append(edges, user.EdgeWorkoutLogs)
	}
	if m.private_token != nil {
		edges = append(edges, user.EdgePrivateToken)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBodyweights:
		ids := make([]ent.Value, 0, len(m.bodyweights))
		for id := range m.bodyweights {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeProfile:
		if id := m.profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeWorkouts:
		ids := make([]ent.Value, 0, len(m.workouts))
		for id := range m.workouts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWorkoutLogs:
		ids := make([]ent.Value, 0, len(m.workout_logs))
		for id := range m.workout_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePrivateToken:
		ids := make([]ent.Value, 0, len(m.private_token))
		for id := range m.private_token {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedbodyweights != nil {
		edges = append(edges, user.EdgeBodyweights)
	}
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedworkouts != nil {
		edges = append(edges, user.EdgeWorkouts)
	}
	if m.removedworkout_logs != nil {
		edges = append(edges, user.EdgeWorkoutLogs)
	}
	if m.removedprivate_token != nil {
		edges = append(edges, user.EdgePrivateToken)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeBodyweights:
		ids := make([]ent.Value, 0, len(m.removedbodyweights))
		for id := range m.removedbodyweights {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWorkouts:
		ids := make([]ent.Value, 0, len(m.removedworkouts))
		for id := range m.removedworkouts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWorkoutLogs:
		ids := make([]ent.Value, 0, len(m.removedworkout_logs))
		for id := range m.removedworkout_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePrivateToken:
		ids := make([]ent.Value, 0, len(m.removedprivate_token))
		for id := range m.removedprivate_token {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedbodyweights {
		edges = append(edges, user.EdgeBodyweights)
	}
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedprofile {
		edges = append(edges, user.EdgeProfile)
	}
	if m.clearedworkouts {
		edges = append(edges, user.EdgeWorkouts)
	}
	if m.clearedworkout_logs {
		edges = append(edges, user.EdgeWorkoutLogs)
	}
	if m.clearedprivate_token {
		edges = append(edges, user.EdgePrivateToken)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeBodyweights:
		return m.clearedbodyweights
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeProfile:
		return m.clearedprofile
	case user.EdgeWorkouts:
		return m.clearedworkouts
	case user.EdgeWorkoutLogs:
		return m.clearedworkout_logs
	case user.EdgePrivateToken:
		return m.clearedprivate_token
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeProfile:
		m.ClearProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeBodyweights:
		m.ResetBodyweights()
		return nil
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeProfile:
		m.ResetProfile()
		return nil
	case user.EdgeWorkouts:
		m.ResetWorkouts()
		return nil
	case user.EdgeWorkoutLogs:
		m.ResetWorkoutLogs()
		return nil
	case user.EdgePrivateToken:
		m.ResetPrivateToken()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WorkoutMutation represents an operation that mutates the Workout nodes in the graph.
type WorkoutMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	created_at               *time.Time
	updated_at               *time.Time
	deleted_at               *time.Time
	name                     *string
	clearedFields            map[string]struct{}
	user                     *uuid.UUID
	cleareduser              bool
	workout_exercises        map[uuid.UUID]struct{}
	removedworkout_exercises map[uuid.UUID]struct{}
	clearedworkout_exercises bool
	workout_logs             map[uuid.UUID]struct{}
	removedworkout_logs      map[uuid.UUID]struct{}
	clearedworkout_logs      bool
	done                     bool
	oldValue                 func(context.Context) (*Workout, error)
	predicates               []predicate.Workout
}

var _ ent.Mutation = (*WorkoutMutation)(nil)

// workoutOption allows management of the mutation configuration using functional options.
type workoutOption func(*WorkoutMutation)

// newWorkoutMutation creates new mutation for the Workout entity.
func newWorkoutMutation(c config, op Op, opts ...workoutOption) *WorkoutMutation {
	m := &WorkoutMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkout,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkoutID sets the ID field of the mutation.
func withWorkoutID(id uuid.UUID) workoutOption {
	return func(m *WorkoutMutation) {
		var (
			err   error
			once  sync.Once
			value *Workout
		)
		m.oldValue = func(ctx context.Context) (*Workout, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Workout.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkout sets the old Workout of the mutation.
func withWorkout(node *Workout) workoutOption {
	return func(m *WorkoutMutation) {
		m.oldValue = func(context.Context) (*Workout, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkoutMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkoutMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Workout entities.
func (m *WorkoutMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkoutMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkoutMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Workout.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkoutMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkoutMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Workout entity.
// If the Workout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkoutMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkoutMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkoutMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Workout entity.
// If the Workout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkoutMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *WorkoutMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *WorkoutMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Workout entity.
// If the Workout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *WorkoutMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[workout.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *WorkoutMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[workout.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *WorkoutMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, workout.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *WorkoutMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WorkoutMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Workout entity.
// If the Workout object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WorkoutMutation) ResetName() {
	m.name = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *WorkoutMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *WorkoutMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WorkoutMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *WorkoutMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WorkoutMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WorkoutMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by ids.
func (m *WorkoutMutation) AddWorkoutExerciseIDs(ids ...uuid.UUID) {
	if m.workout_exercises == nil {
		m.workout_exercises = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workout_exercises[ids[i]] = struct{}{}
	}
}

// ClearWorkoutExercises clears the "workout_exercises" edge to the WorkoutExercise entity.
func (m *WorkoutMutation) ClearWorkoutExercises() {
	m.clearedworkout_exercises = true
}

// WorkoutExercisesCleared reports if the "workout_exercises" edge to the WorkoutExercise entity was cleared.
func (m *WorkoutMutation) WorkoutExercisesCleared() bool {
	return m.clearedworkout_exercises
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (m *WorkoutMutation) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) {
	if m.removedworkout_exercises == nil {
		m.removedworkout_exercises = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workout_exercises, ids[i])
		m.removedworkout_exercises[ids[i]] = struct{}{}
	}
}

// RemovedWorkoutExercises returns the removed IDs of the "workout_exercises" edge to the WorkoutExercise entity.
func (m *WorkoutMutation) RemovedWorkoutExercisesIDs() (ids []uuid.UUID) {
	for id := range m.removedworkout_exercises {
		ids = append(ids, id)
	}
	return
}

// WorkoutExercisesIDs returns the "workout_exercises" edge IDs in the mutation.
func (m *WorkoutMutation) WorkoutExercisesIDs() (ids []uuid.UUID) {
	for id := range m.workout_exercises {
		ids = append(ids, id)
	}
	return
}

// ResetWorkoutExercises resets all changes to the "workout_exercises" edge.
func (m *WorkoutMutation) ResetWorkoutExercises() {
	m.workout_exercises = nil
	m.clearedworkout_exercises = false
	m.removedworkout_exercises = nil
}

// AddWorkoutLogIDs adds the "workout_logs" edge to the WorkoutLog entity by ids.
func (m *WorkoutMutation) AddWorkoutLogIDs(ids ...uuid.UUID) {
	if m.workout_logs == nil {
		m.workout_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workout_logs[ids[i]] = struct{}{}
	}
}

// ClearWorkoutLogs clears the "workout_logs" edge to the WorkoutLog entity.
func (m *WorkoutMutation) ClearWorkoutLogs() {
	m.clearedworkout_logs = true
}

// WorkoutLogsCleared reports if the "workout_logs" edge to the WorkoutLog entity was cleared.
func (m *WorkoutMutation) WorkoutLogsCleared() bool {
	return m.clearedworkout_logs
}

// RemoveWorkoutLogIDs removes the "workout_logs" edge to the WorkoutLog entity by IDs.
func (m *WorkoutMutation) RemoveWorkoutLogIDs(ids ...uuid.UUID) {
	if m.removedworkout_logs == nil {
		m.removedworkout_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workout_logs, ids[i])
		m.removedworkout_logs[ids[i]] = struct{}{}
	}
}

// RemovedWorkoutLogs returns the removed IDs of the "workout_logs" edge to the WorkoutLog entity.
func (m *WorkoutMutation) RemovedWorkoutLogsIDs() (ids []uuid.UUID) {
	for id := range m.removedworkout_logs {
		ids = append(ids, id)
	}
	return
}

// WorkoutLogsIDs returns the "workout_logs" edge IDs in the mutation.
func (m *WorkoutMutation) WorkoutLogsIDs() (ids []uuid.UUID) {
	for id := range m.workout_logs {
		ids = append(ids, id)
	}
	return
}

// ResetWorkoutLogs resets all changes to the "workout_logs" edge.
func (m *WorkoutMutation) ResetWorkoutLogs() {
	m.workout_logs = nil
	m.clearedworkout_logs = false
	m.removedworkout_logs = nil
}

// Where appends a list predicates to the WorkoutMutation builder.
func (m *WorkoutMutation) Where(ps ...predicate.Workout) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkoutMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkoutMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Workout, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkoutMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkoutMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Workout).
func (m *WorkoutMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkoutMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, workout.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workout.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, workout.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, workout.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkoutMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workout.FieldCreatedAt:
		return m.CreatedAt()
	case workout.FieldUpdatedAt:
		return m.UpdatedAt()
	case workout.FieldDeletedAt:
		return m.DeletedAt()
	case workout.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkoutMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workout.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workout.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workout.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case workout.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Workout field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkoutMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workout.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workout.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workout.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case workout.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Workout field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkoutMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkoutMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkoutMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Workout numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkoutMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(workout.FieldDeletedAt) {
		fields = append(fields, workout.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkoutMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkoutMutation) ClearField(name string) error {
	switch name {
	case workout.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Workout nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkoutMutation) ResetField(name string) error {
	switch name {
	case workout.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workout.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workout.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case workout.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Workout field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkoutMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, workout.EdgeUser)
	}
	if m.workout_exercises != nil {
		edges = append(edges, workout.EdgeWorkoutExercises)
	}
	if m.workout_logs != nil {
		edges = append(edges, workout.EdgeWorkoutLogs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkoutMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workout.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case workout.EdgeWorkoutExercises:
		ids := make([]ent.Value, 0, len(m.workout_exercises))
		for id := range m.workout_exercises {
			ids = append(ids, id)
		}
		return ids
	case workout.EdgeWorkoutLogs:
		ids := make([]ent.Value, 0, len(m.workout_logs))
		for id := range m.workout_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkoutMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedworkout_exercises != nil {
		edges = append(edges, workout.EdgeWorkoutExercises)
	}
	if m.removedworkout_logs != nil {
		edges = append(edges, workout.EdgeWorkoutLogs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkoutMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workout.EdgeWorkoutExercises:
		ids := make([]ent.Value, 0, len(m.removedworkout_exercises))
		for id := range m.removedworkout_exercises {
			ids = append(ids, id)
		}
		return ids
	case workout.EdgeWorkoutLogs:
		ids := make([]ent.Value, 0, len(m.removedworkout_logs))
		for id := range m.removedworkout_logs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkoutMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, workout.EdgeUser)
	}
	if m.clearedworkout_exercises {
		edges = append(edges, workout.EdgeWorkoutExercises)
	}
	if m.clearedworkout_logs {
		edges = append(edges, workout.EdgeWorkoutLogs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkoutMutation) EdgeCleared(name string) bool {
	switch name {
	case workout.EdgeUser:
		return m.cleareduser
	case workout.EdgeWorkoutExercises:
		return m.clearedworkout_exercises
	case workout.EdgeWorkoutLogs:
		return m.clearedworkout_logs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkoutMutation) ClearEdge(name string) error {
	switch name {
	case workout.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Workout unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkoutMutation) ResetEdge(name string) error {
	switch name {
	case workout.EdgeUser:
		m.ResetUser()
		return nil
	case workout.EdgeWorkoutExercises:
		m.ResetWorkoutExercises()
		return nil
	case workout.EdgeWorkoutLogs:
		m.ResetWorkoutLogs()
		return nil
	}
	return fmt.Errorf("unknown Workout edge %s", name)
}

// WorkoutExerciseMutation represents an operation that mutates the WorkoutExercise nodes in the graph.
type WorkoutExerciseMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	created_at               *time.Time
	updated_at               *time.Time
	deleted_at               *time.Time
	_order                   *uint
	add_order                *int
	sets                     *uint
	addsets                  *int
	weight                   *float64
	addweight                *float64
	reps                     *uint
	addreps                  *int
	clearedFields            map[string]struct{}
	workout                  *uuid.UUID
	clearedworkout           bool
	exercise                 *uuid.UUID
	clearedexercise          bool
	exercise_instance        *uuid.UUID
	clearedexercise_instance bool
	done                     bool
	oldValue                 func(context.Context) (*WorkoutExercise, error)
	predicates               []predicate.WorkoutExercise
}

var _ ent.Mutation = (*WorkoutExerciseMutation)(nil)

// workoutexerciseOption allows management of the mutation configuration using functional options.
type workoutexerciseOption func(*WorkoutExerciseMutation)

// newWorkoutExerciseMutation creates new mutation for the WorkoutExercise entity.
func newWorkoutExerciseMutation(c config, op Op, opts ...workoutexerciseOption) *WorkoutExerciseMutation {
	m := &WorkoutExerciseMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkoutExercise,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkoutExerciseID sets the ID field of the mutation.
func withWorkoutExerciseID(id uuid.UUID) workoutexerciseOption {
	return func(m *WorkoutExerciseMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkoutExercise
		)
		m.oldValue = func(ctx context.Context) (*WorkoutExercise, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkoutExercise.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkoutExercise sets the old WorkoutExercise of the mutation.
func withWorkoutExercise(node *WorkoutExercise) workoutexerciseOption {
	return func(m *WorkoutExerciseMutation) {
		m.oldValue = func(context.Context) (*WorkoutExercise, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkoutExerciseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkoutExerciseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkoutExercise entities.
func (m *WorkoutExerciseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkoutExerciseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkoutExerciseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkoutExercise.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkoutExerciseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkoutExerciseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkoutExerciseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkoutExerciseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkoutExerciseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkoutExerciseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *WorkoutExerciseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *WorkoutExerciseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *WorkoutExerciseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[workoutexercise.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *WorkoutExerciseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[workoutexercise.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *WorkoutExerciseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, workoutexercise.FieldDeletedAt)
}

// SetOrder sets the "order" field.
func (m *WorkoutExerciseMutation) SetOrder(u uint) {
	m._order = &u
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *WorkoutExerciseMutation) Order() (r uint, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldOrder(ctx context.Context) (v *uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds u to the "order" field.
func (m *WorkoutExerciseMutation) AddOrder(u int) {
	if m.add_order != nil {
		*m.add_order += u
	} else {
		m.add_order = &u
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *WorkoutExerciseMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ClearOrder clears the value of the "order" field.
func (m *WorkoutExerciseMutation) ClearOrder() {
	m._order = nil
	m.add_order = nil
	m.clearedFields[workoutexercise.FieldOrder] = struct{}{}
}

// OrderCleared returns if the "order" field was cleared in this mutation.
func (m *WorkoutExerciseMutation) OrderCleared() bool {
	_, ok := m.clearedFields[workoutexercise.FieldOrder]
	return ok
}

// ResetOrder resets all changes to the "order" field.
func (m *WorkoutExerciseMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
	delete(m.clearedFields, workoutexercise.FieldOrder)
}

// SetSets sets the "sets" field.
func (m *WorkoutExerciseMutation) SetSets(u uint) {
	m.sets = &u
	m.addsets = nil
}

// Sets returns the value of the "sets" field in the mutation.
func (m *WorkoutExerciseMutation) Sets() (r uint, exists bool) {
	v := m.sets
	if v == nil {
		return
	}
	return *v, true
}

// OldSets returns the old "sets" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldSets(ctx context.Context) (v *uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSets: %w", err)
	}
	return oldValue.Sets, nil
}

// AddSets adds u to the "sets" field.
func (m *WorkoutExerciseMutation) AddSets(u int) {
	if m.addsets != nil {
		*m.addsets += u
	} else {
		m.addsets = &u
	}
}

// AddedSets returns the value that was added to the "sets" field in this mutation.
func (m *WorkoutExerciseMutation) AddedSets() (r int, exists bool) {
	v := m.addsets
	if v == nil {
		return
	}
	return *v, true
}

// ClearSets clears the value of the "sets" field.
func (m *WorkoutExerciseMutation) ClearSets() {
	m.sets = nil
	m.addsets = nil
	m.clearedFields[workoutexercise.FieldSets] = struct{}{}
}

// SetsCleared returns if the "sets" field was cleared in this mutation.
func (m *WorkoutExerciseMutation) SetsCleared() bool {
	_, ok := m.clearedFields[workoutexercise.FieldSets]
	return ok
}

// ResetSets resets all changes to the "sets" field.
func (m *WorkoutExerciseMutation) ResetSets() {
	m.sets = nil
	m.addsets = nil
	delete(m.clearedFields, workoutexercise.FieldSets)
}

// SetWeight sets the "weight" field.
func (m *WorkoutExerciseMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *WorkoutExerciseMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldWeight(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *WorkoutExerciseMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *WorkoutExerciseMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *WorkoutExerciseMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[workoutexercise.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *WorkoutExerciseMutation) WeightCleared() bool {
	_, ok := m.clearedFields[workoutexercise.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *WorkoutExerciseMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, workoutexercise.FieldWeight)
}

// SetReps sets the "reps" field.
func (m *WorkoutExerciseMutation) SetReps(u uint) {
	m.reps = &u
	m.addreps = nil
}

// Reps returns the value of the "reps" field in the mutation.
func (m *WorkoutExerciseMutation) Reps() (r uint, exists bool) {
	v := m.reps
	if v == nil {
		return
	}
	return *v, true
}

// OldReps returns the old "reps" field's value of the WorkoutExercise entity.
// If the WorkoutExercise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutExerciseMutation) OldReps(ctx context.Context) (v *uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReps: %w", err)
	}
	return oldValue.Reps, nil
}

// AddReps adds u to the "reps" field.
func (m *WorkoutExerciseMutation) AddReps(u int) {
	if m.addreps != nil {
		*m.addreps += u
	} else {
		m.addreps = &u
	}
}

// AddedReps returns the value that was added to the "reps" field in this mutation.
func (m *WorkoutExerciseMutation) AddedReps() (r int, exists bool) {
	v := m.addreps
	if v == nil {
		return
	}
	return *v, true
}

// ClearReps clears the value of the "reps" field.
func (m *WorkoutExerciseMutation) ClearReps() {
	m.reps = nil
	m.addreps = nil
	m.clearedFields[workoutexercise.FieldReps] = struct{}{}
}

// RepsCleared returns if the "reps" field was cleared in this mutation.
func (m *WorkoutExerciseMutation) RepsCleared() bool {
	_, ok := m.clearedFields[workoutexercise.FieldReps]
	return ok
}

// ResetReps resets all changes to the "reps" field.
func (m *WorkoutExerciseMutation) ResetReps() {
	m.reps = nil
	m.addreps = nil
	delete(m.clearedFields, workoutexercise.FieldReps)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by id.
func (m *WorkoutExerciseMutation) SetWorkoutID(id uuid.UUID) {
	m.workout = &id
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (m *WorkoutExerciseMutation) ClearWorkout() {
	m.clearedworkout = true
}

// WorkoutCleared reports if the "workout" edge to the Workout entity was cleared.
func (m *WorkoutExerciseMutation) WorkoutCleared() bool {
	return m.clearedworkout
}

// WorkoutID returns the "workout" edge ID in the mutation.
func (m *WorkoutExerciseMutation) WorkoutID() (id uuid.UUID, exists bool) {
	if m.workout != nil {
		return *m.workout, true
	}
	return
}

// WorkoutIDs returns the "workout" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkoutID instead. It exists only for internal usage by the builders.
func (m *WorkoutExerciseMutation) WorkoutIDs() (ids []uuid.UUID) {
	if id := m.workout; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkout resets all changes to the "workout" edge.
func (m *WorkoutExerciseMutation) ResetWorkout() {
	m.workout = nil
	m.clearedworkout = false
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by id.
func (m *WorkoutExerciseMutation) SetExerciseID(id uuid.UUID) {
	m.exercise = &id
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (m *WorkoutExerciseMutation) ClearExercise() {
	m.clearedexercise = true
}

// ExerciseCleared reports if the "exercise" edge to the Exercise entity was cleared.
func (m *WorkoutExerciseMutation) ExerciseCleared() bool {
	return m.clearedexercise
}

// ExerciseID returns the "exercise" edge ID in the mutation.
func (m *WorkoutExerciseMutation) ExerciseID() (id uuid.UUID, exists bool) {
	if m.exercise != nil {
		return *m.exercise, true
	}
	return
}

// ExerciseIDs returns the "exercise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExerciseID instead. It exists only for internal usage by the builders.
func (m *WorkoutExerciseMutation) ExerciseIDs() (ids []uuid.UUID) {
	if id := m.exercise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExercise resets all changes to the "exercise" edge.
func (m *WorkoutExerciseMutation) ResetExercise() {
	m.exercise = nil
	m.clearedexercise = false
}

// SetExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by id.
func (m *WorkoutExerciseMutation) SetExerciseInstanceID(id uuid.UUID) {
	m.exercise_instance = &id
}

// ClearExerciseInstance clears the "exercise_instance" edge to the ExerciseInstance entity.
func (m *WorkoutExerciseMutation) ClearExerciseInstance() {
	m.clearedexercise_instance = true
}

// ExerciseInstanceCleared reports if the "exercise_instance" edge to the ExerciseInstance entity was cleared.
func (m *WorkoutExerciseMutation) ExerciseInstanceCleared() bool {
	return m.clearedexercise_instance
}

// ExerciseInstanceID returns the "exercise_instance" edge ID in the mutation.
func (m *WorkoutExerciseMutation) ExerciseInstanceID() (id uuid.UUID, exists bool) {
	if m.exercise_instance != nil {
		return *m.exercise_instance, true
	}
	return
}

// ExerciseInstanceIDs returns the "exercise_instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExerciseInstanceID instead. It exists only for internal usage by the builders.
func (m *WorkoutExerciseMutation) ExerciseInstanceIDs() (ids []uuid.UUID) {
	if id := m.exercise_instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExerciseInstance resets all changes to the "exercise_instance" edge.
func (m *WorkoutExerciseMutation) ResetExerciseInstance() {
	m.exercise_instance = nil
	m.clearedexercise_instance = false
}

// Where appends a list predicates to the WorkoutExerciseMutation builder.
func (m *WorkoutExerciseMutation) Where(ps ...predicate.WorkoutExercise) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkoutExerciseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkoutExerciseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkoutExercise, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkoutExerciseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkoutExerciseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkoutExercise).
func (m *WorkoutExerciseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkoutExerciseMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, workoutexercise.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workoutexercise.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, workoutexercise.FieldDeletedAt)
	}
	if m._order != nil {
		fields = append(fields, workoutexercise.FieldOrder)
	}
	if m.sets != nil {
		fields = append(fields, workoutexercise.FieldSets)
	}
	if m.weight != nil {
		fields = append(fields, workoutexercise.FieldWeight)
	}
	if m.reps != nil {
		fields = append(fields, workoutexercise.FieldReps)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkoutExerciseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workoutexercise.FieldCreatedAt:
		return m.CreatedAt()
	case workoutexercise.FieldUpdatedAt:
		return m.UpdatedAt()
	case workoutexercise.FieldDeletedAt:
		return m.DeletedAt()
	case workoutexercise.FieldOrder:
		return m.Order()
	case workoutexercise.FieldSets:
		return m.Sets()
	case workoutexercise.FieldWeight:
		return m.Weight()
	case workoutexercise.FieldReps:
		return m.Reps()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkoutExerciseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workoutexercise.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workoutexercise.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workoutexercise.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case workoutexercise.FieldOrder:
		return m.OldOrder(ctx)
	case workoutexercise.FieldSets:
		return m.OldSets(ctx)
	case workoutexercise.FieldWeight:
		return m.OldWeight(ctx)
	case workoutexercise.FieldReps:
		return m.OldReps(ctx)
	}
	return nil, fmt.Errorf("unknown WorkoutExercise field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkoutExerciseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workoutexercise.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workoutexercise.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workoutexercise.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case workoutexercise.FieldOrder:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case workoutexercise.FieldSets:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSets(v)
		return nil
	case workoutexercise.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case workoutexercise.FieldReps:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReps(v)
		return nil
	}
	return fmt.Errorf("unknown WorkoutExercise field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkoutExerciseMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, workoutexercise.FieldOrder)
	}
	if m.addsets != nil {
		fields = append(fields, workoutexercise.FieldSets)
	}
	if m.addweight != nil {
		fields = append(fields, workoutexercise.FieldWeight)
	}
	if m.addreps != nil {
		fields = append(fields, workoutexercise.FieldReps)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkoutExerciseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case workoutexercise.FieldOrder:
		return m.AddedOrder()
	case workoutexercise.FieldSets:
		return m.AddedSets()
	case workoutexercise.FieldWeight:
		return m.AddedWeight()
	case workoutexercise.FieldReps:
		return m.AddedReps()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkoutExerciseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case workoutexercise.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	case workoutexercise.FieldSets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSets(v)
		return nil
	case workoutexercise.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case workoutexercise.FieldReps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReps(v)
		return nil
	}
	return fmt.Errorf("unknown WorkoutExercise numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkoutExerciseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(workoutexercise.FieldDeletedAt) {
		fields = append(fields, workoutexercise.FieldDeletedAt)
	}
	if m.FieldCleared(workoutexercise.FieldOrder) {
		fields = append(fields, workoutexercise.FieldOrder)
	}
	if m.FieldCleared(workoutexercise.FieldSets) {
		fields = append(fields, workoutexercise.FieldSets)
	}
	if m.FieldCleared(workoutexercise.FieldWeight) {
		fields = append(fields, workoutexercise.FieldWeight)
	}
	if m.FieldCleared(workoutexercise.FieldReps) {
		fields = append(fields, workoutexercise.FieldReps)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkoutExerciseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkoutExerciseMutation) ClearField(name string) error {
	switch name {
	case workoutexercise.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case workoutexercise.FieldOrder:
		m.ClearOrder()
		return nil
	case workoutexercise.FieldSets:
		m.ClearSets()
		return nil
	case workoutexercise.FieldWeight:
		m.ClearWeight()
		return nil
	case workoutexercise.FieldReps:
		m.ClearReps()
		return nil
	}
	return fmt.Errorf("unknown WorkoutExercise nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkoutExerciseMutation) ResetField(name string) error {
	switch name {
	case workoutexercise.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workoutexercise.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workoutexercise.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case workoutexercise.FieldOrder:
		m.ResetOrder()
		return nil
	case workoutexercise.FieldSets:
		m.ResetSets()
		return nil
	case workoutexercise.FieldWeight:
		m.ResetWeight()
		return nil
	case workoutexercise.FieldReps:
		m.ResetReps()
		return nil
	}
	return fmt.Errorf("unknown WorkoutExercise field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkoutExerciseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.workout != nil {
		edges = append(edges, workoutexercise.EdgeWorkout)
	}
	if m.exercise != nil {
		edges = append(edges, workoutexercise.EdgeExercise)
	}
	if m.exercise_instance != nil {
		edges = append(edges, workoutexercise.EdgeExerciseInstance)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkoutExerciseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workoutexercise.EdgeWorkout:
		if id := m.workout; id != nil {
			return []ent.Value{*id}
		}
	case workoutexercise.EdgeExercise:
		if id := m.exercise; id != nil {
			return []ent.Value{*id}
		}
	case workoutexercise.EdgeExerciseInstance:
		if id := m.exercise_instance; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkoutExerciseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkoutExerciseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkoutExerciseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedworkout {
		edges = append(edges, workoutexercise.EdgeWorkout)
	}
	if m.clearedexercise {
		edges = append(edges, workoutexercise.EdgeExercise)
	}
	if m.clearedexercise_instance {
		edges = append(edges, workoutexercise.EdgeExerciseInstance)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkoutExerciseMutation) EdgeCleared(name string) bool {
	switch name {
	case workoutexercise.EdgeWorkout:
		return m.clearedworkout
	case workoutexercise.EdgeExercise:
		return m.clearedexercise
	case workoutexercise.EdgeExerciseInstance:
		return m.clearedexercise_instance
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkoutExerciseMutation) ClearEdge(name string) error {
	switch name {
	case workoutexercise.EdgeWorkout:
		m.ClearWorkout()
		return nil
	case workoutexercise.EdgeExercise:
		m.ClearExercise()
		return nil
	case workoutexercise.EdgeExerciseInstance:
		m.ClearExerciseInstance()
		return nil
	}
	return fmt.Errorf("unknown WorkoutExercise unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkoutExerciseMutation) ResetEdge(name string) error {
	switch name {
	case workoutexercise.EdgeWorkout:
		m.ResetWorkout()
		return nil
	case workoutexercise.EdgeExercise:
		m.ResetExercise()
		return nil
	case workoutexercise.EdgeExerciseInstance:
		m.ResetExerciseInstance()
		return nil
	}
	return fmt.Errorf("unknown WorkoutExercise edge %s", name)
}

// WorkoutLogMutation represents an operation that mutates the WorkoutLog nodes in the graph.
type WorkoutLogMutation struct {
	config
	op                               Op
	typ                              string
	id                               *uuid.UUID
	created_at                       *time.Time
	updated_at                       *time.Time
	deleted_at                       *time.Time
	started_at                       *time.Time
	finished_at                      *time.Time
	status                           *int
	addstatus                        *int
	total_active_duration_seconds    *uint
	addtotal_active_duration_seconds *int
	total_pause_duration_seconds     *uint
	addtotal_pause_duration_seconds  *int
	clearedFields                    map[string]struct{}
	user                             *uuid.UUID
	cleareduser                      bool
	workout                          *uuid.UUID
	clearedworkout                   bool
	exercise_sets                    map[uuid.UUID]struct{}
	removedexercise_sets             map[uuid.UUID]struct{}
	clearedexercise_sets             bool
	exercise_instances               map[uuid.UUID]struct{}
	removedexercise_instances        map[uuid.UUID]struct{}
	clearedexercise_instances        bool
	done                             bool
	oldValue                         func(context.Context) (*WorkoutLog, error)
	predicates                       []predicate.WorkoutLog
}

var _ ent.Mutation = (*WorkoutLogMutation)(nil)

// workoutlogOption allows management of the mutation configuration using functional options.
type workoutlogOption func(*WorkoutLogMutation)

// newWorkoutLogMutation creates new mutation for the WorkoutLog entity.
func newWorkoutLogMutation(c config, op Op, opts ...workoutlogOption) *WorkoutLogMutation {
	m := &WorkoutLogMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkoutLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkoutLogID sets the ID field of the mutation.
func withWorkoutLogID(id uuid.UUID) workoutlogOption {
	return func(m *WorkoutLogMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkoutLog
		)
		m.oldValue = func(ctx context.Context) (*WorkoutLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkoutLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkoutLog sets the old WorkoutLog of the mutation.
func withWorkoutLog(node *WorkoutLog) workoutlogOption {
	return func(m *WorkoutLogMutation) {
		m.oldValue = func(context.Context) (*WorkoutLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkoutLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkoutLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkoutLog entities.
func (m *WorkoutLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkoutLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkoutLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkoutLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkoutLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkoutLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkoutLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkoutLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkoutLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkoutLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *WorkoutLogMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *WorkoutLogMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *WorkoutLogMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[workoutlog.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *WorkoutLogMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[workoutlog.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *WorkoutLogMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, workoutlog.FieldDeletedAt)
}

// SetStartedAt sets the "started_at" field.
func (m *WorkoutLogMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *WorkoutLogMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldStartedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of the "started_at" field.
func (m *WorkoutLogMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[workoutlog.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the "started_at" field was cleared in this mutation.
func (m *WorkoutLogMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[workoutlog.FieldStartedAt]
	return ok
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *WorkoutLogMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, workoutlog.FieldStartedAt)
}

// SetFinishedAt sets the "finished_at" field.
func (m *WorkoutLogMutation) SetFinishedAt(t time.Time) {
	m.finished_at = &t
}

// FinishedAt returns the value of the "finished_at" field in the mutation.
func (m *WorkoutLogMutation) FinishedAt() (r time.Time, exists bool) {
	v := m.finished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishedAt returns the old "finished_at" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldFinishedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishedAt: %w", err)
	}
	return oldValue.FinishedAt, nil
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (m *WorkoutLogMutation) ClearFinishedAt() {
	m.finished_at = nil
	m.clearedFields[workoutlog.FieldFinishedAt] = struct{}{}
}

// FinishedAtCleared returns if the "finished_at" field was cleared in this mutation.
func (m *WorkoutLogMutation) FinishedAtCleared() bool {
	_, ok := m.clearedFields[workoutlog.FieldFinishedAt]
	return ok
}

// ResetFinishedAt resets all changes to the "finished_at" field.
func (m *WorkoutLogMutation) ResetFinishedAt() {
	m.finished_at = nil
	delete(m.clearedFields, workoutlog.FieldFinishedAt)
}

// SetStatus sets the "status" field.
func (m *WorkoutLogMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *WorkoutLogMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *WorkoutLogMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *WorkoutLogMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *WorkoutLogMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetTotalActiveDurationSeconds sets the "total_active_duration_seconds" field.
func (m *WorkoutLogMutation) SetTotalActiveDurationSeconds(u uint) {
	m.total_active_duration_seconds = &u
	m.addtotal_active_duration_seconds = nil
}

// TotalActiveDurationSeconds returns the value of the "total_active_duration_seconds" field in the mutation.
func (m *WorkoutLogMutation) TotalActiveDurationSeconds() (r uint, exists bool) {
	v := m.total_active_duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalActiveDurationSeconds returns the old "total_active_duration_seconds" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldTotalActiveDurationSeconds(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalActiveDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalActiveDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalActiveDurationSeconds: %w", err)
	}
	return oldValue.TotalActiveDurationSeconds, nil
}

// AddTotalActiveDurationSeconds adds u to the "total_active_duration_seconds" field.
func (m *WorkoutLogMutation) AddTotalActiveDurationSeconds(u int) {
	if m.addtotal_active_duration_seconds != nil {
		*m.addtotal_active_duration_seconds += u
	} else {
		m.addtotal_active_duration_seconds = &u
	}
}

// AddedTotalActiveDurationSeconds returns the value that was added to the "total_active_duration_seconds" field in this mutation.
func (m *WorkoutLogMutation) AddedTotalActiveDurationSeconds() (r int, exists bool) {
	v := m.addtotal_active_duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalActiveDurationSeconds resets all changes to the "total_active_duration_seconds" field.
func (m *WorkoutLogMutation) ResetTotalActiveDurationSeconds() {
	m.total_active_duration_seconds = nil
	m.addtotal_active_duration_seconds = nil
}

// SetTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field.
func (m *WorkoutLogMutation) SetTotalPauseDurationSeconds(u uint) {
	m.total_pause_duration_seconds = &u
	m.addtotal_pause_duration_seconds = nil
}

// TotalPauseDurationSeconds returns the value of the "total_pause_duration_seconds" field in the mutation.
func (m *WorkoutLogMutation) TotalPauseDurationSeconds() (r uint, exists bool) {
	v := m.total_pause_duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalPauseDurationSeconds returns the old "total_pause_duration_seconds" field's value of the WorkoutLog entity.
// If the WorkoutLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkoutLogMutation) OldTotalPauseDurationSeconds(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalPauseDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalPauseDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalPauseDurationSeconds: %w", err)
	}
	return oldValue.TotalPauseDurationSeconds, nil
}

// AddTotalPauseDurationSeconds adds u to the "total_pause_duration_seconds" field.
func (m *WorkoutLogMutation) AddTotalPauseDurationSeconds(u int) {
	if m.addtotal_pause_duration_seconds != nil {
		*m.addtotal_pause_duration_seconds += u
	} else {
		m.addtotal_pause_duration_seconds = &u
	}
}

// AddedTotalPauseDurationSeconds returns the value that was added to the "total_pause_duration_seconds" field in this mutation.
func (m *WorkoutLogMutation) AddedTotalPauseDurationSeconds() (r int, exists bool) {
	v := m.addtotal_pause_duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalPauseDurationSeconds resets all changes to the "total_pause_duration_seconds" field.
func (m *WorkoutLogMutation) ResetTotalPauseDurationSeconds() {
	m.total_pause_duration_seconds = nil
	m.addtotal_pause_duration_seconds = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *WorkoutLogMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *WorkoutLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WorkoutLogMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *WorkoutLogMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WorkoutLogMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WorkoutLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetWorkoutID sets the "workout" edge to the Workout entity by id.
func (m *WorkoutLogMutation) SetWorkoutID(id uuid.UUID) {
	m.workout = &id
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (m *WorkoutLogMutation) ClearWorkout() {
	m.clearedworkout = true
}

// WorkoutCleared reports if the "workout" edge to the Workout entity was cleared.
func (m *WorkoutLogMutation) WorkoutCleared() bool {
	return m.clearedworkout
}

// WorkoutID returns the "workout" edge ID in the mutation.
func (m *WorkoutLogMutation) WorkoutID() (id uuid.UUID, exists bool) {
	if m.workout != nil {
		return *m.workout, true
	}
	return
}

// WorkoutIDs returns the "workout" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkoutID instead. It exists only for internal usage by the builders.
func (m *WorkoutLogMutation) WorkoutIDs() (ids []uuid.UUID) {
	if id := m.workout; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkout resets all changes to the "workout" edge.
func (m *WorkoutLogMutation) ResetWorkout() {
	m.workout = nil
	m.clearedworkout = false
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by ids.
func (m *WorkoutLogMutation) AddExerciseSetIDs(ids ...uuid.UUID) {
	if m.exercise_sets == nil {
		m.exercise_sets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.exercise_sets[ids[i]] = struct{}{}
	}
}

// ClearExerciseSets clears the "exercise_sets" edge to the ExerciseSet entity.
func (m *WorkoutLogMutation) ClearExerciseSets() {
	m.clearedexercise_sets = true
}

// ExerciseSetsCleared reports if the "exercise_sets" edge to the ExerciseSet entity was cleared.
func (m *WorkoutLogMutation) ExerciseSetsCleared() bool {
	return m.clearedexercise_sets
}

// RemoveExerciseSetIDs removes the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (m *WorkoutLogMutation) RemoveExerciseSetIDs(ids ...uuid.UUID) {
	if m.removedexercise_sets == nil {
		m.removedexercise_sets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.exercise_sets, ids[i])
		m.removedexercise_sets[ids[i]] = struct{}{}
	}
}

// RemovedExerciseSets returns the removed IDs of the "exercise_sets" edge to the ExerciseSet entity.
func (m *WorkoutLogMutation) RemovedExerciseSetsIDs() (ids []uuid.UUID) {
	for id := range m.removedexercise_sets {
		ids = append(ids, id)
	}
	return
}

// ExerciseSetsIDs returns the "exercise_sets" edge IDs in the mutation.
func (m *WorkoutLogMutation) ExerciseSetsIDs() (ids []uuid.UUID) {
	for id := range m.exercise_sets {
		ids = append(ids, id)
	}
	return
}

// ResetExerciseSets resets all changes to the "exercise_sets" edge.
func (m *WorkoutLogMutation) ResetExerciseSets() {
	m.exercise_sets = nil
	m.clearedexercise_sets = false
	m.removedexercise_sets = nil
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by ids.
func (m *WorkoutLogMutation) AddExerciseInstanceIDs(ids ...uuid.UUID) {
	if m.exercise_instances == nil {
		m.exercise_instances = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.exercise_instances[ids[i]] = struct{}{}
	}
}

// ClearExerciseInstances clears the "exercise_instances" edge to the ExerciseInstance entity.
func (m *WorkoutLogMutation) ClearExerciseInstances() {
	m.clearedexercise_instances = true
}

// ExerciseInstancesCleared reports if the "exercise_instances" edge to the ExerciseInstance entity was cleared.
func (m *WorkoutLogMutation) ExerciseInstancesCleared() bool {
	return m.clearedexercise_instances
}

// RemoveExerciseInstanceIDs removes the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (m *WorkoutLogMutation) RemoveExerciseInstanceIDs(ids ...uuid.UUID) {
	if m.removedexercise_instances == nil {
		m.removedexercise_instances = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.exercise_instances, ids[i])
		m.removedexercise_instances[ids[i]] = struct{}{}
	}
}

// RemovedExerciseInstances returns the removed IDs of the "exercise_instances" edge to the ExerciseInstance entity.
func (m *WorkoutLogMutation) RemovedExerciseInstancesIDs() (ids []uuid.UUID) {
	for id := range m.removedexercise_instances {
		ids = append(ids, id)
	}
	return
}

// ExerciseInstancesIDs returns the "exercise_instances" edge IDs in the mutation.
func (m *WorkoutLogMutation) ExerciseInstancesIDs() (ids []uuid.UUID) {
	for id := range m.exercise_instances {
		ids = append(ids, id)
	}
	return
}

// ResetExerciseInstances resets all changes to the "exercise_instances" edge.
func (m *WorkoutLogMutation) ResetExerciseInstances() {
	m.exercise_instances = nil
	m.clearedexercise_instances = false
	m.removedexercise_instances = nil
}

// Where appends a list predicates to the WorkoutLogMutation builder.
func (m *WorkoutLogMutation) Where(ps ...predicate.WorkoutLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkoutLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkoutLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkoutLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkoutLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkoutLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkoutLog).
func (m *WorkoutLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkoutLogMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, workoutlog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workoutlog.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, workoutlog.FieldDeletedAt)
	}
	if m.started_at != nil {
		fields = append(fields, workoutlog.FieldStartedAt)
	}
	if m.finished_at != nil {
		fields = append(fields, workoutlog.FieldFinishedAt)
	}
	if m.status != nil {
		fields = append(fields, workoutlog.FieldStatus)
	}
	if m.total_active_duration_seconds != nil {
		fields = append(fields, workoutlog.FieldTotalActiveDurationSeconds)
	}
	if m.total_pause_duration_seconds != nil {
		fields = append(fields, workoutlog.FieldTotalPauseDurationSeconds)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkoutLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workoutlog.FieldCreatedAt:
		return m.CreatedAt()
	case workoutlog.FieldUpdatedAt:
		return m.UpdatedAt()
	case workoutlog.FieldDeletedAt:
		return m.DeletedAt()
	case workoutlog.FieldStartedAt:
		return m.StartedAt()
	case workoutlog.FieldFinishedAt:
		return m.FinishedAt()
	case workoutlog.FieldStatus:
		return m.Status()
	case workoutlog.FieldTotalActiveDurationSeconds:
		return m.TotalActiveDurationSeconds()
	case workoutlog.FieldTotalPauseDurationSeconds:
		return m.TotalPauseDurationSeconds()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkoutLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workoutlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workoutlog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workoutlog.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case workoutlog.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case workoutlog.FieldFinishedAt:
		return m.OldFinishedAt(ctx)
	case workoutlog.FieldStatus:
		return m.OldStatus(ctx)
	case workoutlog.FieldTotalActiveDurationSeconds:
		return m.OldTotalActiveDurationSeconds(ctx)
	case workoutlog.FieldTotalPauseDurationSeconds:
		return m.OldTotalPauseDurationSeconds(ctx)
	}
	return nil, fmt.Errorf("unknown WorkoutLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkoutLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workoutlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workoutlog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workoutlog.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case workoutlog.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case workoutlog.FieldFinishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishedAt(v)
		return nil
	case workoutlog.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case workoutlog.FieldTotalActiveDurationSeconds:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalActiveDurationSeconds(v)
		return nil
	case workoutlog.FieldTotalPauseDurationSeconds:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalPauseDurationSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown WorkoutLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkoutLogMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, workoutlog.FieldStatus)
	}
	if m.addtotal_active_duration_seconds != nil {
		fields = append(fields, workoutlog.FieldTotalActiveDurationSeconds)
	}
	if m.addtotal_pause_duration_seconds != nil {
		fields = append(fields, workoutlog.FieldTotalPauseDurationSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkoutLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case workoutlog.FieldStatus:
		return m.AddedStatus()
	case workoutlog.FieldTotalActiveDurationSeconds:
		return m.AddedTotalActiveDurationSeconds()
	case workoutlog.FieldTotalPauseDurationSeconds:
		return m.AddedTotalPauseDurationSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkoutLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case workoutlog.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case workoutlog.FieldTotalActiveDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalActiveDurationSeconds(v)
		return nil
	case workoutlog.FieldTotalPauseDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalPauseDurationSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown WorkoutLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkoutLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(workoutlog.FieldDeletedAt) {
		fields = append(fields, workoutlog.FieldDeletedAt)
	}
	if m.FieldCleared(workoutlog.FieldStartedAt) {
		fields = append(fields, workoutlog.FieldStartedAt)
	}
	if m.FieldCleared(workoutlog.FieldFinishedAt) {
		fields = append(fields, workoutlog.FieldFinishedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkoutLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkoutLogMutation) ClearField(name string) error {
	switch name {
	case workoutlog.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case workoutlog.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	case workoutlog.FieldFinishedAt:
		m.ClearFinishedAt()
		return nil
	}
	return fmt.Errorf("unknown WorkoutLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkoutLogMutation) ResetField(name string) error {
	switch name {
	case workoutlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workoutlog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workoutlog.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case workoutlog.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case workoutlog.FieldFinishedAt:
		m.ResetFinishedAt()
		return nil
	case workoutlog.FieldStatus:
		m.ResetStatus()
		return nil
	case workoutlog.FieldTotalActiveDurationSeconds:
		m.ResetTotalActiveDurationSeconds()
		return nil
	case workoutlog.FieldTotalPauseDurationSeconds:
		m.ResetTotalPauseDurationSeconds()
		return nil
	}
	return fmt.Errorf("unknown WorkoutLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkoutLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.user != nil {
		edges = append(edges, workoutlog.EdgeUser)
	}
	if m.workout != nil {
		edges = append(edges, workoutlog.EdgeWorkout)
	}
	if m.exercise_sets != nil {
		edges = append(edges, workoutlog.EdgeExerciseSets)
	}
	if m.exercise_instances != nil {
		edges = append(edges, workoutlog.EdgeExerciseInstances)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkoutLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workoutlog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case workoutlog.EdgeWorkout:
		if id := m.workout; id != nil {
			return []ent.Value{*id}
		}
	case workoutlog.EdgeExerciseSets:
		ids := make([]ent.Value, 0, len(m.exercise_sets))
		for id := range m.exercise_sets {
			ids = append(ids, id)
		}
		return ids
	case workoutlog.EdgeExerciseInstances:
		ids := make([]ent.Value, 0, len(m.exercise_instances))
		for id := range m.exercise_instances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkoutLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedexercise_sets != nil {
		edges = append(edges, workoutlog.EdgeExerciseSets)
	}
	if m.removedexercise_instances != nil {
		edges = append(edges, workoutlog.EdgeExerciseInstances)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkoutLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workoutlog.EdgeExerciseSets:
		ids := make([]ent.Value, 0, len(m.removedexercise_sets))
		for id := range m.removedexercise_sets {
			ids = append(ids, id)
		}
		return ids
	case workoutlog.EdgeExerciseInstances:
		ids := make([]ent.Value, 0, len(m.removedexercise_instances))
		for id := range m.removedexercise_instances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkoutLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareduser {
		edges = append(edges, workoutlog.EdgeUser)
	}
	if m.clearedworkout {
		edges = append(edges, workoutlog.EdgeWorkout)
	}
	if m.clearedexercise_sets {
		edges = append(edges, workoutlog.EdgeExerciseSets)
	}
	if m.clearedexercise_instances {
		edges = append(edges, workoutlog.EdgeExerciseInstances)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkoutLogMutation) EdgeCleared(name string) bool {
	switch name {
	case workoutlog.EdgeUser:
		return m.cleareduser
	case workoutlog.EdgeWorkout:
		return m.clearedworkout
	case workoutlog.EdgeExerciseSets:
		return m.clearedexercise_sets
	case workoutlog.EdgeExerciseInstances:
		return m.clearedexercise_instances
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkoutLogMutation) ClearEdge(name string) error {
	switch name {
	case workoutlog.EdgeUser:
		m.ClearUser()
		return nil
	case workoutlog.EdgeWorkout:
		m.ClearWorkout()
		return nil
	}
	return fmt.Errorf("unknown WorkoutLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkoutLogMutation) ResetEdge(name string) error {
	switch name {
	case workoutlog.EdgeUser:
		m.ResetUser()
		return nil
	case workoutlog.EdgeWorkout:
		m.ResetWorkout()
		return nil
	case workoutlog.EdgeExerciseSets:
		m.ResetExerciseSets()
		return nil
	case workoutlog.EdgeExerciseInstances:
		m.ResetExerciseInstances()
		return nil
	}
	return fmt.Errorf("unknown WorkoutLog edge %s", name)
}
