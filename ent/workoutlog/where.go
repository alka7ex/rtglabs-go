// Code generated by ent, DO NOT EDIT.

package workoutlog

import (
	"rtglabs-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldDeletedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldFinishedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldStatus, v))
}

// TotalActiveDurationSeconds applies equality check predicate on the "total_active_duration_seconds" field. It's identical to TotalActiveDurationSecondsEQ.
func TotalActiveDurationSeconds(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldTotalActiveDurationSeconds, v))
}

// TotalPauseDurationSeconds applies equality check predicate on the "total_pause_duration_seconds" field. It's identical to TotalPauseDurationSecondsEQ.
func TotalPauseDurationSeconds(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldTotalPauseDurationSeconds, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotNull(FieldDeletedAt))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotNull(FieldFinishedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldStatus, v))
}

// TotalActiveDurationSecondsEQ applies the EQ predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsEQ(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldTotalActiveDurationSeconds, v))
}

// TotalActiveDurationSecondsNEQ applies the NEQ predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsNEQ(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldTotalActiveDurationSeconds, v))
}

// TotalActiveDurationSecondsIn applies the In predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsIn(vs ...uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldTotalActiveDurationSeconds, vs...))
}

// TotalActiveDurationSecondsNotIn applies the NotIn predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsNotIn(vs ...uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldTotalActiveDurationSeconds, vs...))
}

// TotalActiveDurationSecondsGT applies the GT predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsGT(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldTotalActiveDurationSeconds, v))
}

// TotalActiveDurationSecondsGTE applies the GTE predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsGTE(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldTotalActiveDurationSeconds, v))
}

// TotalActiveDurationSecondsLT applies the LT predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsLT(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldTotalActiveDurationSeconds, v))
}

// TotalActiveDurationSecondsLTE applies the LTE predicate on the "total_active_duration_seconds" field.
func TotalActiveDurationSecondsLTE(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldTotalActiveDurationSeconds, v))
}

// TotalPauseDurationSecondsEQ applies the EQ predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsEQ(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldEQ(FieldTotalPauseDurationSeconds, v))
}

// TotalPauseDurationSecondsNEQ applies the NEQ predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsNEQ(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNEQ(FieldTotalPauseDurationSeconds, v))
}

// TotalPauseDurationSecondsIn applies the In predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsIn(vs ...uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldIn(FieldTotalPauseDurationSeconds, vs...))
}

// TotalPauseDurationSecondsNotIn applies the NotIn predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsNotIn(vs ...uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldNotIn(FieldTotalPauseDurationSeconds, vs...))
}

// TotalPauseDurationSecondsGT applies the GT predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsGT(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGT(FieldTotalPauseDurationSeconds, v))
}

// TotalPauseDurationSecondsGTE applies the GTE predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsGTE(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldGTE(FieldTotalPauseDurationSeconds, v))
}

// TotalPauseDurationSecondsLT applies the LT predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsLT(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLT(FieldTotalPauseDurationSeconds, v))
}

// TotalPauseDurationSecondsLTE applies the LTE predicate on the "total_pause_duration_seconds" field.
func TotalPauseDurationSecondsLTE(v uint) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.FieldLTE(FieldTotalPauseDurationSeconds, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkout applies the HasEdge predicate on the "workout" edge.
func HasWorkout() predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkoutTable, WorkoutColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutWith applies the HasEdge predicate on the "workout" edge with a given conditions (other predicates).
func HasWorkoutWith(preds ...predicate.Workout) predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := newWorkoutStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExerciseSets applies the HasEdge predicate on the "exercise_sets" edge.
func HasExerciseSets() predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExerciseSetsTable, ExerciseSetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExerciseSetsWith applies the HasEdge predicate on the "exercise_sets" edge with a given conditions (other predicates).
func HasExerciseSetsWith(preds ...predicate.ExerciseSet) predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := newExerciseSetsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExerciseInstances applies the HasEdge predicate on the "exercise_instances" edge.
func HasExerciseInstances() predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExerciseInstancesTable, ExerciseInstancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExerciseInstancesWith applies the HasEdge predicate on the "exercise_instances" edge with a given conditions (other predicates).
func HasExerciseInstancesWith(preds ...predicate.ExerciseInstance) predicate.WorkoutLog {
	return predicate.WorkoutLog(func(s *sql.Selector) {
		step := newExerciseInstancesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkoutLog) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkoutLog) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkoutLog) predicate.WorkoutLog {
	return predicate.WorkoutLog(sql.NotPredicates(p))
}
