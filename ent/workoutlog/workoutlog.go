// Code generated by ent, DO NOT EDIT.

package workoutlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workoutlog type in the database.
	Label = "workout_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTotalActiveDurationSeconds holds the string denoting the total_active_duration_seconds field in the database.
	FieldTotalActiveDurationSeconds = "total_active_duration_seconds"
	// FieldTotalPauseDurationSeconds holds the string denoting the total_pause_duration_seconds field in the database.
	FieldTotalPauseDurationSeconds = "total_pause_duration_seconds"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeWorkout holds the string denoting the workout edge name in mutations.
	EdgeWorkout = "workout"
	// EdgeExerciseSets holds the string denoting the exercise_sets edge name in mutations.
	EdgeExerciseSets = "exercise_sets"
	// EdgeExerciseInstances holds the string denoting the exercise_instances edge name in mutations.
	EdgeExerciseInstances = "exercise_instances"
	// Table holds the table name of the workoutlog in the database.
	Table = "workout_logs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "workout_logs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_workout_logs"
	// WorkoutTable is the table that holds the workout relation/edge.
	WorkoutTable = "workout_logs"
	// WorkoutInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutInverseTable = "workouts"
	// WorkoutColumn is the table column denoting the workout relation/edge.
	WorkoutColumn = "workout_workout_logs"
	// ExerciseSetsTable is the table that holds the exercise_sets relation/edge.
	ExerciseSetsTable = "exercise_sets"
	// ExerciseSetsInverseTable is the table name for the ExerciseSet entity.
	// It exists in this package in order to avoid circular dependency with the "exerciseset" package.
	ExerciseSetsInverseTable = "exercise_sets"
	// ExerciseSetsColumn is the table column denoting the exercise_sets relation/edge.
	ExerciseSetsColumn = "workout_log_exercise_sets"
	// ExerciseInstancesTable is the table that holds the exercise_instances relation/edge.
	ExerciseInstancesTable = "exercise_instances"
	// ExerciseInstancesInverseTable is the table name for the ExerciseInstance entity.
	// It exists in this package in order to avoid circular dependency with the "exerciseinstance" package.
	ExerciseInstancesInverseTable = "exercise_instances"
	// ExerciseInstancesColumn is the table column denoting the exercise_instances relation/edge.
	ExerciseInstancesColumn = "workout_log_exercise_instances"
)

// Columns holds all SQL columns for workoutlog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldStartedAt,
	FieldFinishedAt,
	FieldStatus,
	FieldTotalActiveDurationSeconds,
	FieldTotalPauseDurationSeconds,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workout_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_workout_logs",
	"workout_workout_logs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultTotalActiveDurationSeconds holds the default value on creation for the "total_active_duration_seconds" field.
	DefaultTotalActiveDurationSeconds uint
	// DefaultTotalPauseDurationSeconds holds the default value on creation for the "total_pause_duration_seconds" field.
	DefaultTotalPauseDurationSeconds uint
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkoutLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTotalActiveDurationSeconds orders the results by the total_active_duration_seconds field.
func ByTotalActiveDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalActiveDurationSeconds, opts...).ToFunc()
}

// ByTotalPauseDurationSeconds orders the results by the total_pause_duration_seconds field.
func ByTotalPauseDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalPauseDurationSeconds, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkoutField orders the results by workout field.
func ByWorkoutField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutStep(), sql.OrderByField(field, opts...))
	}
}

// ByExerciseSetsCount orders the results by exercise_sets count.
func ByExerciseSetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExerciseSetsStep(), opts...)
	}
}

// ByExerciseSets orders the results by exercise_sets terms.
func ByExerciseSets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExerciseSetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExerciseInstancesCount orders the results by exercise_instances count.
func ByExerciseInstancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExerciseInstancesStep(), opts...)
	}
}

// ByExerciseInstances orders the results by exercise_instances terms.
func ByExerciseInstances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExerciseInstancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newWorkoutStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkoutTable, WorkoutColumn),
	)
}
func newExerciseSetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExerciseSetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExerciseSetsTable, ExerciseSetsColumn),
	)
}
func newExerciseInstancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExerciseInstancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExerciseInstancesTable, ExerciseInstancesColumn),
	)
}
