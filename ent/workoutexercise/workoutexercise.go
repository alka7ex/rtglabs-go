// Code generated by ent, DO NOT EDIT.

package workoutexercise

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workoutexercise type in the database.
	Label = "workout_exercise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// FieldSets holds the string denoting the sets field in the database.
	FieldSets = "sets"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldReps holds the string denoting the reps field in the database.
	FieldReps = "reps"
	// EdgeWorkout holds the string denoting the workout edge name in mutations.
	EdgeWorkout = "workout"
	// EdgeExercise holds the string denoting the exercise edge name in mutations.
	EdgeExercise = "exercise"
	// EdgeExerciseInstance holds the string denoting the exercise_instance edge name in mutations.
	EdgeExerciseInstance = "exercise_instance"
	// Table holds the table name of the workoutexercise in the database.
	Table = "workout_exercises"
	// WorkoutTable is the table that holds the workout relation/edge.
	WorkoutTable = "workout_exercises"
	// WorkoutInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutInverseTable = "workouts"
	// WorkoutColumn is the table column denoting the workout relation/edge.
	WorkoutColumn = "workout_workout_exercises"
	// ExerciseTable is the table that holds the exercise relation/edge.
	ExerciseTable = "workout_exercises"
	// ExerciseInverseTable is the table name for the Exercise entity.
	// It exists in this package in order to avoid circular dependency with the "exercise" package.
	ExerciseInverseTable = "exercises"
	// ExerciseColumn is the table column denoting the exercise relation/edge.
	ExerciseColumn = "exercise_workout_exercises"
	// ExerciseInstanceTable is the table that holds the exercise_instance relation/edge.
	ExerciseInstanceTable = "workout_exercises"
	// ExerciseInstanceInverseTable is the table name for the ExerciseInstance entity.
	// It exists in this package in order to avoid circular dependency with the "exerciseinstance" package.
	ExerciseInstanceInverseTable = "exercise_instances"
	// ExerciseInstanceColumn is the table column denoting the exercise_instance relation/edge.
	ExerciseInstanceColumn = "exercise_instance_workout_exercises"
)

// Columns holds all SQL columns for workoutexercise fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldOrder,
	FieldSets,
	FieldWeight,
	FieldReps,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workout_exercises"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"exercise_workout_exercises",
	"exercise_instance_workout_exercises",
	"workout_workout_exercises",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkoutExercise queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// BySets orders the results by the sets field.
func BySets(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSets, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByReps orders the results by the reps field.
func ByReps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReps, opts...).ToFunc()
}

// ByWorkoutField orders the results by workout field.
func ByWorkoutField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutStep(), sql.OrderByField(field, opts...))
	}
}

// ByExerciseField orders the results by exercise field.
func ByExerciseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExerciseStep(), sql.OrderByField(field, opts...))
	}
}

// ByExerciseInstanceField orders the results by exercise_instance field.
func ByExerciseInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExerciseInstanceStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkoutStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkoutTable, WorkoutColumn),
	)
}
func newExerciseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExerciseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExerciseTable, ExerciseColumn),
	)
}
func newExerciseInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExerciseInstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExerciseInstanceTable, ExerciseInstanceColumn),
	)
}
