// Code generated by ent, DO NOT EDIT.

package workoutexercise

import (
	"rtglabs-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldUpdateTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldDeletedAt, v))
}

// WorkoutID applies equality check predicate on the "workout_id" field. It's identical to WorkoutIDEQ.
func WorkoutID(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldWorkoutID, v))
}

// ExerciseID applies equality check predicate on the "exercise_id" field. It's identical to ExerciseIDEQ.
func ExerciseID(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldExerciseID, v))
}

// ExerciseInstanceID applies equality check predicate on the "exercise_instance_id" field. It's identical to ExerciseInstanceIDEQ.
func ExerciseInstanceID(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldExerciseInstanceID, v))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldOrder, v))
}

// Sets applies equality check predicate on the "sets" field. It's identical to SetsEQ.
func Sets(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldSets, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldWeight, v))
}

// Reps applies equality check predicate on the "reps" field. It's identical to RepsEQ.
func Reps(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldReps, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldUpdateTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotNull(FieldDeletedAt))
}

// WorkoutIDEQ applies the EQ predicate on the "workout_id" field.
func WorkoutIDEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldWorkoutID, v))
}

// WorkoutIDNEQ applies the NEQ predicate on the "workout_id" field.
func WorkoutIDNEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldWorkoutID, v))
}

// WorkoutIDIn applies the In predicate on the "workout_id" field.
func WorkoutIDIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldWorkoutID, vs...))
}

// WorkoutIDNotIn applies the NotIn predicate on the "workout_id" field.
func WorkoutIDNotIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldWorkoutID, vs...))
}

// WorkoutIDGT applies the GT predicate on the "workout_id" field.
func WorkoutIDGT(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldWorkoutID, v))
}

// WorkoutIDGTE applies the GTE predicate on the "workout_id" field.
func WorkoutIDGTE(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldWorkoutID, v))
}

// WorkoutIDLT applies the LT predicate on the "workout_id" field.
func WorkoutIDLT(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldWorkoutID, v))
}

// WorkoutIDLTE applies the LTE predicate on the "workout_id" field.
func WorkoutIDLTE(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldWorkoutID, v))
}

// ExerciseIDEQ applies the EQ predicate on the "exercise_id" field.
func ExerciseIDEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldExerciseID, v))
}

// ExerciseIDNEQ applies the NEQ predicate on the "exercise_id" field.
func ExerciseIDNEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldExerciseID, v))
}

// ExerciseIDIn applies the In predicate on the "exercise_id" field.
func ExerciseIDIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldExerciseID, vs...))
}

// ExerciseIDNotIn applies the NotIn predicate on the "exercise_id" field.
func ExerciseIDNotIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldExerciseID, vs...))
}

// ExerciseIDGT applies the GT predicate on the "exercise_id" field.
func ExerciseIDGT(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldExerciseID, v))
}

// ExerciseIDGTE applies the GTE predicate on the "exercise_id" field.
func ExerciseIDGTE(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldExerciseID, v))
}

// ExerciseIDLT applies the LT predicate on the "exercise_id" field.
func ExerciseIDLT(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldExerciseID, v))
}

// ExerciseIDLTE applies the LTE predicate on the "exercise_id" field.
func ExerciseIDLTE(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldExerciseID, v))
}

// ExerciseInstanceIDEQ applies the EQ predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldExerciseInstanceID, v))
}

// ExerciseInstanceIDNEQ applies the NEQ predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDNEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldExerciseInstanceID, v))
}

// ExerciseInstanceIDIn applies the In predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldExerciseInstanceID, vs...))
}

// ExerciseInstanceIDNotIn applies the NotIn predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDNotIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldExerciseInstanceID, vs...))
}

// ExerciseInstanceIDGT applies the GT predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDGT(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldExerciseInstanceID, v))
}

// ExerciseInstanceIDGTE applies the GTE predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDGTE(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldExerciseInstanceID, v))
}

// ExerciseInstanceIDLT applies the LT predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDLT(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldExerciseInstanceID, v))
}

// ExerciseInstanceIDLTE applies the LTE predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDLTE(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldExerciseInstanceID, v))
}

// ExerciseInstanceIDIsNil applies the IsNil predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDIsNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIsNull(FieldExerciseInstanceID))
}

// ExerciseInstanceIDNotNil applies the NotNil predicate on the "exercise_instance_id" field.
func ExerciseInstanceIDNotNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotNull(FieldExerciseInstanceID))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldOrder, v))
}

// OrderIsNil applies the IsNil predicate on the "order" field.
func OrderIsNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIsNull(FieldOrder))
}

// OrderNotNil applies the NotNil predicate on the "order" field.
func OrderNotNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotNull(FieldOrder))
}

// SetsEQ applies the EQ predicate on the "sets" field.
func SetsEQ(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldSets, v))
}

// SetsNEQ applies the NEQ predicate on the "sets" field.
func SetsNEQ(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldSets, v))
}

// SetsIn applies the In predicate on the "sets" field.
func SetsIn(vs ...uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldSets, vs...))
}

// SetsNotIn applies the NotIn predicate on the "sets" field.
func SetsNotIn(vs ...uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldSets, vs...))
}

// SetsGT applies the GT predicate on the "sets" field.
func SetsGT(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldSets, v))
}

// SetsGTE applies the GTE predicate on the "sets" field.
func SetsGTE(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldSets, v))
}

// SetsLT applies the LT predicate on the "sets" field.
func SetsLT(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldSets, v))
}

// SetsLTE applies the LTE predicate on the "sets" field.
func SetsLTE(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldSets, v))
}

// SetsIsNil applies the IsNil predicate on the "sets" field.
func SetsIsNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIsNull(FieldSets))
}

// SetsNotNil applies the NotNil predicate on the "sets" field.
func SetsNotNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotNull(FieldSets))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotNull(FieldWeight))
}

// RepsEQ applies the EQ predicate on the "reps" field.
func RepsEQ(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldReps, v))
}

// RepsNEQ applies the NEQ predicate on the "reps" field.
func RepsNEQ(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldReps, v))
}

// RepsIn applies the In predicate on the "reps" field.
func RepsIn(vs ...uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldReps, vs...))
}

// RepsNotIn applies the NotIn predicate on the "reps" field.
func RepsNotIn(vs ...uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldReps, vs...))
}

// RepsGT applies the GT predicate on the "reps" field.
func RepsGT(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldReps, v))
}

// RepsGTE applies the GTE predicate on the "reps" field.
func RepsGTE(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldReps, v))
}

// RepsLT applies the LT predicate on the "reps" field.
func RepsLT(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldReps, v))
}

// RepsLTE applies the LTE predicate on the "reps" field.
func RepsLTE(v uint) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldReps, v))
}

// RepsIsNil applies the IsNil predicate on the "reps" field.
func RepsIsNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIsNull(FieldReps))
}

// RepsNotNil applies the NotNil predicate on the "reps" field.
func RepsNotNil() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotNull(FieldReps))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkoutExercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkoutExercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkoutExercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.NotPredicates(p))
}
