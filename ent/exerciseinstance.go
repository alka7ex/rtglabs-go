// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ExerciseInstance is the model entity for the ExerciseInstance schema.
type ExerciseInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExerciseInstanceQuery when eager-loading is set.
	Edges                       ExerciseInstanceEdges `json:"edges"`
	exercise_exercise_instances *uuid.UUID
	selectValues                sql.SelectValues
}

// ExerciseInstanceEdges holds the relations/edges for other nodes in the graph.
type ExerciseInstanceEdges struct {
	// Exercise holds the value of the exercise edge.
	Exercise *Exercise `json:"exercise,omitempty"`
	// WorkoutExercises holds the value of the workout_exercises edge.
	WorkoutExercises []*WorkoutExercise `json:"workout_exercises,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExerciseOrErr returns the Exercise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExerciseInstanceEdges) ExerciseOrErr() (*Exercise, error) {
	if e.Exercise != nil {
		return e.Exercise, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: exercise.Label}
	}
	return nil, &NotLoadedError{edge: "exercise"}
}

// WorkoutExercisesOrErr returns the WorkoutExercises value or an error if the edge
// was not loaded in eager-loading.
func (e ExerciseInstanceEdges) WorkoutExercisesOrErr() ([]*WorkoutExercise, error) {
	if e.loadedTypes[1] {
		return e.WorkoutExercises, nil
	}
	return nil, &NotLoadedError{edge: "workout_exercises"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExerciseInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exerciseinstance.FieldCreatedAt, exerciseinstance.FieldUpdatedAt, exerciseinstance.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case exerciseinstance.FieldID:
			values[i] = new(uuid.UUID)
		case exerciseinstance.ForeignKeys[0]: // exercise_exercise_instances
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExerciseInstance fields.
func (ei *ExerciseInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exerciseinstance.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ei.ID = *value
			}
		case exerciseinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ei.CreatedAt = value.Time
			}
		case exerciseinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ei.UpdatedAt = value.Time
			}
		case exerciseinstance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ei.DeletedAt = new(time.Time)
				*ei.DeletedAt = value.Time
			}
		case exerciseinstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_exercise_instances", values[i])
			} else if value.Valid {
				ei.exercise_exercise_instances = new(uuid.UUID)
				*ei.exercise_exercise_instances = *value.S.(*uuid.UUID)
			}
		default:
			ei.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExerciseInstance.
// This includes values selected through modifiers, order, etc.
func (ei *ExerciseInstance) Value(name string) (ent.Value, error) {
	return ei.selectValues.Get(name)
}

// QueryExercise queries the "exercise" edge of the ExerciseInstance entity.
func (ei *ExerciseInstance) QueryExercise() *ExerciseQuery {
	return NewExerciseInstanceClient(ei.config).QueryExercise(ei)
}

// QueryWorkoutExercises queries the "workout_exercises" edge of the ExerciseInstance entity.
func (ei *ExerciseInstance) QueryWorkoutExercises() *WorkoutExerciseQuery {
	return NewExerciseInstanceClient(ei.config).QueryWorkoutExercises(ei)
}

// Update returns a builder for updating this ExerciseInstance.
// Note that you need to call ExerciseInstance.Unwrap() before calling this method if this ExerciseInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *ExerciseInstance) Update() *ExerciseInstanceUpdateOne {
	return NewExerciseInstanceClient(ei.config).UpdateOne(ei)
}

// Unwrap unwraps the ExerciseInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *ExerciseInstance) Unwrap() *ExerciseInstance {
	_tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExerciseInstance is not a transactional entity")
	}
	ei.config.driver = _tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *ExerciseInstance) String() string {
	var builder strings.Builder
	builder.WriteString("ExerciseInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ei.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ei.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ei.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ei.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ExerciseInstances is a parsable slice of ExerciseInstance.
type ExerciseInstances []*ExerciseInstance
