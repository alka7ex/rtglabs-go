// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutexercise"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutExerciseCreate is the builder for creating a WorkoutExercise entity.
type WorkoutExerciseCreate struct {
	config
	mutation *WorkoutExerciseMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (wec *WorkoutExerciseCreate) SetCreateTime(t time.Time) *WorkoutExerciseCreate {
	wec.mutation.SetCreateTime(t)
	return wec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableCreateTime(t *time.Time) *WorkoutExerciseCreate {
	if t != nil {
		wec.SetCreateTime(*t)
	}
	return wec
}

// SetUpdateTime sets the "update_time" field.
func (wec *WorkoutExerciseCreate) SetUpdateTime(t time.Time) *WorkoutExerciseCreate {
	wec.mutation.SetUpdateTime(t)
	return wec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableUpdateTime(t *time.Time) *WorkoutExerciseCreate {
	if t != nil {
		wec.SetUpdateTime(*t)
	}
	return wec
}

// SetCreatedAt sets the "created_at" field.
func (wec *WorkoutExerciseCreate) SetCreatedAt(t time.Time) *WorkoutExerciseCreate {
	wec.mutation.SetCreatedAt(t)
	return wec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableCreatedAt(t *time.Time) *WorkoutExerciseCreate {
	if t != nil {
		wec.SetCreatedAt(*t)
	}
	return wec
}

// SetUpdatedAt sets the "updated_at" field.
func (wec *WorkoutExerciseCreate) SetUpdatedAt(t time.Time) *WorkoutExerciseCreate {
	wec.mutation.SetUpdatedAt(t)
	return wec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableUpdatedAt(t *time.Time) *WorkoutExerciseCreate {
	if t != nil {
		wec.SetUpdatedAt(*t)
	}
	return wec
}

// SetDeletedAt sets the "deleted_at" field.
func (wec *WorkoutExerciseCreate) SetDeletedAt(t time.Time) *WorkoutExerciseCreate {
	wec.mutation.SetDeletedAt(t)
	return wec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableDeletedAt(t *time.Time) *WorkoutExerciseCreate {
	if t != nil {
		wec.SetDeletedAt(*t)
	}
	return wec
}

// SetWorkoutID sets the "workout_id" field.
func (wec *WorkoutExerciseCreate) SetWorkoutID(u uuid.UUID) *WorkoutExerciseCreate {
	wec.mutation.SetWorkoutID(u)
	return wec
}

// SetExerciseID sets the "exercise_id" field.
func (wec *WorkoutExerciseCreate) SetExerciseID(u uuid.UUID) *WorkoutExerciseCreate {
	wec.mutation.SetExerciseID(u)
	return wec
}

// SetExerciseInstanceID sets the "exercise_instance_id" field.
func (wec *WorkoutExerciseCreate) SetExerciseInstanceID(u uuid.UUID) *WorkoutExerciseCreate {
	wec.mutation.SetExerciseInstanceID(u)
	return wec
}

// SetNillableExerciseInstanceID sets the "exercise_instance_id" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableExerciseInstanceID(u *uuid.UUID) *WorkoutExerciseCreate {
	if u != nil {
		wec.SetExerciseInstanceID(*u)
	}
	return wec
}

// SetOrder sets the "order" field.
func (wec *WorkoutExerciseCreate) SetOrder(u uint) *WorkoutExerciseCreate {
	wec.mutation.SetOrder(u)
	return wec
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableOrder(u *uint) *WorkoutExerciseCreate {
	if u != nil {
		wec.SetOrder(*u)
	}
	return wec
}

// SetSets sets the "sets" field.
func (wec *WorkoutExerciseCreate) SetSets(u uint) *WorkoutExerciseCreate {
	wec.mutation.SetSets(u)
	return wec
}

// SetNillableSets sets the "sets" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableSets(u *uint) *WorkoutExerciseCreate {
	if u != nil {
		wec.SetSets(*u)
	}
	return wec
}

// SetWeight sets the "weight" field.
func (wec *WorkoutExerciseCreate) SetWeight(f float64) *WorkoutExerciseCreate {
	wec.mutation.SetWeight(f)
	return wec
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableWeight(f *float64) *WorkoutExerciseCreate {
	if f != nil {
		wec.SetWeight(*f)
	}
	return wec
}

// SetReps sets the "reps" field.
func (wec *WorkoutExerciseCreate) SetReps(u uint) *WorkoutExerciseCreate {
	wec.mutation.SetReps(u)
	return wec
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableReps(u *uint) *WorkoutExerciseCreate {
	if u != nil {
		wec.SetReps(*u)
	}
	return wec
}

// SetID sets the "id" field.
func (wec *WorkoutExerciseCreate) SetID(u uuid.UUID) *WorkoutExerciseCreate {
	wec.mutation.SetID(u)
	return wec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wec *WorkoutExerciseCreate) SetNillableID(u *uuid.UUID) *WorkoutExerciseCreate {
	if u != nil {
		wec.SetID(*u)
	}
	return wec
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (wec *WorkoutExerciseCreate) SetWorkout(w *Workout) *WorkoutExerciseCreate {
	return wec.SetWorkoutID(w.ID)
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (wec *WorkoutExerciseCreate) SetExercise(e *Exercise) *WorkoutExerciseCreate {
	return wec.SetExerciseID(e.ID)
}

// SetExerciseInstance sets the "exercise_instance" edge to the ExerciseInstance entity.
func (wec *WorkoutExerciseCreate) SetExerciseInstance(e *ExerciseInstance) *WorkoutExerciseCreate {
	return wec.SetExerciseInstanceID(e.ID)
}

// Mutation returns the WorkoutExerciseMutation object of the builder.
func (wec *WorkoutExerciseCreate) Mutation() *WorkoutExerciseMutation {
	return wec.mutation
}

// Save creates the WorkoutExercise in the database.
func (wec *WorkoutExerciseCreate) Save(ctx context.Context) (*WorkoutExercise, error) {
	wec.defaults()
	return withHooks(ctx, wec.sqlSave, wec.mutation, wec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wec *WorkoutExerciseCreate) SaveX(ctx context.Context) *WorkoutExercise {
	v, err := wec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wec *WorkoutExerciseCreate) Exec(ctx context.Context) error {
	_, err := wec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wec *WorkoutExerciseCreate) ExecX(ctx context.Context) {
	if err := wec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wec *WorkoutExerciseCreate) defaults() {
	if _, ok := wec.mutation.CreateTime(); !ok {
		v := workoutexercise.DefaultCreateTime()
		wec.mutation.SetCreateTime(v)
	}
	if _, ok := wec.mutation.UpdateTime(); !ok {
		v := workoutexercise.DefaultUpdateTime()
		wec.mutation.SetUpdateTime(v)
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		v := workoutexercise.DefaultCreatedAt()
		wec.mutation.SetCreatedAt(v)
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		v := workoutexercise.DefaultUpdatedAt()
		wec.mutation.SetUpdatedAt(v)
	}
	if _, ok := wec.mutation.ID(); !ok {
		v := workoutexercise.DefaultID()
		wec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wec *WorkoutExerciseCreate) check() error {
	if _, ok := wec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "WorkoutExercise.create_time"`)}
	}
	if _, ok := wec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "WorkoutExercise.update_time"`)}
	}
	if _, ok := wec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkoutExercise.created_at"`)}
	}
	if _, ok := wec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkoutExercise.updated_at"`)}
	}
	if _, ok := wec.mutation.WorkoutID(); !ok {
		return &ValidationError{Name: "workout_id", err: errors.New(`ent: missing required field "WorkoutExercise.workout_id"`)}
	}
	if _, ok := wec.mutation.ExerciseID(); !ok {
		return &ValidationError{Name: "exercise_id", err: errors.New(`ent: missing required field "WorkoutExercise.exercise_id"`)}
	}
	if len(wec.mutation.WorkoutIDs()) == 0 {
		return &ValidationError{Name: "workout", err: errors.New(`ent: missing required edge "WorkoutExercise.workout"`)}
	}
	if len(wec.mutation.ExerciseIDs()) == 0 {
		return &ValidationError{Name: "exercise", err: errors.New(`ent: missing required edge "WorkoutExercise.exercise"`)}
	}
	return nil
}

func (wec *WorkoutExerciseCreate) sqlSave(ctx context.Context) (*WorkoutExercise, error) {
	if err := wec.check(); err != nil {
		return nil, err
	}
	_node, _spec := wec.createSpec()
	if err := sqlgraph.CreateNode(ctx, wec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wec.mutation.id = &_node.ID
	wec.mutation.done = true
	return _node, nil
}

func (wec *WorkoutExerciseCreate) createSpec() (*WorkoutExercise, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkoutExercise{config: wec.config}
		_spec = sqlgraph.NewCreateSpec(workoutexercise.Table, sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID))
	)
	if id, ok := wec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wec.mutation.CreateTime(); ok {
		_spec.SetField(workoutexercise.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := wec.mutation.UpdateTime(); ok {
		_spec.SetField(workoutexercise.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := wec.mutation.CreatedAt(); ok {
		_spec.SetField(workoutexercise.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wec.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutexercise.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wec.mutation.DeletedAt(); ok {
		_spec.SetField(workoutexercise.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := wec.mutation.Order(); ok {
		_spec.SetField(workoutexercise.FieldOrder, field.TypeUint, value)
		_node.Order = &value
	}
	if value, ok := wec.mutation.Sets(); ok {
		_spec.SetField(workoutexercise.FieldSets, field.TypeUint, value)
		_node.Sets = &value
	}
	if value, ok := wec.mutation.Weight(); ok {
		_spec.SetField(workoutexercise.FieldWeight, field.TypeFloat64, value)
		_node.Weight = &value
	}
	if value, ok := wec.mutation.Reps(); ok {
		_spec.SetField(workoutexercise.FieldReps, field.TypeUint, value)
		_node.Reps = &value
	}
	if nodes := wec.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.WorkoutTable,
			Columns: []string{workoutexercise.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkoutID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.ExerciseTable,
			Columns: []string{workoutexercise.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExerciseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wec.mutation.ExerciseInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.ExerciseInstanceTable,
			Columns: []string{workoutexercise.ExerciseInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExerciseInstanceID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkoutExerciseCreateBulk is the builder for creating many WorkoutExercise entities in bulk.
type WorkoutExerciseCreateBulk struct {
	config
	err      error
	builders []*WorkoutExerciseCreate
}

// Save creates the WorkoutExercise entities in the database.
func (wecb *WorkoutExerciseCreateBulk) Save(ctx context.Context) ([]*WorkoutExercise, error) {
	if wecb.err != nil {
		return nil, wecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wecb.builders))
	nodes := make([]*WorkoutExercise, len(wecb.builders))
	mutators := make([]Mutator, len(wecb.builders))
	for i := range wecb.builders {
		func(i int, root context.Context) {
			builder := wecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkoutExerciseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wecb *WorkoutExerciseCreateBulk) SaveX(ctx context.Context) []*WorkoutExercise {
	v, err := wecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wecb *WorkoutExerciseCreateBulk) Exec(ctx context.Context) error {
	_, err := wecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wecb *WorkoutExerciseCreateBulk) ExecX(ctx context.Context) {
	if err := wecb.Exec(ctx); err != nil {
		panic(err)
	}
}
