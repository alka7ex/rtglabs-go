// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/profile"
	"rtglabs-go/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProfileUpdate) SetCreatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableCreatedAt(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProfileUpdate) SetUpdatedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProfileUpdate) SetDeletedAt(t time.Time) *ProfileUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableDeletedAt(t *time.Time) *ProfileUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *ProfileUpdate) ClearDeletedAt() *ProfileUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetUnits sets the "units" field.
func (pu *ProfileUpdate) SetUnits(i int) *ProfileUpdate {
	pu.mutation.ResetUnits()
	pu.mutation.SetUnits(i)
	return pu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableUnits(i *int) *ProfileUpdate {
	if i != nil {
		pu.SetUnits(*i)
	}
	return pu
}

// AddUnits adds i to the "units" field.
func (pu *ProfileUpdate) AddUnits(i int) *ProfileUpdate {
	pu.mutation.AddUnits(i)
	return pu
}

// SetAge sets the "age" field.
func (pu *ProfileUpdate) SetAge(i int) *ProfileUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableAge(i *int) *ProfileUpdate {
	if i != nil {
		pu.SetAge(*i)
	}
	return pu
}

// AddAge adds i to the "age" field.
func (pu *ProfileUpdate) AddAge(i int) *ProfileUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetHeight sets the "height" field.
func (pu *ProfileUpdate) SetHeight(f float64) *ProfileUpdate {
	pu.mutation.ResetHeight()
	pu.mutation.SetHeight(f)
	return pu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableHeight(f *float64) *ProfileUpdate {
	if f != nil {
		pu.SetHeight(*f)
	}
	return pu
}

// AddHeight adds f to the "height" field.
func (pu *ProfileUpdate) AddHeight(f float64) *ProfileUpdate {
	pu.mutation.AddHeight(f)
	return pu
}

// SetGender sets the "gender" field.
func (pu *ProfileUpdate) SetGender(i int) *ProfileUpdate {
	pu.mutation.ResetGender()
	pu.mutation.SetGender(i)
	return pu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableGender(i *int) *ProfileUpdate {
	if i != nil {
		pu.SetGender(*i)
	}
	return pu
}

// AddGender adds i to the "gender" field.
func (pu *ProfileUpdate) AddGender(i int) *ProfileUpdate {
	pu.mutation.AddGender(i)
	return pu
}

// SetWeight sets the "weight" field.
func (pu *ProfileUpdate) SetWeight(f float64) *ProfileUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableWeight(f *float64) *ProfileUpdate {
	if f != nil {
		pu.SetWeight(*f)
	}
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *ProfileUpdate) AddWeight(f float64) *ProfileUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ProfileUpdate) SetUserID(u uuid.UUID) *ProfileUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableUserID(u *uuid.UUID) *ProfileUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// ClearUserID clears the value of the "user_id" field.
func (pu *ProfileUpdate) ClearUserID() *ProfileUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProfileUpdate) SetUser(u *User) *ProfileUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProfileUpdate) ClearUser() *ProfileUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(profile.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(profile.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(profile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Units(); ok {
		_spec.SetField(profile.FieldUnits, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUnits(); ok {
		_spec.AddField(profile.FieldUnits, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(profile.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(profile.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Height(); ok {
		_spec.SetField(profile.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedHeight(); ok {
		_spec.AddField(profile.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(profile.FieldGender, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGender(); ok {
		_spec.AddField(profile.FieldGender, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(profile.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.AddField(profile.FieldWeight, field.TypeFloat64, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProfileUpdateOne) SetCreatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableCreatedAt(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProfileUpdateOne) SetUpdatedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProfileUpdateOne) SetDeletedAt(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableDeletedAt(t *time.Time) *ProfileUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *ProfileUpdateOne) ClearDeletedAt() *ProfileUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetUnits sets the "units" field.
func (puo *ProfileUpdateOne) SetUnits(i int) *ProfileUpdateOne {
	puo.mutation.ResetUnits()
	puo.mutation.SetUnits(i)
	return puo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableUnits(i *int) *ProfileUpdateOne {
	if i != nil {
		puo.SetUnits(*i)
	}
	return puo
}

// AddUnits adds i to the "units" field.
func (puo *ProfileUpdateOne) AddUnits(i int) *ProfileUpdateOne {
	puo.mutation.AddUnits(i)
	return puo
}

// SetAge sets the "age" field.
func (puo *ProfileUpdateOne) SetAge(i int) *ProfileUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableAge(i *int) *ProfileUpdateOne {
	if i != nil {
		puo.SetAge(*i)
	}
	return puo
}

// AddAge adds i to the "age" field.
func (puo *ProfileUpdateOne) AddAge(i int) *ProfileUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetHeight sets the "height" field.
func (puo *ProfileUpdateOne) SetHeight(f float64) *ProfileUpdateOne {
	puo.mutation.ResetHeight()
	puo.mutation.SetHeight(f)
	return puo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableHeight(f *float64) *ProfileUpdateOne {
	if f != nil {
		puo.SetHeight(*f)
	}
	return puo
}

// AddHeight adds f to the "height" field.
func (puo *ProfileUpdateOne) AddHeight(f float64) *ProfileUpdateOne {
	puo.mutation.AddHeight(f)
	return puo
}

// SetGender sets the "gender" field.
func (puo *ProfileUpdateOne) SetGender(i int) *ProfileUpdateOne {
	puo.mutation.ResetGender()
	puo.mutation.SetGender(i)
	return puo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableGender(i *int) *ProfileUpdateOne {
	if i != nil {
		puo.SetGender(*i)
	}
	return puo
}

// AddGender adds i to the "gender" field.
func (puo *ProfileUpdateOne) AddGender(i int) *ProfileUpdateOne {
	puo.mutation.AddGender(i)
	return puo
}

// SetWeight sets the "weight" field.
func (puo *ProfileUpdateOne) SetWeight(f float64) *ProfileUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableWeight(f *float64) *ProfileUpdateOne {
	if f != nil {
		puo.SetWeight(*f)
	}
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *ProfileUpdateOne) AddWeight(f float64) *ProfileUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *ProfileUpdateOne) SetUserID(u uuid.UUID) *ProfileUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableUserID(u *uuid.UUID) *ProfileUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// ClearUserID clears the value of the "user_id" field.
func (puo *ProfileUpdateOne) ClearUserID() *ProfileUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProfileUpdateOne) SetUser(u *User) *ProfileUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProfileUpdateOne) ClearUser() *ProfileUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := profile.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(profile.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(profile.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(profile.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Units(); ok {
		_spec.SetField(profile.FieldUnits, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUnits(); ok {
		_spec.AddField(profile.FieldUnits, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(profile.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(profile.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Height(); ok {
		_spec.SetField(profile.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedHeight(); ok {
		_spec.AddField(profile.FieldHeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(profile.FieldGender, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGender(); ok {
		_spec.AddField(profile.FieldGender, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(profile.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.AddField(profile.FieldWeight, field.TypeFloat64, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
