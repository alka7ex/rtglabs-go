// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BodyweightsColumns holds the columns for the "bodyweights" table.
	BodyweightsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "weight", Type: field.TypeFloat64},
		{Name: "unit", Type: field.TypeString},
		{Name: "user_bodyweights", Type: field.TypeUUID},
	}
	// BodyweightsTable holds the schema information for the "bodyweights" table.
	BodyweightsTable = &schema.Table{
		Name:       "bodyweights",
		Columns:    BodyweightsColumns,
		PrimaryKey: []*schema.Column{BodyweightsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bodyweights_users_bodyweights",
				Columns:    []*schema.Column{BodyweightsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ExercisesColumns holds the columns for the "exercises" table.
	ExercisesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// ExercisesTable holds the schema information for the "exercises" table.
	ExercisesTable = &schema.Table{
		Name:       "exercises",
		Columns:    ExercisesColumns,
		PrimaryKey: []*schema.Column{ExercisesColumns[0]},
	}
	// ExerciseInstancesColumns holds the columns for the "exercise_instances" table.
	ExerciseInstancesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "exercise_exercise_instances", Type: field.TypeUUID},
		{Name: "workout_log_exercise_instances", Type: field.TypeUUID, Nullable: true},
	}
	// ExerciseInstancesTable holds the schema information for the "exercise_instances" table.
	ExerciseInstancesTable = &schema.Table{
		Name:       "exercise_instances",
		Columns:    ExerciseInstancesColumns,
		PrimaryKey: []*schema.Column{ExerciseInstancesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "exercise_instances_exercises_exercise_instances",
				Columns:    []*schema.Column{ExerciseInstancesColumns[4]},
				RefColumns: []*schema.Column{ExercisesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "exercise_instances_workout_logs_exercise_instances",
				Columns:    []*schema.Column{ExerciseInstancesColumns[5]},
				RefColumns: []*schema.Column{WorkoutLogsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ExerciseSetsColumns holds the columns for the "exercise_sets" table.
	ExerciseSetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "weight", Type: field.TypeFloat64, Nullable: true, SchemaType: map[string]string{"postgres": "decimal(8,2)"}},
		{Name: "reps", Type: field.TypeInt, Nullable: true},
		{Name: "set_number", Type: field.TypeInt},
		{Name: "finished_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeInt, Default: 0},
		{Name: "exercise_exercise_sets", Type: field.TypeUUID},
		{Name: "exercise_instance_exercise_sets", Type: field.TypeUUID, Nullable: true},
		{Name: "workout_log_exercise_sets", Type: field.TypeUUID},
	}
	// ExerciseSetsTable holds the schema information for the "exercise_sets" table.
	ExerciseSetsTable = &schema.Table{
		Name:       "exercise_sets",
		Columns:    ExerciseSetsColumns,
		PrimaryKey: []*schema.Column{ExerciseSetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "exercise_sets_exercises_exercise_sets",
				Columns:    []*schema.Column{ExerciseSetsColumns[9]},
				RefColumns: []*schema.Column{ExercisesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "exercise_sets_exercise_instances_exercise_sets",
				Columns:    []*schema.Column{ExerciseSetsColumns[10]},
				RefColumns: []*schema.Column{ExerciseInstancesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "exercise_sets_workout_logs_exercise_sets",
				Columns:    []*schema.Column{ExerciseSetsColumns[11]},
				RefColumns: []*schema.Column{WorkoutLogsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "exerciseset_status",
				Unique:  false,
				Columns: []*schema.Column{ExerciseSetsColumns[8]},
			},
		},
	}
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "units", Type: field.TypeInt},
		{Name: "age", Type: field.TypeInt},
		{Name: "height", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10, 2)", "postgres": "numeric(10, 2)", "sqlite": "numeric"}},
		{Name: "gender", Type: field.TypeInt},
		{Name: "weight", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(10, 2)", "postgres": "numeric(10, 2)", "sqlite": "numeric"}},
		{Name: "user_profile", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_users_profile",
				Columns:    []*schema.Column{ProfilesColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_sessions", Type: field.TypeUUID},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email_verified_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WorkoutsColumns holds the columns for the "workouts" table.
	WorkoutsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "user_workouts", Type: field.TypeUUID},
	}
	// WorkoutsTable holds the schema information for the "workouts" table.
	WorkoutsTable = &schema.Table{
		Name:       "workouts",
		Columns:    WorkoutsColumns,
		PrimaryKey: []*schema.Column{WorkoutsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workouts_users_workouts",
				Columns:    []*schema.Column{WorkoutsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// WorkoutExercisesColumns holds the columns for the "workout_exercises" table.
	WorkoutExercisesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "order", Type: field.TypeUint, Nullable: true},
		{Name: "sets", Type: field.TypeUint, Nullable: true},
		{Name: "weight", Type: field.TypeFloat64, Nullable: true},
		{Name: "reps", Type: field.TypeUint, Nullable: true},
		{Name: "exercise_workout_exercises", Type: field.TypeUUID},
		{Name: "exercise_instance_workout_exercises", Type: field.TypeUUID, Nullable: true},
		{Name: "workout_workout_exercises", Type: field.TypeUUID},
	}
	// WorkoutExercisesTable holds the schema information for the "workout_exercises" table.
	WorkoutExercisesTable = &schema.Table{
		Name:       "workout_exercises",
		Columns:    WorkoutExercisesColumns,
		PrimaryKey: []*schema.Column{WorkoutExercisesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workout_exercises_exercises_workout_exercises",
				Columns:    []*schema.Column{WorkoutExercisesColumns[8]},
				RefColumns: []*schema.Column{ExercisesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "workout_exercises_exercise_instances_workout_exercises",
				Columns:    []*schema.Column{WorkoutExercisesColumns[9]},
				RefColumns: []*schema.Column{ExerciseInstancesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "workout_exercises_workouts_workout_exercises",
				Columns:    []*schema.Column{WorkoutExercisesColumns[10]},
				RefColumns: []*schema.Column{WorkoutsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// WorkoutLogsColumns holds the columns for the "workout_logs" table.
	WorkoutLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "finished_at", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeInt, Default: 0},
		{Name: "total_active_duration_seconds", Type: field.TypeUint, Default: 0},
		{Name: "total_pause_duration_seconds", Type: field.TypeUint, Default: 0},
		{Name: "user_workout_logs", Type: field.TypeUUID},
		{Name: "workout_workout_logs", Type: field.TypeUUID, Nullable: true},
	}
	// WorkoutLogsTable holds the schema information for the "workout_logs" table.
	WorkoutLogsTable = &schema.Table{
		Name:       "workout_logs",
		Columns:    WorkoutLogsColumns,
		PrimaryKey: []*schema.Column{WorkoutLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workout_logs_users_workout_logs",
				Columns:    []*schema.Column{WorkoutLogsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "workout_logs_workouts_workout_logs",
				Columns:    []*schema.Column{WorkoutLogsColumns[10]},
				RefColumns: []*schema.Column{WorkoutsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "workoutlog_status",
				Unique:  false,
				Columns: []*schema.Column{WorkoutLogsColumns[6]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BodyweightsTable,
		ExercisesTable,
		ExerciseInstancesTable,
		ExerciseSetsTable,
		ProfilesTable,
		SessionsTable,
		UsersTable,
		WorkoutsTable,
		WorkoutExercisesTable,
		WorkoutLogsTable,
	}
)

func init() {
	BodyweightsTable.ForeignKeys[0].RefTable = UsersTable
	ExerciseInstancesTable.ForeignKeys[0].RefTable = ExercisesTable
	ExerciseInstancesTable.ForeignKeys[1].RefTable = WorkoutLogsTable
	ExerciseSetsTable.ForeignKeys[0].RefTable = ExercisesTable
	ExerciseSetsTable.ForeignKeys[1].RefTable = ExerciseInstancesTable
	ExerciseSetsTable.ForeignKeys[2].RefTable = WorkoutLogsTable
	ProfilesTable.ForeignKeys[0].RefTable = UsersTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
	WorkoutsTable.ForeignKeys[0].RefTable = UsersTable
	WorkoutExercisesTable.ForeignKeys[0].RefTable = ExercisesTable
	WorkoutExercisesTable.ForeignKeys[1].RefTable = ExerciseInstancesTable
	WorkoutExercisesTable.ForeignKeys[2].RefTable = WorkoutsTable
	WorkoutLogsTable.ForeignKeys[0].RefTable = UsersTable
	WorkoutLogsTable.ForeignKeys[1].RefTable = WorkoutsTable
}
