// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/bodyweight"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BodyweightUpdate is the builder for updating Bodyweight entities.
type BodyweightUpdate struct {
	config
	hooks    []Hook
	mutation *BodyweightMutation
}

// Where appends a list predicates to the BodyweightUpdate builder.
func (bu *BodyweightUpdate) Where(ps ...predicate.Bodyweight) *BodyweightUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BodyweightUpdate) SetCreatedAt(t time.Time) *BodyweightUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BodyweightUpdate) SetNillableCreatedAt(t *time.Time) *BodyweightUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BodyweightUpdate) SetUpdatedAt(t time.Time) *BodyweightUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BodyweightUpdate) SetDeletedAt(t time.Time) *BodyweightUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BodyweightUpdate) SetNillableDeletedAt(t *time.Time) *BodyweightUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BodyweightUpdate) ClearDeletedAt() *BodyweightUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BodyweightUpdate) SetUserID(u uuid.UUID) *BodyweightUpdate {
	bu.mutation.SetUserID(u)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BodyweightUpdate) SetNillableUserID(u *uuid.UUID) *BodyweightUpdate {
	if u != nil {
		bu.SetUserID(*u)
	}
	return bu
}

// SetWeight sets the "weight" field.
func (bu *BodyweightUpdate) SetWeight(f float64) *BodyweightUpdate {
	bu.mutation.ResetWeight()
	bu.mutation.SetWeight(f)
	return bu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (bu *BodyweightUpdate) SetNillableWeight(f *float64) *BodyweightUpdate {
	if f != nil {
		bu.SetWeight(*f)
	}
	return bu
}

// AddWeight adds f to the "weight" field.
func (bu *BodyweightUpdate) AddWeight(f float64) *BodyweightUpdate {
	bu.mutation.AddWeight(f)
	return bu
}

// SetUnit sets the "unit" field.
func (bu *BodyweightUpdate) SetUnit(s string) *BodyweightUpdate {
	bu.mutation.SetUnit(s)
	return bu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (bu *BodyweightUpdate) SetNillableUnit(s *string) *BodyweightUpdate {
	if s != nil {
		bu.SetUnit(*s)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BodyweightUpdate) SetUser(u *User) *BodyweightUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BodyweightMutation object of the builder.
func (bu *BodyweightUpdate) Mutation() *BodyweightMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BodyweightUpdate) ClearUser() *BodyweightUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BodyweightUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BodyweightUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BodyweightUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BodyweightUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BodyweightUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bodyweight.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BodyweightUpdate) check() error {
	if v, ok := bu.mutation.Weight(); ok {
		if err := bodyweight.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Bodyweight.weight": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Unit(); ok {
		if err := bodyweight.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Bodyweight.unit": %w`, err)}
		}
	}
	if bu.mutation.UserCleared() && len(bu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Bodyweight.user"`)
	}
	return nil
}

func (bu *BodyweightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bodyweight.Table, bodyweight.Columns, sqlgraph.NewFieldSpec(bodyweight.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bodyweight.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bodyweight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(bodyweight.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(bodyweight.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Weight(); ok {
		_spec.SetField(bodyweight.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedWeight(); ok {
		_spec.AddField(bodyweight.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.Unit(); ok {
		_spec.SetField(bodyweight.FieldUnit, field.TypeString, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyweight.UserTable,
			Columns: []string{bodyweight.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyweight.UserTable,
			Columns: []string{bodyweight.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bodyweight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BodyweightUpdateOne is the builder for updating a single Bodyweight entity.
type BodyweightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BodyweightMutation
}

// SetCreatedAt sets the "created_at" field.
func (buo *BodyweightUpdateOne) SetCreatedAt(t time.Time) *BodyweightUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BodyweightUpdateOne) SetNillableCreatedAt(t *time.Time) *BodyweightUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BodyweightUpdateOne) SetUpdatedAt(t time.Time) *BodyweightUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BodyweightUpdateOne) SetDeletedAt(t time.Time) *BodyweightUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BodyweightUpdateOne) SetNillableDeletedAt(t *time.Time) *BodyweightUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BodyweightUpdateOne) ClearDeletedAt() *BodyweightUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetUserID sets the "user_id" field.
func (buo *BodyweightUpdateOne) SetUserID(u uuid.UUID) *BodyweightUpdateOne {
	buo.mutation.SetUserID(u)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BodyweightUpdateOne) SetNillableUserID(u *uuid.UUID) *BodyweightUpdateOne {
	if u != nil {
		buo.SetUserID(*u)
	}
	return buo
}

// SetWeight sets the "weight" field.
func (buo *BodyweightUpdateOne) SetWeight(f float64) *BodyweightUpdateOne {
	buo.mutation.ResetWeight()
	buo.mutation.SetWeight(f)
	return buo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (buo *BodyweightUpdateOne) SetNillableWeight(f *float64) *BodyweightUpdateOne {
	if f != nil {
		buo.SetWeight(*f)
	}
	return buo
}

// AddWeight adds f to the "weight" field.
func (buo *BodyweightUpdateOne) AddWeight(f float64) *BodyweightUpdateOne {
	buo.mutation.AddWeight(f)
	return buo
}

// SetUnit sets the "unit" field.
func (buo *BodyweightUpdateOne) SetUnit(s string) *BodyweightUpdateOne {
	buo.mutation.SetUnit(s)
	return buo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (buo *BodyweightUpdateOne) SetNillableUnit(s *string) *BodyweightUpdateOne {
	if s != nil {
		buo.SetUnit(*s)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BodyweightUpdateOne) SetUser(u *User) *BodyweightUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BodyweightMutation object of the builder.
func (buo *BodyweightUpdateOne) Mutation() *BodyweightMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BodyweightUpdateOne) ClearUser() *BodyweightUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Where appends a list predicates to the BodyweightUpdate builder.
func (buo *BodyweightUpdateOne) Where(ps ...predicate.Bodyweight) *BodyweightUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BodyweightUpdateOne) Select(field string, fields ...string) *BodyweightUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bodyweight entity.
func (buo *BodyweightUpdateOne) Save(ctx context.Context) (*Bodyweight, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BodyweightUpdateOne) SaveX(ctx context.Context) *Bodyweight {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BodyweightUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BodyweightUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BodyweightUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bodyweight.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BodyweightUpdateOne) check() error {
	if v, ok := buo.mutation.Weight(); ok {
		if err := bodyweight.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Bodyweight.weight": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Unit(); ok {
		if err := bodyweight.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Bodyweight.unit": %w`, err)}
		}
	}
	if buo.mutation.UserCleared() && len(buo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Bodyweight.user"`)
	}
	return nil
}

func (buo *BodyweightUpdateOne) sqlSave(ctx context.Context) (_node *Bodyweight, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bodyweight.Table, bodyweight.Columns, sqlgraph.NewFieldSpec(bodyweight.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bodyweight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bodyweight.FieldID)
		for _, f := range fields {
			if !bodyweight.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bodyweight.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bodyweight.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bodyweight.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(bodyweight.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(bodyweight.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Weight(); ok {
		_spec.SetField(bodyweight.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedWeight(); ok {
		_spec.AddField(bodyweight.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.Unit(); ok {
		_spec.SetField(bodyweight.FieldUnit, field.TypeString, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyweight.UserTable,
			Columns: []string{bodyweight.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyweight.UserTable,
			Columns: []string{bodyweight.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bodyweight{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bodyweight.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
