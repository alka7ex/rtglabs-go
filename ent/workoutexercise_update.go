// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/workoutexercise"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkoutExerciseUpdate is the builder for updating WorkoutExercise entities.
type WorkoutExerciseUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutExerciseMutation
}

// Where appends a list predicates to the WorkoutExerciseUpdate builder.
func (weu *WorkoutExerciseUpdate) Where(ps ...predicate.WorkoutExercise) *WorkoutExerciseUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetUpdateTime sets the "update_time" field.
func (weu *WorkoutExerciseUpdate) SetUpdateTime(t time.Time) *WorkoutExerciseUpdate {
	weu.mutation.SetUpdateTime(t)
	return weu
}

// SetCreatedAt sets the "created_at" field.
func (weu *WorkoutExerciseUpdate) SetCreatedAt(t time.Time) *WorkoutExerciseUpdate {
	weu.mutation.SetCreatedAt(t)
	return weu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableCreatedAt(t *time.Time) *WorkoutExerciseUpdate {
	if t != nil {
		weu.SetCreatedAt(*t)
	}
	return weu
}

// SetUpdatedAt sets the "updated_at" field.
func (weu *WorkoutExerciseUpdate) SetUpdatedAt(t time.Time) *WorkoutExerciseUpdate {
	weu.mutation.SetUpdatedAt(t)
	return weu
}

// SetDeletedAt sets the "deleted_at" field.
func (weu *WorkoutExerciseUpdate) SetDeletedAt(t time.Time) *WorkoutExerciseUpdate {
	weu.mutation.SetDeletedAt(t)
	return weu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableDeletedAt(t *time.Time) *WorkoutExerciseUpdate {
	if t != nil {
		weu.SetDeletedAt(*t)
	}
	return weu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (weu *WorkoutExerciseUpdate) ClearDeletedAt() *WorkoutExerciseUpdate {
	weu.mutation.ClearDeletedAt()
	return weu
}

// SetOrder sets the "order" field.
func (weu *WorkoutExerciseUpdate) SetOrder(u uint) *WorkoutExerciseUpdate {
	weu.mutation.ResetOrder()
	weu.mutation.SetOrder(u)
	return weu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableOrder(u *uint) *WorkoutExerciseUpdate {
	if u != nil {
		weu.SetOrder(*u)
	}
	return weu
}

// AddOrder adds u to the "order" field.
func (weu *WorkoutExerciseUpdate) AddOrder(u int) *WorkoutExerciseUpdate {
	weu.mutation.AddOrder(u)
	return weu
}

// ClearOrder clears the value of the "order" field.
func (weu *WorkoutExerciseUpdate) ClearOrder() *WorkoutExerciseUpdate {
	weu.mutation.ClearOrder()
	return weu
}

// SetSets sets the "sets" field.
func (weu *WorkoutExerciseUpdate) SetSets(u uint) *WorkoutExerciseUpdate {
	weu.mutation.ResetSets()
	weu.mutation.SetSets(u)
	return weu
}

// SetNillableSets sets the "sets" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableSets(u *uint) *WorkoutExerciseUpdate {
	if u != nil {
		weu.SetSets(*u)
	}
	return weu
}

// AddSets adds u to the "sets" field.
func (weu *WorkoutExerciseUpdate) AddSets(u int) *WorkoutExerciseUpdate {
	weu.mutation.AddSets(u)
	return weu
}

// ClearSets clears the value of the "sets" field.
func (weu *WorkoutExerciseUpdate) ClearSets() *WorkoutExerciseUpdate {
	weu.mutation.ClearSets()
	return weu
}

// SetWeight sets the "weight" field.
func (weu *WorkoutExerciseUpdate) SetWeight(f float64) *WorkoutExerciseUpdate {
	weu.mutation.ResetWeight()
	weu.mutation.SetWeight(f)
	return weu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableWeight(f *float64) *WorkoutExerciseUpdate {
	if f != nil {
		weu.SetWeight(*f)
	}
	return weu
}

// AddWeight adds f to the "weight" field.
func (weu *WorkoutExerciseUpdate) AddWeight(f float64) *WorkoutExerciseUpdate {
	weu.mutation.AddWeight(f)
	return weu
}

// ClearWeight clears the value of the "weight" field.
func (weu *WorkoutExerciseUpdate) ClearWeight() *WorkoutExerciseUpdate {
	weu.mutation.ClearWeight()
	return weu
}

// SetReps sets the "reps" field.
func (weu *WorkoutExerciseUpdate) SetReps(u uint) *WorkoutExerciseUpdate {
	weu.mutation.ResetReps()
	weu.mutation.SetReps(u)
	return weu
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableReps(u *uint) *WorkoutExerciseUpdate {
	if u != nil {
		weu.SetReps(*u)
	}
	return weu
}

// AddReps adds u to the "reps" field.
func (weu *WorkoutExerciseUpdate) AddReps(u int) *WorkoutExerciseUpdate {
	weu.mutation.AddReps(u)
	return weu
}

// ClearReps clears the value of the "reps" field.
func (weu *WorkoutExerciseUpdate) ClearReps() *WorkoutExerciseUpdate {
	weu.mutation.ClearReps()
	return weu
}

// Mutation returns the WorkoutExerciseMutation object of the builder.
func (weu *WorkoutExerciseUpdate) Mutation() *WorkoutExerciseMutation {
	return weu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkoutExerciseUpdate) Save(ctx context.Context) (int, error) {
	weu.defaults()
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkoutExerciseUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkoutExerciseUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkoutExerciseUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weu *WorkoutExerciseUpdate) defaults() {
	if _, ok := weu.mutation.UpdateTime(); !ok {
		v := workoutexercise.UpdateDefaultUpdateTime()
		weu.mutation.SetUpdateTime(v)
	}
	if _, ok := weu.mutation.UpdatedAt(); !ok {
		v := workoutexercise.UpdateDefaultUpdatedAt()
		weu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkoutExerciseUpdate) check() error {
	if weu.mutation.WorkoutCleared() && len(weu.mutation.WorkoutIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.workout"`)
	}
	if weu.mutation.ExerciseCleared() && len(weu.mutation.ExerciseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.exercise"`)
	}
	return nil
}

func (weu *WorkoutExerciseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workoutexercise.Table, workoutexercise.Columns, sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weu.mutation.UpdateTime(); ok {
		_spec.SetField(workoutexercise.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := weu.mutation.CreatedAt(); ok {
		_spec.SetField(workoutexercise.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutexercise.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := weu.mutation.DeletedAt(); ok {
		_spec.SetField(workoutexercise.FieldDeletedAt, field.TypeTime, value)
	}
	if weu.mutation.DeletedAtCleared() {
		_spec.ClearField(workoutexercise.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := weu.mutation.Order(); ok {
		_spec.SetField(workoutexercise.FieldOrder, field.TypeUint, value)
	}
	if value, ok := weu.mutation.AddedOrder(); ok {
		_spec.AddField(workoutexercise.FieldOrder, field.TypeUint, value)
	}
	if weu.mutation.OrderCleared() {
		_spec.ClearField(workoutexercise.FieldOrder, field.TypeUint)
	}
	if value, ok := weu.mutation.Sets(); ok {
		_spec.SetField(workoutexercise.FieldSets, field.TypeUint, value)
	}
	if value, ok := weu.mutation.AddedSets(); ok {
		_spec.AddField(workoutexercise.FieldSets, field.TypeUint, value)
	}
	if weu.mutation.SetsCleared() {
		_spec.ClearField(workoutexercise.FieldSets, field.TypeUint)
	}
	if value, ok := weu.mutation.Weight(); ok {
		_spec.SetField(workoutexercise.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := weu.mutation.AddedWeight(); ok {
		_spec.AddField(workoutexercise.FieldWeight, field.TypeFloat64, value)
	}
	if weu.mutation.WeightCleared() {
		_spec.ClearField(workoutexercise.FieldWeight, field.TypeFloat64)
	}
	if value, ok := weu.mutation.Reps(); ok {
		_spec.SetField(workoutexercise.FieldReps, field.TypeUint, value)
	}
	if value, ok := weu.mutation.AddedReps(); ok {
		_spec.AddField(workoutexercise.FieldReps, field.TypeUint, value)
	}
	if weu.mutation.RepsCleared() {
		_spec.ClearField(workoutexercise.FieldReps, field.TypeUint)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutexercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkoutExerciseUpdateOne is the builder for updating a single WorkoutExercise entity.
type WorkoutExerciseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutExerciseMutation
}

// SetUpdateTime sets the "update_time" field.
func (weuo *WorkoutExerciseUpdateOne) SetUpdateTime(t time.Time) *WorkoutExerciseUpdateOne {
	weuo.mutation.SetUpdateTime(t)
	return weuo
}

// SetCreatedAt sets the "created_at" field.
func (weuo *WorkoutExerciseUpdateOne) SetCreatedAt(t time.Time) *WorkoutExerciseUpdateOne {
	weuo.mutation.SetCreatedAt(t)
	return weuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkoutExerciseUpdateOne {
	if t != nil {
		weuo.SetCreatedAt(*t)
	}
	return weuo
}

// SetUpdatedAt sets the "updated_at" field.
func (weuo *WorkoutExerciseUpdateOne) SetUpdatedAt(t time.Time) *WorkoutExerciseUpdateOne {
	weuo.mutation.SetUpdatedAt(t)
	return weuo
}

// SetDeletedAt sets the "deleted_at" field.
func (weuo *WorkoutExerciseUpdateOne) SetDeletedAt(t time.Time) *WorkoutExerciseUpdateOne {
	weuo.mutation.SetDeletedAt(t)
	return weuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableDeletedAt(t *time.Time) *WorkoutExerciseUpdateOne {
	if t != nil {
		weuo.SetDeletedAt(*t)
	}
	return weuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (weuo *WorkoutExerciseUpdateOne) ClearDeletedAt() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearDeletedAt()
	return weuo
}

// SetOrder sets the "order" field.
func (weuo *WorkoutExerciseUpdateOne) SetOrder(u uint) *WorkoutExerciseUpdateOne {
	weuo.mutation.ResetOrder()
	weuo.mutation.SetOrder(u)
	return weuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableOrder(u *uint) *WorkoutExerciseUpdateOne {
	if u != nil {
		weuo.SetOrder(*u)
	}
	return weuo
}

// AddOrder adds u to the "order" field.
func (weuo *WorkoutExerciseUpdateOne) AddOrder(u int) *WorkoutExerciseUpdateOne {
	weuo.mutation.AddOrder(u)
	return weuo
}

// ClearOrder clears the value of the "order" field.
func (weuo *WorkoutExerciseUpdateOne) ClearOrder() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearOrder()
	return weuo
}

// SetSets sets the "sets" field.
func (weuo *WorkoutExerciseUpdateOne) SetSets(u uint) *WorkoutExerciseUpdateOne {
	weuo.mutation.ResetSets()
	weuo.mutation.SetSets(u)
	return weuo
}

// SetNillableSets sets the "sets" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableSets(u *uint) *WorkoutExerciseUpdateOne {
	if u != nil {
		weuo.SetSets(*u)
	}
	return weuo
}

// AddSets adds u to the "sets" field.
func (weuo *WorkoutExerciseUpdateOne) AddSets(u int) *WorkoutExerciseUpdateOne {
	weuo.mutation.AddSets(u)
	return weuo
}

// ClearSets clears the value of the "sets" field.
func (weuo *WorkoutExerciseUpdateOne) ClearSets() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearSets()
	return weuo
}

// SetWeight sets the "weight" field.
func (weuo *WorkoutExerciseUpdateOne) SetWeight(f float64) *WorkoutExerciseUpdateOne {
	weuo.mutation.ResetWeight()
	weuo.mutation.SetWeight(f)
	return weuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableWeight(f *float64) *WorkoutExerciseUpdateOne {
	if f != nil {
		weuo.SetWeight(*f)
	}
	return weuo
}

// AddWeight adds f to the "weight" field.
func (weuo *WorkoutExerciseUpdateOne) AddWeight(f float64) *WorkoutExerciseUpdateOne {
	weuo.mutation.AddWeight(f)
	return weuo
}

// ClearWeight clears the value of the "weight" field.
func (weuo *WorkoutExerciseUpdateOne) ClearWeight() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearWeight()
	return weuo
}

// SetReps sets the "reps" field.
func (weuo *WorkoutExerciseUpdateOne) SetReps(u uint) *WorkoutExerciseUpdateOne {
	weuo.mutation.ResetReps()
	weuo.mutation.SetReps(u)
	return weuo
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableReps(u *uint) *WorkoutExerciseUpdateOne {
	if u != nil {
		weuo.SetReps(*u)
	}
	return weuo
}

// AddReps adds u to the "reps" field.
func (weuo *WorkoutExerciseUpdateOne) AddReps(u int) *WorkoutExerciseUpdateOne {
	weuo.mutation.AddReps(u)
	return weuo
}

// ClearReps clears the value of the "reps" field.
func (weuo *WorkoutExerciseUpdateOne) ClearReps() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearReps()
	return weuo
}

// Mutation returns the WorkoutExerciseMutation object of the builder.
func (weuo *WorkoutExerciseUpdateOne) Mutation() *WorkoutExerciseMutation {
	return weuo.mutation
}

// Where appends a list predicates to the WorkoutExerciseUpdate builder.
func (weuo *WorkoutExerciseUpdateOne) Where(ps ...predicate.WorkoutExercise) *WorkoutExerciseUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkoutExerciseUpdateOne) Select(field string, fields ...string) *WorkoutExerciseUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkoutExercise entity.
func (weuo *WorkoutExerciseUpdateOne) Save(ctx context.Context) (*WorkoutExercise, error) {
	weuo.defaults()
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkoutExerciseUpdateOne) SaveX(ctx context.Context) *WorkoutExercise {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkoutExerciseUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkoutExerciseUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (weuo *WorkoutExerciseUpdateOne) defaults() {
	if _, ok := weuo.mutation.UpdateTime(); !ok {
		v := workoutexercise.UpdateDefaultUpdateTime()
		weuo.mutation.SetUpdateTime(v)
	}
	if _, ok := weuo.mutation.UpdatedAt(); !ok {
		v := workoutexercise.UpdateDefaultUpdatedAt()
		weuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkoutExerciseUpdateOne) check() error {
	if weuo.mutation.WorkoutCleared() && len(weuo.mutation.WorkoutIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.workout"`)
	}
	if weuo.mutation.ExerciseCleared() && len(weuo.mutation.ExerciseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.exercise"`)
	}
	return nil
}

func (weuo *WorkoutExerciseUpdateOne) sqlSave(ctx context.Context) (_node *WorkoutExercise, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workoutexercise.Table, workoutexercise.Columns, sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkoutExercise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutexercise.FieldID)
		for _, f := range fields {
			if !workoutexercise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workoutexercise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := weuo.mutation.UpdateTime(); ok {
		_spec.SetField(workoutexercise.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.CreatedAt(); ok {
		_spec.SetField(workoutexercise.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutexercise.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := weuo.mutation.DeletedAt(); ok {
		_spec.SetField(workoutexercise.FieldDeletedAt, field.TypeTime, value)
	}
	if weuo.mutation.DeletedAtCleared() {
		_spec.ClearField(workoutexercise.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := weuo.mutation.Order(); ok {
		_spec.SetField(workoutexercise.FieldOrder, field.TypeUint, value)
	}
	if value, ok := weuo.mutation.AddedOrder(); ok {
		_spec.AddField(workoutexercise.FieldOrder, field.TypeUint, value)
	}
	if weuo.mutation.OrderCleared() {
		_spec.ClearField(workoutexercise.FieldOrder, field.TypeUint)
	}
	if value, ok := weuo.mutation.Sets(); ok {
		_spec.SetField(workoutexercise.FieldSets, field.TypeUint, value)
	}
	if value, ok := weuo.mutation.AddedSets(); ok {
		_spec.AddField(workoutexercise.FieldSets, field.TypeUint, value)
	}
	if weuo.mutation.SetsCleared() {
		_spec.ClearField(workoutexercise.FieldSets, field.TypeUint)
	}
	if value, ok := weuo.mutation.Weight(); ok {
		_spec.SetField(workoutexercise.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := weuo.mutation.AddedWeight(); ok {
		_spec.AddField(workoutexercise.FieldWeight, field.TypeFloat64, value)
	}
	if weuo.mutation.WeightCleared() {
		_spec.ClearField(workoutexercise.FieldWeight, field.TypeFloat64)
	}
	if value, ok := weuo.mutation.Reps(); ok {
		_spec.SetField(workoutexercise.FieldReps, field.TypeUint, value)
	}
	if value, ok := weuo.mutation.AddedReps(); ok {
		_spec.AddField(workoutexercise.FieldReps, field.TypeUint, value)
	}
	if weuo.mutation.RepsCleared() {
		_spec.ClearField(workoutexercise.FieldReps, field.TypeUint)
	}
	_node = &WorkoutExercise{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutexercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
