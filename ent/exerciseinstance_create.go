// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/workoutexercise"
	"rtglabs-go/ent/workoutlog"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExerciseInstanceCreate is the builder for creating a ExerciseInstance entity.
type ExerciseInstanceCreate struct {
	config
	mutation *ExerciseInstanceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (eic *ExerciseInstanceCreate) SetCreatedAt(t time.Time) *ExerciseInstanceCreate {
	eic.mutation.SetCreatedAt(t)
	return eic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eic *ExerciseInstanceCreate) SetNillableCreatedAt(t *time.Time) *ExerciseInstanceCreate {
	if t != nil {
		eic.SetCreatedAt(*t)
	}
	return eic
}

// SetUpdatedAt sets the "updated_at" field.
func (eic *ExerciseInstanceCreate) SetUpdatedAt(t time.Time) *ExerciseInstanceCreate {
	eic.mutation.SetUpdatedAt(t)
	return eic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eic *ExerciseInstanceCreate) SetNillableUpdatedAt(t *time.Time) *ExerciseInstanceCreate {
	if t != nil {
		eic.SetUpdatedAt(*t)
	}
	return eic
}

// SetDeletedAt sets the "deleted_at" field.
func (eic *ExerciseInstanceCreate) SetDeletedAt(t time.Time) *ExerciseInstanceCreate {
	eic.mutation.SetDeletedAt(t)
	return eic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eic *ExerciseInstanceCreate) SetNillableDeletedAt(t *time.Time) *ExerciseInstanceCreate {
	if t != nil {
		eic.SetDeletedAt(*t)
	}
	return eic
}

// SetID sets the "id" field.
func (eic *ExerciseInstanceCreate) SetID(u uuid.UUID) *ExerciseInstanceCreate {
	eic.mutation.SetID(u)
	return eic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (eic *ExerciseInstanceCreate) SetNillableID(u *uuid.UUID) *ExerciseInstanceCreate {
	if u != nil {
		eic.SetID(*u)
	}
	return eic
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by ID.
func (eic *ExerciseInstanceCreate) SetExerciseID(id uuid.UUID) *ExerciseInstanceCreate {
	eic.mutation.SetExerciseID(id)
	return eic
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (eic *ExerciseInstanceCreate) SetExercise(e *Exercise) *ExerciseInstanceCreate {
	return eic.SetExerciseID(e.ID)
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (eic *ExerciseInstanceCreate) AddWorkoutExerciseIDs(ids ...uuid.UUID) *ExerciseInstanceCreate {
	eic.mutation.AddWorkoutExerciseIDs(ids...)
	return eic
}

// AddWorkoutExercises adds the "workout_exercises" edges to the WorkoutExercise entity.
func (eic *ExerciseInstanceCreate) AddWorkoutExercises(w ...*WorkoutExercise) *ExerciseInstanceCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eic.AddWorkoutExerciseIDs(ids...)
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (eic *ExerciseInstanceCreate) AddExerciseSetIDs(ids ...uuid.UUID) *ExerciseInstanceCreate {
	eic.mutation.AddExerciseSetIDs(ids...)
	return eic
}

// AddExerciseSets adds the "exercise_sets" edges to the ExerciseSet entity.
func (eic *ExerciseInstanceCreate) AddExerciseSets(e ...*ExerciseSet) *ExerciseInstanceCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eic.AddExerciseSetIDs(ids...)
}

// SetWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by ID.
func (eic *ExerciseInstanceCreate) SetWorkoutLogID(id uuid.UUID) *ExerciseInstanceCreate {
	eic.mutation.SetWorkoutLogID(id)
	return eic
}

// SetNillableWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by ID if the given value is not nil.
func (eic *ExerciseInstanceCreate) SetNillableWorkoutLogID(id *uuid.UUID) *ExerciseInstanceCreate {
	if id != nil {
		eic = eic.SetWorkoutLogID(*id)
	}
	return eic
}

// SetWorkoutLog sets the "workout_log" edge to the WorkoutLog entity.
func (eic *ExerciseInstanceCreate) SetWorkoutLog(w *WorkoutLog) *ExerciseInstanceCreate {
	return eic.SetWorkoutLogID(w.ID)
}

// Mutation returns the ExerciseInstanceMutation object of the builder.
func (eic *ExerciseInstanceCreate) Mutation() *ExerciseInstanceMutation {
	return eic.mutation
}

// Save creates the ExerciseInstance in the database.
func (eic *ExerciseInstanceCreate) Save(ctx context.Context) (*ExerciseInstance, error) {
	eic.defaults()
	return withHooks(ctx, eic.sqlSave, eic.mutation, eic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eic *ExerciseInstanceCreate) SaveX(ctx context.Context) *ExerciseInstance {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *ExerciseInstanceCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *ExerciseInstanceCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eic *ExerciseInstanceCreate) defaults() {
	if _, ok := eic.mutation.CreatedAt(); !ok {
		v := exerciseinstance.DefaultCreatedAt()
		eic.mutation.SetCreatedAt(v)
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		v := exerciseinstance.DefaultUpdatedAt()
		eic.mutation.SetUpdatedAt(v)
	}
	if _, ok := eic.mutation.ID(); !ok {
		v := exerciseinstance.DefaultID()
		eic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eic *ExerciseInstanceCreate) check() error {
	if _, ok := eic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExerciseInstance.created_at"`)}
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExerciseInstance.updated_at"`)}
	}
	if len(eic.mutation.ExerciseIDs()) == 0 {
		return &ValidationError{Name: "exercise", err: errors.New(`ent: missing required edge "ExerciseInstance.exercise"`)}
	}
	return nil
}

func (eic *ExerciseInstanceCreate) sqlSave(ctx context.Context) (*ExerciseInstance, error) {
	if err := eic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	eic.mutation.id = &_node.ID
	eic.mutation.done = true
	return _node, nil
}

func (eic *ExerciseInstanceCreate) createSpec() (*ExerciseInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &ExerciseInstance{config: eic.config}
		_spec = sqlgraph.NewCreateSpec(exerciseinstance.Table, sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID))
	)
	if id, ok := eic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := eic.mutation.CreatedAt(); ok {
		_spec.SetField(exerciseinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := eic.mutation.UpdatedAt(); ok {
		_spec.SetField(exerciseinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := eic.mutation.DeletedAt(); ok {
		_spec.SetField(exerciseinstance.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := eic.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseinstance.ExerciseTable,
			Columns: []string{exerciseinstance.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exercise_exercise_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.WorkoutExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exerciseinstance.WorkoutExercisesTable,
			Columns: []string{exerciseinstance.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.ExerciseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exerciseinstance.ExerciseSetsTable,
			Columns: []string{exerciseinstance.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.WorkoutLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseinstance.WorkoutLogTable,
			Columns: []string{exerciseinstance.WorkoutLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_log_exercise_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExerciseInstanceCreateBulk is the builder for creating many ExerciseInstance entities in bulk.
type ExerciseInstanceCreateBulk struct {
	config
	err      error
	builders []*ExerciseInstanceCreate
}

// Save creates the ExerciseInstance entities in the database.
func (eicb *ExerciseInstanceCreateBulk) Save(ctx context.Context) ([]*ExerciseInstance, error) {
	if eicb.err != nil {
		return nil, eicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*ExerciseInstance, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExerciseInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *ExerciseInstanceCreateBulk) SaveX(ctx context.Context) []*ExerciseInstance {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *ExerciseInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *ExerciseInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}
