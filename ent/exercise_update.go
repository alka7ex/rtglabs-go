// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/workoutexercise"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExerciseUpdate is the builder for updating Exercise entities.
type ExerciseUpdate struct {
	config
	hooks    []Hook
	mutation *ExerciseMutation
}

// Where appends a list predicates to the ExerciseUpdate builder.
func (eu *ExerciseUpdate) Where(ps ...predicate.Exercise) *ExerciseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *ExerciseUpdate) SetUpdateTime(t time.Time) *ExerciseUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *ExerciseUpdate) SetCreatedAt(t time.Time) *ExerciseUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *ExerciseUpdate) SetNillableCreatedAt(t *time.Time) *ExerciseUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExerciseUpdate) SetUpdatedAt(t time.Time) *ExerciseUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *ExerciseUpdate) SetDeletedAt(t time.Time) *ExerciseUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *ExerciseUpdate) SetNillableDeletedAt(t *time.Time) *ExerciseUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *ExerciseUpdate) ClearDeletedAt() *ExerciseUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetName sets the "name" field.
func (eu *ExerciseUpdate) SetName(s string) *ExerciseUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *ExerciseUpdate) SetNillableName(s *string) *ExerciseUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (eu *ExerciseUpdate) AddExerciseInstanceIDs(ids ...uuid.UUID) *ExerciseUpdate {
	eu.mutation.AddExerciseInstanceIDs(ids...)
	return eu
}

// AddExerciseInstances adds the "exercise_instances" edges to the ExerciseInstance entity.
func (eu *ExerciseUpdate) AddExerciseInstances(e ...*ExerciseInstance) *ExerciseUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExerciseInstanceIDs(ids...)
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (eu *ExerciseUpdate) AddWorkoutExerciseIDs(ids ...uuid.UUID) *ExerciseUpdate {
	eu.mutation.AddWorkoutExerciseIDs(ids...)
	return eu
}

// AddWorkoutExercises adds the "workout_exercises" edges to the WorkoutExercise entity.
func (eu *ExerciseUpdate) AddWorkoutExercises(w ...*WorkoutExercise) *ExerciseUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddWorkoutExerciseIDs(ids...)
}

// Mutation returns the ExerciseMutation object of the builder.
func (eu *ExerciseUpdate) Mutation() *ExerciseMutation {
	return eu.mutation
}

// ClearExerciseInstances clears all "exercise_instances" edges to the ExerciseInstance entity.
func (eu *ExerciseUpdate) ClearExerciseInstances() *ExerciseUpdate {
	eu.mutation.ClearExerciseInstances()
	return eu
}

// RemoveExerciseInstanceIDs removes the "exercise_instances" edge to ExerciseInstance entities by IDs.
func (eu *ExerciseUpdate) RemoveExerciseInstanceIDs(ids ...uuid.UUID) *ExerciseUpdate {
	eu.mutation.RemoveExerciseInstanceIDs(ids...)
	return eu
}

// RemoveExerciseInstances removes "exercise_instances" edges to ExerciseInstance entities.
func (eu *ExerciseUpdate) RemoveExerciseInstances(e ...*ExerciseInstance) *ExerciseUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExerciseInstanceIDs(ids...)
}

// ClearWorkoutExercises clears all "workout_exercises" edges to the WorkoutExercise entity.
func (eu *ExerciseUpdate) ClearWorkoutExercises() *ExerciseUpdate {
	eu.mutation.ClearWorkoutExercises()
	return eu
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to WorkoutExercise entities by IDs.
func (eu *ExerciseUpdate) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) *ExerciseUpdate {
	eu.mutation.RemoveWorkoutExerciseIDs(ids...)
	return eu
}

// RemoveWorkoutExercises removes "workout_exercises" edges to WorkoutExercise entities.
func (eu *ExerciseUpdate) RemoveWorkoutExercises(w ...*WorkoutExercise) *ExerciseUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveWorkoutExerciseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExerciseUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExerciseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExerciseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExerciseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExerciseUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := exercise.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := exercise.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *ExerciseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exercise.Table, exercise.Columns, sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.SetField(exercise.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(exercise.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(exercise.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(exercise.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(exercise.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(exercise.FieldName, field.TypeString, value)
	}
	if eu.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.ExerciseInstancesTable,
			Columns: []string{exercise.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExerciseInstancesIDs(); len(nodes) > 0 && !eu.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.ExerciseInstancesTable,
			Columns: []string{exercise.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExerciseInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.ExerciseInstancesTable,
			Columns: []string{exercise.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutExercisesTable,
			Columns: []string{exercise.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedWorkoutExercisesIDs(); len(nodes) > 0 && !eu.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutExercisesTable,
			Columns: []string{exercise.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.WorkoutExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutExercisesTable,
			Columns: []string{exercise.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExerciseUpdateOne is the builder for updating a single Exercise entity.
type ExerciseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExerciseMutation
}

// SetUpdateTime sets the "update_time" field.
func (euo *ExerciseUpdateOne) SetUpdateTime(t time.Time) *ExerciseUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *ExerciseUpdateOne) SetCreatedAt(t time.Time) *ExerciseUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *ExerciseUpdateOne) SetNillableCreatedAt(t *time.Time) *ExerciseUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExerciseUpdateOne) SetUpdatedAt(t time.Time) *ExerciseUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *ExerciseUpdateOne) SetDeletedAt(t time.Time) *ExerciseUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *ExerciseUpdateOne) SetNillableDeletedAt(t *time.Time) *ExerciseUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *ExerciseUpdateOne) ClearDeletedAt() *ExerciseUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetName sets the "name" field.
func (euo *ExerciseUpdateOne) SetName(s string) *ExerciseUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *ExerciseUpdateOne) SetNillableName(s *string) *ExerciseUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (euo *ExerciseUpdateOne) AddExerciseInstanceIDs(ids ...uuid.UUID) *ExerciseUpdateOne {
	euo.mutation.AddExerciseInstanceIDs(ids...)
	return euo
}

// AddExerciseInstances adds the "exercise_instances" edges to the ExerciseInstance entity.
func (euo *ExerciseUpdateOne) AddExerciseInstances(e ...*ExerciseInstance) *ExerciseUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExerciseInstanceIDs(ids...)
}

// AddWorkoutExerciseIDs adds the "workout_exercises" edge to the WorkoutExercise entity by IDs.
func (euo *ExerciseUpdateOne) AddWorkoutExerciseIDs(ids ...uuid.UUID) *ExerciseUpdateOne {
	euo.mutation.AddWorkoutExerciseIDs(ids...)
	return euo
}

// AddWorkoutExercises adds the "workout_exercises" edges to the WorkoutExercise entity.
func (euo *ExerciseUpdateOne) AddWorkoutExercises(w ...*WorkoutExercise) *ExerciseUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddWorkoutExerciseIDs(ids...)
}

// Mutation returns the ExerciseMutation object of the builder.
func (euo *ExerciseUpdateOne) Mutation() *ExerciseMutation {
	return euo.mutation
}

// ClearExerciseInstances clears all "exercise_instances" edges to the ExerciseInstance entity.
func (euo *ExerciseUpdateOne) ClearExerciseInstances() *ExerciseUpdateOne {
	euo.mutation.ClearExerciseInstances()
	return euo
}

// RemoveExerciseInstanceIDs removes the "exercise_instances" edge to ExerciseInstance entities by IDs.
func (euo *ExerciseUpdateOne) RemoveExerciseInstanceIDs(ids ...uuid.UUID) *ExerciseUpdateOne {
	euo.mutation.RemoveExerciseInstanceIDs(ids...)
	return euo
}

// RemoveExerciseInstances removes "exercise_instances" edges to ExerciseInstance entities.
func (euo *ExerciseUpdateOne) RemoveExerciseInstances(e ...*ExerciseInstance) *ExerciseUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExerciseInstanceIDs(ids...)
}

// ClearWorkoutExercises clears all "workout_exercises" edges to the WorkoutExercise entity.
func (euo *ExerciseUpdateOne) ClearWorkoutExercises() *ExerciseUpdateOne {
	euo.mutation.ClearWorkoutExercises()
	return euo
}

// RemoveWorkoutExerciseIDs removes the "workout_exercises" edge to WorkoutExercise entities by IDs.
func (euo *ExerciseUpdateOne) RemoveWorkoutExerciseIDs(ids ...uuid.UUID) *ExerciseUpdateOne {
	euo.mutation.RemoveWorkoutExerciseIDs(ids...)
	return euo
}

// RemoveWorkoutExercises removes "workout_exercises" edges to WorkoutExercise entities.
func (euo *ExerciseUpdateOne) RemoveWorkoutExercises(w ...*WorkoutExercise) *ExerciseUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveWorkoutExerciseIDs(ids...)
}

// Where appends a list predicates to the ExerciseUpdate builder.
func (euo *ExerciseUpdateOne) Where(ps ...predicate.Exercise) *ExerciseUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExerciseUpdateOne) Select(field string, fields ...string) *ExerciseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exercise entity.
func (euo *ExerciseUpdateOne) Save(ctx context.Context) (*Exercise, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExerciseUpdateOne) SaveX(ctx context.Context) *Exercise {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExerciseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExerciseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExerciseUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := exercise.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := exercise.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *ExerciseUpdateOne) sqlSave(ctx context.Context) (_node *Exercise, err error) {
	_spec := sqlgraph.NewUpdateSpec(exercise.Table, exercise.Columns, sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exercise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exercise.FieldID)
		for _, f := range fields {
			if !exercise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exercise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.SetField(exercise.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(exercise.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(exercise.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(exercise.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(exercise.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(exercise.FieldName, field.TypeString, value)
	}
	if euo.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.ExerciseInstancesTable,
			Columns: []string{exercise.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExerciseInstancesIDs(); len(nodes) > 0 && !euo.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.ExerciseInstancesTable,
			Columns: []string{exercise.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExerciseInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.ExerciseInstancesTable,
			Columns: []string{exercise.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutExercisesTable,
			Columns: []string{exercise.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedWorkoutExercisesIDs(); len(nodes) > 0 && !euo.mutation.WorkoutExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutExercisesTable,
			Columns: []string{exercise.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.WorkoutExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exercise.WorkoutExercisesTable,
			Columns: []string{exercise.WorkoutExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exercise{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
