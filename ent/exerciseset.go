// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/workoutlog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ExerciseSet is the model entity for the ExerciseSet schema.
type ExerciseSet struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight *float64 `json:"weight,omitempty"`
	// Reps holds the value of the "reps" field.
	Reps *int `json:"reps,omitempty"`
	// SetNumber holds the value of the "set_number" field.
	SetNumber int `json:"set_number,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExerciseSetQuery when eager-loading is set.
	Edges                           ExerciseSetEdges `json:"edges"`
	exercise_exercise_sets          *uuid.UUID
	exercise_instance_exercise_sets *uuid.UUID
	workout_log_exercise_sets       *uuid.UUID
	selectValues                    sql.SelectValues
}

// ExerciseSetEdges holds the relations/edges for other nodes in the graph.
type ExerciseSetEdges struct {
	// WorkoutLog holds the value of the workout_log edge.
	WorkoutLog *WorkoutLog `json:"workout_log,omitempty"`
	// Exercise holds the value of the exercise edge.
	Exercise *Exercise `json:"exercise,omitempty"`
	// ExerciseInstance holds the value of the exercise_instance edge.
	ExerciseInstance *ExerciseInstance `json:"exercise_instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// WorkoutLogOrErr returns the WorkoutLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExerciseSetEdges) WorkoutLogOrErr() (*WorkoutLog, error) {
	if e.WorkoutLog != nil {
		return e.WorkoutLog, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workoutlog.Label}
	}
	return nil, &NotLoadedError{edge: "workout_log"}
}

// ExerciseOrErr returns the Exercise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExerciseSetEdges) ExerciseOrErr() (*Exercise, error) {
	if e.Exercise != nil {
		return e.Exercise, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: exercise.Label}
	}
	return nil, &NotLoadedError{edge: "exercise"}
}

// ExerciseInstanceOrErr returns the ExerciseInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExerciseSetEdges) ExerciseInstanceOrErr() (*ExerciseInstance, error) {
	if e.ExerciseInstance != nil {
		return e.ExerciseInstance, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: exerciseinstance.Label}
	}
	return nil, &NotLoadedError{edge: "exercise_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExerciseSet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exerciseset.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case exerciseset.FieldReps, exerciseset.FieldSetNumber, exerciseset.FieldStatus:
			values[i] = new(sql.NullInt64)
		case exerciseset.FieldCreatedAt, exerciseset.FieldUpdatedAt, exerciseset.FieldDeletedAt, exerciseset.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		case exerciseset.FieldID:
			values[i] = new(uuid.UUID)
		case exerciseset.ForeignKeys[0]: // exercise_exercise_sets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case exerciseset.ForeignKeys[1]: // exercise_instance_exercise_sets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case exerciseset.ForeignKeys[2]: // workout_log_exercise_sets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExerciseSet fields.
func (es *ExerciseSet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exerciseset.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				es.ID = *value
			}
		case exerciseset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		case exerciseset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				es.UpdatedAt = value.Time
			}
		case exerciseset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				es.DeletedAt = new(time.Time)
				*es.DeletedAt = value.Time
			}
		case exerciseset.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				es.Weight = new(float64)
				*es.Weight = value.Float64
			}
		case exerciseset.FieldReps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reps", values[i])
			} else if value.Valid {
				es.Reps = new(int)
				*es.Reps = int(value.Int64)
			}
		case exerciseset.FieldSetNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field set_number", values[i])
			} else if value.Valid {
				es.SetNumber = int(value.Int64)
			}
		case exerciseset.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				es.FinishedAt = new(time.Time)
				*es.FinishedAt = value.Time
			}
		case exerciseset.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				es.Status = int(value.Int64)
			}
		case exerciseset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_exercise_sets", values[i])
			} else if value.Valid {
				es.exercise_exercise_sets = new(uuid.UUID)
				*es.exercise_exercise_sets = *value.S.(*uuid.UUID)
			}
		case exerciseset.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_instance_exercise_sets", values[i])
			} else if value.Valid {
				es.exercise_instance_exercise_sets = new(uuid.UUID)
				*es.exercise_instance_exercise_sets = *value.S.(*uuid.UUID)
			}
		case exerciseset.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workout_log_exercise_sets", values[i])
			} else if value.Valid {
				es.workout_log_exercise_sets = new(uuid.UUID)
				*es.workout_log_exercise_sets = *value.S.(*uuid.UUID)
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExerciseSet.
// This includes values selected through modifiers, order, etc.
func (es *ExerciseSet) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// QueryWorkoutLog queries the "workout_log" edge of the ExerciseSet entity.
func (es *ExerciseSet) QueryWorkoutLog() *WorkoutLogQuery {
	return NewExerciseSetClient(es.config).QueryWorkoutLog(es)
}

// QueryExercise queries the "exercise" edge of the ExerciseSet entity.
func (es *ExerciseSet) QueryExercise() *ExerciseQuery {
	return NewExerciseSetClient(es.config).QueryExercise(es)
}

// QueryExerciseInstance queries the "exercise_instance" edge of the ExerciseSet entity.
func (es *ExerciseSet) QueryExerciseInstance() *ExerciseInstanceQuery {
	return NewExerciseSetClient(es.config).QueryExerciseInstance(es)
}

// Update returns a builder for updating this ExerciseSet.
// Note that you need to call ExerciseSet.Unwrap() before calling this method if this ExerciseSet
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *ExerciseSet) Update() *ExerciseSetUpdateOne {
	return NewExerciseSetClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the ExerciseSet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *ExerciseSet) Unwrap() *ExerciseSet {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExerciseSet is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *ExerciseSet) String() string {
	var builder strings.Builder
	builder.WriteString("ExerciseSet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(es.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := es.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := es.Weight; v != nil {
		builder.WriteString("weight=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := es.Reps; v != nil {
		builder.WriteString("reps=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("set_number=")
	builder.WriteString(fmt.Sprintf("%v", es.SetNumber))
	builder.WriteString(", ")
	if v := es.FinishedAt; v != nil {
		builder.WriteString("finished_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", es.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ExerciseSets is a parsable slice of ExerciseSet.
type ExerciseSets []*ExerciseSet
