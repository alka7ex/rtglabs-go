// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exercise"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/workoutlog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExerciseSetUpdate is the builder for updating ExerciseSet entities.
type ExerciseSetUpdate struct {
	config
	hooks    []Hook
	mutation *ExerciseSetMutation
}

// Where appends a list predicates to the ExerciseSetUpdate builder.
func (esu *ExerciseSetUpdate) Where(ps ...predicate.ExerciseSet) *ExerciseSetUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetCreatedAt sets the "created_at" field.
func (esu *ExerciseSetUpdate) SetCreatedAt(t time.Time) *ExerciseSetUpdate {
	esu.mutation.SetCreatedAt(t)
	return esu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableCreatedAt(t *time.Time) *ExerciseSetUpdate {
	if t != nil {
		esu.SetCreatedAt(*t)
	}
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *ExerciseSetUpdate) SetUpdatedAt(t time.Time) *ExerciseSetUpdate {
	esu.mutation.SetUpdatedAt(t)
	return esu
}

// SetDeletedAt sets the "deleted_at" field.
func (esu *ExerciseSetUpdate) SetDeletedAt(t time.Time) *ExerciseSetUpdate {
	esu.mutation.SetDeletedAt(t)
	return esu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableDeletedAt(t *time.Time) *ExerciseSetUpdate {
	if t != nil {
		esu.SetDeletedAt(*t)
	}
	return esu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esu *ExerciseSetUpdate) ClearDeletedAt() *ExerciseSetUpdate {
	esu.mutation.ClearDeletedAt()
	return esu
}

// SetWeight sets the "weight" field.
func (esu *ExerciseSetUpdate) SetWeight(f float64) *ExerciseSetUpdate {
	esu.mutation.ResetWeight()
	esu.mutation.SetWeight(f)
	return esu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableWeight(f *float64) *ExerciseSetUpdate {
	if f != nil {
		esu.SetWeight(*f)
	}
	return esu
}

// AddWeight adds f to the "weight" field.
func (esu *ExerciseSetUpdate) AddWeight(f float64) *ExerciseSetUpdate {
	esu.mutation.AddWeight(f)
	return esu
}

// ClearWeight clears the value of the "weight" field.
func (esu *ExerciseSetUpdate) ClearWeight() *ExerciseSetUpdate {
	esu.mutation.ClearWeight()
	return esu
}

// SetReps sets the "reps" field.
func (esu *ExerciseSetUpdate) SetReps(i int) *ExerciseSetUpdate {
	esu.mutation.ResetReps()
	esu.mutation.SetReps(i)
	return esu
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableReps(i *int) *ExerciseSetUpdate {
	if i != nil {
		esu.SetReps(*i)
	}
	return esu
}

// AddReps adds i to the "reps" field.
func (esu *ExerciseSetUpdate) AddReps(i int) *ExerciseSetUpdate {
	esu.mutation.AddReps(i)
	return esu
}

// ClearReps clears the value of the "reps" field.
func (esu *ExerciseSetUpdate) ClearReps() *ExerciseSetUpdate {
	esu.mutation.ClearReps()
	return esu
}

// SetSetNumber sets the "set_number" field.
func (esu *ExerciseSetUpdate) SetSetNumber(i int) *ExerciseSetUpdate {
	esu.mutation.ResetSetNumber()
	esu.mutation.SetSetNumber(i)
	return esu
}

// SetNillableSetNumber sets the "set_number" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableSetNumber(i *int) *ExerciseSetUpdate {
	if i != nil {
		esu.SetSetNumber(*i)
	}
	return esu
}

// AddSetNumber adds i to the "set_number" field.
func (esu *ExerciseSetUpdate) AddSetNumber(i int) *ExerciseSetUpdate {
	esu.mutation.AddSetNumber(i)
	return esu
}

// SetFinishedAt sets the "finished_at" field.
func (esu *ExerciseSetUpdate) SetFinishedAt(t time.Time) *ExerciseSetUpdate {
	esu.mutation.SetFinishedAt(t)
	return esu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableFinishedAt(t *time.Time) *ExerciseSetUpdate {
	if t != nil {
		esu.SetFinishedAt(*t)
	}
	return esu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (esu *ExerciseSetUpdate) ClearFinishedAt() *ExerciseSetUpdate {
	esu.mutation.ClearFinishedAt()
	return esu
}

// SetStatus sets the "status" field.
func (esu *ExerciseSetUpdate) SetStatus(i int) *ExerciseSetUpdate {
	esu.mutation.ResetStatus()
	esu.mutation.SetStatus(i)
	return esu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableStatus(i *int) *ExerciseSetUpdate {
	if i != nil {
		esu.SetStatus(*i)
	}
	return esu
}

// AddStatus adds i to the "status" field.
func (esu *ExerciseSetUpdate) AddStatus(i int) *ExerciseSetUpdate {
	esu.mutation.AddStatus(i)
	return esu
}

// SetWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by ID.
func (esu *ExerciseSetUpdate) SetWorkoutLogID(id uuid.UUID) *ExerciseSetUpdate {
	esu.mutation.SetWorkoutLogID(id)
	return esu
}

// SetWorkoutLog sets the "workout_log" edge to the WorkoutLog entity.
func (esu *ExerciseSetUpdate) SetWorkoutLog(w *WorkoutLog) *ExerciseSetUpdate {
	return esu.SetWorkoutLogID(w.ID)
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by ID.
func (esu *ExerciseSetUpdate) SetExerciseID(id uuid.UUID) *ExerciseSetUpdate {
	esu.mutation.SetExerciseID(id)
	return esu
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (esu *ExerciseSetUpdate) SetExercise(e *Exercise) *ExerciseSetUpdate {
	return esu.SetExerciseID(e.ID)
}

// SetExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by ID.
func (esu *ExerciseSetUpdate) SetExerciseInstanceID(id uuid.UUID) *ExerciseSetUpdate {
	esu.mutation.SetExerciseInstanceID(id)
	return esu
}

// SetNillableExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by ID if the given value is not nil.
func (esu *ExerciseSetUpdate) SetNillableExerciseInstanceID(id *uuid.UUID) *ExerciseSetUpdate {
	if id != nil {
		esu = esu.SetExerciseInstanceID(*id)
	}
	return esu
}

// SetExerciseInstance sets the "exercise_instance" edge to the ExerciseInstance entity.
func (esu *ExerciseSetUpdate) SetExerciseInstance(e *ExerciseInstance) *ExerciseSetUpdate {
	return esu.SetExerciseInstanceID(e.ID)
}

// Mutation returns the ExerciseSetMutation object of the builder.
func (esu *ExerciseSetUpdate) Mutation() *ExerciseSetMutation {
	return esu.mutation
}

// ClearWorkoutLog clears the "workout_log" edge to the WorkoutLog entity.
func (esu *ExerciseSetUpdate) ClearWorkoutLog() *ExerciseSetUpdate {
	esu.mutation.ClearWorkoutLog()
	return esu
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (esu *ExerciseSetUpdate) ClearExercise() *ExerciseSetUpdate {
	esu.mutation.ClearExercise()
	return esu
}

// ClearExerciseInstance clears the "exercise_instance" edge to the ExerciseInstance entity.
func (esu *ExerciseSetUpdate) ClearExerciseInstance() *ExerciseSetUpdate {
	esu.mutation.ClearExerciseInstance()
	return esu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *ExerciseSetUpdate) Save(ctx context.Context) (int, error) {
	esu.defaults()
	return withHooks(ctx, esu.sqlSave, esu.mutation, esu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esu *ExerciseSetUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *ExerciseSetUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *ExerciseSetUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *ExerciseSetUpdate) defaults() {
	if _, ok := esu.mutation.UpdatedAt(); !ok {
		v := exerciseset.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esu *ExerciseSetUpdate) check() error {
	if esu.mutation.WorkoutLogCleared() && len(esu.mutation.WorkoutLogIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExerciseSet.workout_log"`)
	}
	if esu.mutation.ExerciseCleared() && len(esu.mutation.ExerciseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExerciseSet.exercise"`)
	}
	return nil
}

func (esu *ExerciseSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := esu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exerciseset.Table, exerciseset.Columns, sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID))
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.CreatedAt(); ok {
		_spec.SetField(exerciseset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.SetField(exerciseset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := esu.mutation.DeletedAt(); ok {
		_spec.SetField(exerciseset.FieldDeletedAt, field.TypeTime, value)
	}
	if esu.mutation.DeletedAtCleared() {
		_spec.ClearField(exerciseset.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.Weight(); ok {
		_spec.SetField(exerciseset.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := esu.mutation.AddedWeight(); ok {
		_spec.AddField(exerciseset.FieldWeight, field.TypeFloat64, value)
	}
	if esu.mutation.WeightCleared() {
		_spec.ClearField(exerciseset.FieldWeight, field.TypeFloat64)
	}
	if value, ok := esu.mutation.Reps(); ok {
		_spec.SetField(exerciseset.FieldReps, field.TypeInt, value)
	}
	if value, ok := esu.mutation.AddedReps(); ok {
		_spec.AddField(exerciseset.FieldReps, field.TypeInt, value)
	}
	if esu.mutation.RepsCleared() {
		_spec.ClearField(exerciseset.FieldReps, field.TypeInt)
	}
	if value, ok := esu.mutation.SetNumber(); ok {
		_spec.SetField(exerciseset.FieldSetNumber, field.TypeInt, value)
	}
	if value, ok := esu.mutation.AddedSetNumber(); ok {
		_spec.AddField(exerciseset.FieldSetNumber, field.TypeInt, value)
	}
	if value, ok := esu.mutation.FinishedAt(); ok {
		_spec.SetField(exerciseset.FieldFinishedAt, field.TypeTime, value)
	}
	if esu.mutation.FinishedAtCleared() {
		_spec.ClearField(exerciseset.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := esu.mutation.Status(); ok {
		_spec.SetField(exerciseset.FieldStatus, field.TypeInt, value)
	}
	if value, ok := esu.mutation.AddedStatus(); ok {
		_spec.AddField(exerciseset.FieldStatus, field.TypeInt, value)
	}
	if esu.mutation.WorkoutLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.WorkoutLogTable,
			Columns: []string{exerciseset.WorkoutLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.WorkoutLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.WorkoutLogTable,
			Columns: []string{exerciseset.WorkoutLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.ExerciseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseTable,
			Columns: []string{exerciseset.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseTable,
			Columns: []string{exerciseset.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.ExerciseInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseInstanceTable,
			Columns: []string{exerciseset.ExerciseInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.ExerciseInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseInstanceTable,
			Columns: []string{exerciseset.ExerciseInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exerciseset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	esu.mutation.done = true
	return n, nil
}

// ExerciseSetUpdateOne is the builder for updating a single ExerciseSet entity.
type ExerciseSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExerciseSetMutation
}

// SetCreatedAt sets the "created_at" field.
func (esuo *ExerciseSetUpdateOne) SetCreatedAt(t time.Time) *ExerciseSetUpdateOne {
	esuo.mutation.SetCreatedAt(t)
	return esuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableCreatedAt(t *time.Time) *ExerciseSetUpdateOne {
	if t != nil {
		esuo.SetCreatedAt(*t)
	}
	return esuo
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *ExerciseSetUpdateOne) SetUpdatedAt(t time.Time) *ExerciseSetUpdateOne {
	esuo.mutation.SetUpdatedAt(t)
	return esuo
}

// SetDeletedAt sets the "deleted_at" field.
func (esuo *ExerciseSetUpdateOne) SetDeletedAt(t time.Time) *ExerciseSetUpdateOne {
	esuo.mutation.SetDeletedAt(t)
	return esuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableDeletedAt(t *time.Time) *ExerciseSetUpdateOne {
	if t != nil {
		esuo.SetDeletedAt(*t)
	}
	return esuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esuo *ExerciseSetUpdateOne) ClearDeletedAt() *ExerciseSetUpdateOne {
	esuo.mutation.ClearDeletedAt()
	return esuo
}

// SetWeight sets the "weight" field.
func (esuo *ExerciseSetUpdateOne) SetWeight(f float64) *ExerciseSetUpdateOne {
	esuo.mutation.ResetWeight()
	esuo.mutation.SetWeight(f)
	return esuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableWeight(f *float64) *ExerciseSetUpdateOne {
	if f != nil {
		esuo.SetWeight(*f)
	}
	return esuo
}

// AddWeight adds f to the "weight" field.
func (esuo *ExerciseSetUpdateOne) AddWeight(f float64) *ExerciseSetUpdateOne {
	esuo.mutation.AddWeight(f)
	return esuo
}

// ClearWeight clears the value of the "weight" field.
func (esuo *ExerciseSetUpdateOne) ClearWeight() *ExerciseSetUpdateOne {
	esuo.mutation.ClearWeight()
	return esuo
}

// SetReps sets the "reps" field.
func (esuo *ExerciseSetUpdateOne) SetReps(i int) *ExerciseSetUpdateOne {
	esuo.mutation.ResetReps()
	esuo.mutation.SetReps(i)
	return esuo
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableReps(i *int) *ExerciseSetUpdateOne {
	if i != nil {
		esuo.SetReps(*i)
	}
	return esuo
}

// AddReps adds i to the "reps" field.
func (esuo *ExerciseSetUpdateOne) AddReps(i int) *ExerciseSetUpdateOne {
	esuo.mutation.AddReps(i)
	return esuo
}

// ClearReps clears the value of the "reps" field.
func (esuo *ExerciseSetUpdateOne) ClearReps() *ExerciseSetUpdateOne {
	esuo.mutation.ClearReps()
	return esuo
}

// SetSetNumber sets the "set_number" field.
func (esuo *ExerciseSetUpdateOne) SetSetNumber(i int) *ExerciseSetUpdateOne {
	esuo.mutation.ResetSetNumber()
	esuo.mutation.SetSetNumber(i)
	return esuo
}

// SetNillableSetNumber sets the "set_number" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableSetNumber(i *int) *ExerciseSetUpdateOne {
	if i != nil {
		esuo.SetSetNumber(*i)
	}
	return esuo
}

// AddSetNumber adds i to the "set_number" field.
func (esuo *ExerciseSetUpdateOne) AddSetNumber(i int) *ExerciseSetUpdateOne {
	esuo.mutation.AddSetNumber(i)
	return esuo
}

// SetFinishedAt sets the "finished_at" field.
func (esuo *ExerciseSetUpdateOne) SetFinishedAt(t time.Time) *ExerciseSetUpdateOne {
	esuo.mutation.SetFinishedAt(t)
	return esuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableFinishedAt(t *time.Time) *ExerciseSetUpdateOne {
	if t != nil {
		esuo.SetFinishedAt(*t)
	}
	return esuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (esuo *ExerciseSetUpdateOne) ClearFinishedAt() *ExerciseSetUpdateOne {
	esuo.mutation.ClearFinishedAt()
	return esuo
}

// SetStatus sets the "status" field.
func (esuo *ExerciseSetUpdateOne) SetStatus(i int) *ExerciseSetUpdateOne {
	esuo.mutation.ResetStatus()
	esuo.mutation.SetStatus(i)
	return esuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableStatus(i *int) *ExerciseSetUpdateOne {
	if i != nil {
		esuo.SetStatus(*i)
	}
	return esuo
}

// AddStatus adds i to the "status" field.
func (esuo *ExerciseSetUpdateOne) AddStatus(i int) *ExerciseSetUpdateOne {
	esuo.mutation.AddStatus(i)
	return esuo
}

// SetWorkoutLogID sets the "workout_log" edge to the WorkoutLog entity by ID.
func (esuo *ExerciseSetUpdateOne) SetWorkoutLogID(id uuid.UUID) *ExerciseSetUpdateOne {
	esuo.mutation.SetWorkoutLogID(id)
	return esuo
}

// SetWorkoutLog sets the "workout_log" edge to the WorkoutLog entity.
func (esuo *ExerciseSetUpdateOne) SetWorkoutLog(w *WorkoutLog) *ExerciseSetUpdateOne {
	return esuo.SetWorkoutLogID(w.ID)
}

// SetExerciseID sets the "exercise" edge to the Exercise entity by ID.
func (esuo *ExerciseSetUpdateOne) SetExerciseID(id uuid.UUID) *ExerciseSetUpdateOne {
	esuo.mutation.SetExerciseID(id)
	return esuo
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (esuo *ExerciseSetUpdateOne) SetExercise(e *Exercise) *ExerciseSetUpdateOne {
	return esuo.SetExerciseID(e.ID)
}

// SetExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by ID.
func (esuo *ExerciseSetUpdateOne) SetExerciseInstanceID(id uuid.UUID) *ExerciseSetUpdateOne {
	esuo.mutation.SetExerciseInstanceID(id)
	return esuo
}

// SetNillableExerciseInstanceID sets the "exercise_instance" edge to the ExerciseInstance entity by ID if the given value is not nil.
func (esuo *ExerciseSetUpdateOne) SetNillableExerciseInstanceID(id *uuid.UUID) *ExerciseSetUpdateOne {
	if id != nil {
		esuo = esuo.SetExerciseInstanceID(*id)
	}
	return esuo
}

// SetExerciseInstance sets the "exercise_instance" edge to the ExerciseInstance entity.
func (esuo *ExerciseSetUpdateOne) SetExerciseInstance(e *ExerciseInstance) *ExerciseSetUpdateOne {
	return esuo.SetExerciseInstanceID(e.ID)
}

// Mutation returns the ExerciseSetMutation object of the builder.
func (esuo *ExerciseSetUpdateOne) Mutation() *ExerciseSetMutation {
	return esuo.mutation
}

// ClearWorkoutLog clears the "workout_log" edge to the WorkoutLog entity.
func (esuo *ExerciseSetUpdateOne) ClearWorkoutLog() *ExerciseSetUpdateOne {
	esuo.mutation.ClearWorkoutLog()
	return esuo
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (esuo *ExerciseSetUpdateOne) ClearExercise() *ExerciseSetUpdateOne {
	esuo.mutation.ClearExercise()
	return esuo
}

// ClearExerciseInstance clears the "exercise_instance" edge to the ExerciseInstance entity.
func (esuo *ExerciseSetUpdateOne) ClearExerciseInstance() *ExerciseSetUpdateOne {
	esuo.mutation.ClearExerciseInstance()
	return esuo
}

// Where appends a list predicates to the ExerciseSetUpdate builder.
func (esuo *ExerciseSetUpdateOne) Where(ps ...predicate.ExerciseSet) *ExerciseSetUpdateOne {
	esuo.mutation.Where(ps...)
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *ExerciseSetUpdateOne) Select(field string, fields ...string) *ExerciseSetUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated ExerciseSet entity.
func (esuo *ExerciseSetUpdateOne) Save(ctx context.Context) (*ExerciseSet, error) {
	esuo.defaults()
	return withHooks(ctx, esuo.sqlSave, esuo.mutation, esuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *ExerciseSetUpdateOne) SaveX(ctx context.Context) *ExerciseSet {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *ExerciseSetUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *ExerciseSetUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *ExerciseSetUpdateOne) defaults() {
	if _, ok := esuo.mutation.UpdatedAt(); !ok {
		v := exerciseset.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esuo *ExerciseSetUpdateOne) check() error {
	if esuo.mutation.WorkoutLogCleared() && len(esuo.mutation.WorkoutLogIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExerciseSet.workout_log"`)
	}
	if esuo.mutation.ExerciseCleared() && len(esuo.mutation.ExerciseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ExerciseSet.exercise"`)
	}
	return nil
}

func (esuo *ExerciseSetUpdateOne) sqlSave(ctx context.Context) (_node *ExerciseSet, err error) {
	if err := esuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exerciseset.Table, exerciseset.Columns, sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID))
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExerciseSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exerciseset.FieldID)
		for _, f := range fields {
			if !exerciseset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exerciseset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.CreatedAt(); ok {
		_spec.SetField(exerciseset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.SetField(exerciseset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := esuo.mutation.DeletedAt(); ok {
		_spec.SetField(exerciseset.FieldDeletedAt, field.TypeTime, value)
	}
	if esuo.mutation.DeletedAtCleared() {
		_spec.ClearField(exerciseset.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.Weight(); ok {
		_spec.SetField(exerciseset.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := esuo.mutation.AddedWeight(); ok {
		_spec.AddField(exerciseset.FieldWeight, field.TypeFloat64, value)
	}
	if esuo.mutation.WeightCleared() {
		_spec.ClearField(exerciseset.FieldWeight, field.TypeFloat64)
	}
	if value, ok := esuo.mutation.Reps(); ok {
		_spec.SetField(exerciseset.FieldReps, field.TypeInt, value)
	}
	if value, ok := esuo.mutation.AddedReps(); ok {
		_spec.AddField(exerciseset.FieldReps, field.TypeInt, value)
	}
	if esuo.mutation.RepsCleared() {
		_spec.ClearField(exerciseset.FieldReps, field.TypeInt)
	}
	if value, ok := esuo.mutation.SetNumber(); ok {
		_spec.SetField(exerciseset.FieldSetNumber, field.TypeInt, value)
	}
	if value, ok := esuo.mutation.AddedSetNumber(); ok {
		_spec.AddField(exerciseset.FieldSetNumber, field.TypeInt, value)
	}
	if value, ok := esuo.mutation.FinishedAt(); ok {
		_spec.SetField(exerciseset.FieldFinishedAt, field.TypeTime, value)
	}
	if esuo.mutation.FinishedAtCleared() {
		_spec.ClearField(exerciseset.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := esuo.mutation.Status(); ok {
		_spec.SetField(exerciseset.FieldStatus, field.TypeInt, value)
	}
	if value, ok := esuo.mutation.AddedStatus(); ok {
		_spec.AddField(exerciseset.FieldStatus, field.TypeInt, value)
	}
	if esuo.mutation.WorkoutLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.WorkoutLogTable,
			Columns: []string{exerciseset.WorkoutLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.WorkoutLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.WorkoutLogTable,
			Columns: []string{exerciseset.WorkoutLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.ExerciseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseTable,
			Columns: []string{exerciseset.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseTable,
			Columns: []string{exerciseset.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.ExerciseInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseInstanceTable,
			Columns: []string{exerciseset.ExerciseInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.ExerciseInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exerciseset.ExerciseInstanceTable,
			Columns: []string{exerciseset.ExerciseInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExerciseSet{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exerciseset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	esuo.mutation.done = true
	return _node, nil
}
