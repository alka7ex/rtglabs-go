// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/privatetoken"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrivateTokenDelete is the builder for deleting a PrivateToken entity.
type PrivateTokenDelete struct {
	config
	hooks    []Hook
	mutation *PrivateTokenMutation
}

// Where appends a list predicates to the PrivateTokenDelete builder.
func (ptd *PrivateTokenDelete) Where(ps ...predicate.PrivateToken) *PrivateTokenDelete {
	ptd.mutation.Where(ps...)
	return ptd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptd *PrivateTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptd.sqlExec, ptd.mutation, ptd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptd *PrivateTokenDelete) ExecX(ctx context.Context) int {
	n, err := ptd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptd *PrivateTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(privatetoken.Table, sqlgraph.NewFieldSpec(privatetoken.FieldID, field.TypeUUID))
	if ps := ptd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptd.mutation.done = true
	return affected, err
}

// PrivateTokenDeleteOne is the builder for deleting a single PrivateToken entity.
type PrivateTokenDeleteOne struct {
	ptd *PrivateTokenDelete
}

// Where appends a list predicates to the PrivateTokenDelete builder.
func (ptdo *PrivateTokenDeleteOne) Where(ps ...predicate.PrivateToken) *PrivateTokenDeleteOne {
	ptdo.ptd.mutation.Where(ps...)
	return ptdo
}

// Exec executes the deletion query.
func (ptdo *PrivateTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := ptdo.ptd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{privatetoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdo *PrivateTokenDeleteOne) ExecX(ctx context.Context) {
	if err := ptdo.Exec(ctx); err != nil {
		panic(err)
	}
}
