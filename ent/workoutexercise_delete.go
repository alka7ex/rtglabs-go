// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/workoutexercise"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkoutExerciseDelete is the builder for deleting a WorkoutExercise entity.
type WorkoutExerciseDelete struct {
	config
	hooks    []Hook
	mutation *WorkoutExerciseMutation
}

// Where appends a list predicates to the WorkoutExerciseDelete builder.
func (wed *WorkoutExerciseDelete) Where(ps ...predicate.WorkoutExercise) *WorkoutExerciseDelete {
	wed.mutation.Where(ps...)
	return wed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wed *WorkoutExerciseDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wed.sqlExec, wed.mutation, wed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wed *WorkoutExerciseDelete) ExecX(ctx context.Context) int {
	n, err := wed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wed *WorkoutExerciseDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workoutexercise.Table, sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeUUID))
	if ps := wed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wed.mutation.done = true
	return affected, err
}

// WorkoutExerciseDeleteOne is the builder for deleting a single WorkoutExercise entity.
type WorkoutExerciseDeleteOne struct {
	wed *WorkoutExerciseDelete
}

// Where appends a list predicates to the WorkoutExerciseDelete builder.
func (wedo *WorkoutExerciseDeleteOne) Where(ps ...predicate.WorkoutExercise) *WorkoutExerciseDeleteOne {
	wedo.wed.mutation.Where(ps...)
	return wedo
}

// Exec executes the deletion query.
func (wedo *WorkoutExerciseDeleteOne) Exec(ctx context.Context) error {
	n, err := wedo.wed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workoutexercise.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wedo *WorkoutExerciseDeleteOne) ExecX(ctx context.Context) {
	if err := wedo.Exec(ctx); err != nil {
		panic(err)
	}
}
