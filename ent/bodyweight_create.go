// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/bodyweight"
	"rtglabs-go/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BodyweightCreate is the builder for creating a Bodyweight entity.
type BodyweightCreate struct {
	config
	mutation *BodyweightMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BodyweightCreate) SetCreatedAt(t time.Time) *BodyweightCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BodyweightCreate) SetNillableCreatedAt(t *time.Time) *BodyweightCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BodyweightCreate) SetUpdatedAt(t time.Time) *BodyweightCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BodyweightCreate) SetNillableUpdatedAt(t *time.Time) *BodyweightCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BodyweightCreate) SetDeletedAt(t time.Time) *BodyweightCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BodyweightCreate) SetNillableDeletedAt(t *time.Time) *BodyweightCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetWeight sets the "weight" field.
func (bc *BodyweightCreate) SetWeight(f float64) *BodyweightCreate {
	bc.mutation.SetWeight(f)
	return bc
}

// SetUnit sets the "unit" field.
func (bc *BodyweightCreate) SetUnit(s string) *BodyweightCreate {
	bc.mutation.SetUnit(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BodyweightCreate) SetID(u uuid.UUID) *BodyweightCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BodyweightCreate) SetNillableID(u *uuid.UUID) *BodyweightCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bc *BodyweightCreate) SetUserID(id uuid.UUID) *BodyweightCreate {
	bc.mutation.SetUserID(id)
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BodyweightCreate) SetUser(u *User) *BodyweightCreate {
	return bc.SetUserID(u.ID)
}

// Mutation returns the BodyweightMutation object of the builder.
func (bc *BodyweightCreate) Mutation() *BodyweightMutation {
	return bc.mutation
}

// Save creates the Bodyweight in the database.
func (bc *BodyweightCreate) Save(ctx context.Context) (*Bodyweight, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BodyweightCreate) SaveX(ctx context.Context) *Bodyweight {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BodyweightCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BodyweightCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BodyweightCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bodyweight.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bodyweight.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bodyweight.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BodyweightCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bodyweight.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bodyweight.updated_at"`)}
	}
	if _, ok := bc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Bodyweight.weight"`)}
	}
	if v, ok := bc.mutation.Weight(); ok {
		if err := bodyweight.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Bodyweight.weight": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "Bodyweight.unit"`)}
	}
	if v, ok := bc.mutation.Unit(); ok {
		if err := bodyweight.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "Bodyweight.unit": %w`, err)}
		}
	}
	if len(bc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Bodyweight.user"`)}
	}
	return nil
}

func (bc *BodyweightCreate) sqlSave(ctx context.Context) (*Bodyweight, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BodyweightCreate) createSpec() (*Bodyweight, *sqlgraph.CreateSpec) {
	var (
		_node = &Bodyweight{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bodyweight.Table, sqlgraph.NewFieldSpec(bodyweight.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bodyweight.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bodyweight.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(bodyweight.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bc.mutation.Weight(); ok {
		_spec.SetField(bodyweight.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := bc.mutation.Unit(); ok {
		_spec.SetField(bodyweight.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bodyweight.UserTable,
			Columns: []string{bodyweight.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_bodyweights = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BodyweightCreateBulk is the builder for creating many Bodyweight entities in bulk.
type BodyweightCreateBulk struct {
	config
	err      error
	builders []*BodyweightCreate
}

// Save creates the Bodyweight entities in the database.
func (bcb *BodyweightCreateBulk) Save(ctx context.Context) ([]*Bodyweight, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bodyweight, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BodyweightMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BodyweightCreateBulk) SaveX(ctx context.Context) []*Bodyweight {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BodyweightCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BodyweightCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
