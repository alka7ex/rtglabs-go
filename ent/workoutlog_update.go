// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"rtglabs-go/ent/exerciseinstance"
	"rtglabs-go/ent/exerciseset"
	"rtglabs-go/ent/predicate"
	"rtglabs-go/ent/user"
	"rtglabs-go/ent/workout"
	"rtglabs-go/ent/workoutlog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutLogUpdate is the builder for updating WorkoutLog entities.
type WorkoutLogUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutLogMutation
}

// Where appends a list predicates to the WorkoutLogUpdate builder.
func (wlu *WorkoutLogUpdate) Where(ps ...predicate.WorkoutLog) *WorkoutLogUpdate {
	wlu.mutation.Where(ps...)
	return wlu
}

// SetCreatedAt sets the "created_at" field.
func (wlu *WorkoutLogUpdate) SetCreatedAt(t time.Time) *WorkoutLogUpdate {
	wlu.mutation.SetCreatedAt(t)
	return wlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableCreatedAt(t *time.Time) *WorkoutLogUpdate {
	if t != nil {
		wlu.SetCreatedAt(*t)
	}
	return wlu
}

// SetUpdatedAt sets the "updated_at" field.
func (wlu *WorkoutLogUpdate) SetUpdatedAt(t time.Time) *WorkoutLogUpdate {
	wlu.mutation.SetUpdatedAt(t)
	return wlu
}

// SetDeletedAt sets the "deleted_at" field.
func (wlu *WorkoutLogUpdate) SetDeletedAt(t time.Time) *WorkoutLogUpdate {
	wlu.mutation.SetDeletedAt(t)
	return wlu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableDeletedAt(t *time.Time) *WorkoutLogUpdate {
	if t != nil {
		wlu.SetDeletedAt(*t)
	}
	return wlu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wlu *WorkoutLogUpdate) ClearDeletedAt() *WorkoutLogUpdate {
	wlu.mutation.ClearDeletedAt()
	return wlu
}

// SetStartedAt sets the "started_at" field.
func (wlu *WorkoutLogUpdate) SetStartedAt(t time.Time) *WorkoutLogUpdate {
	wlu.mutation.SetStartedAt(t)
	return wlu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableStartedAt(t *time.Time) *WorkoutLogUpdate {
	if t != nil {
		wlu.SetStartedAt(*t)
	}
	return wlu
}

// ClearStartedAt clears the value of the "started_at" field.
func (wlu *WorkoutLogUpdate) ClearStartedAt() *WorkoutLogUpdate {
	wlu.mutation.ClearStartedAt()
	return wlu
}

// SetFinishedAt sets the "finished_at" field.
func (wlu *WorkoutLogUpdate) SetFinishedAt(t time.Time) *WorkoutLogUpdate {
	wlu.mutation.SetFinishedAt(t)
	return wlu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableFinishedAt(t *time.Time) *WorkoutLogUpdate {
	if t != nil {
		wlu.SetFinishedAt(*t)
	}
	return wlu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (wlu *WorkoutLogUpdate) ClearFinishedAt() *WorkoutLogUpdate {
	wlu.mutation.ClearFinishedAt()
	return wlu
}

// SetStatus sets the "status" field.
func (wlu *WorkoutLogUpdate) SetStatus(i int) *WorkoutLogUpdate {
	wlu.mutation.ResetStatus()
	wlu.mutation.SetStatus(i)
	return wlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableStatus(i *int) *WorkoutLogUpdate {
	if i != nil {
		wlu.SetStatus(*i)
	}
	return wlu
}

// AddStatus adds i to the "status" field.
func (wlu *WorkoutLogUpdate) AddStatus(i int) *WorkoutLogUpdate {
	wlu.mutation.AddStatus(i)
	return wlu
}

// SetTotalActiveDurationSeconds sets the "total_active_duration_seconds" field.
func (wlu *WorkoutLogUpdate) SetTotalActiveDurationSeconds(u uint) *WorkoutLogUpdate {
	wlu.mutation.ResetTotalActiveDurationSeconds()
	wlu.mutation.SetTotalActiveDurationSeconds(u)
	return wlu
}

// SetNillableTotalActiveDurationSeconds sets the "total_active_duration_seconds" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableTotalActiveDurationSeconds(u *uint) *WorkoutLogUpdate {
	if u != nil {
		wlu.SetTotalActiveDurationSeconds(*u)
	}
	return wlu
}

// AddTotalActiveDurationSeconds adds u to the "total_active_duration_seconds" field.
func (wlu *WorkoutLogUpdate) AddTotalActiveDurationSeconds(u int) *WorkoutLogUpdate {
	wlu.mutation.AddTotalActiveDurationSeconds(u)
	return wlu
}

// SetTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field.
func (wlu *WorkoutLogUpdate) SetTotalPauseDurationSeconds(u uint) *WorkoutLogUpdate {
	wlu.mutation.ResetTotalPauseDurationSeconds()
	wlu.mutation.SetTotalPauseDurationSeconds(u)
	return wlu
}

// SetNillableTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableTotalPauseDurationSeconds(u *uint) *WorkoutLogUpdate {
	if u != nil {
		wlu.SetTotalPauseDurationSeconds(*u)
	}
	return wlu
}

// AddTotalPauseDurationSeconds adds u to the "total_pause_duration_seconds" field.
func (wlu *WorkoutLogUpdate) AddTotalPauseDurationSeconds(u int) *WorkoutLogUpdate {
	wlu.mutation.AddTotalPauseDurationSeconds(u)
	return wlu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wlu *WorkoutLogUpdate) SetUserID(id uuid.UUID) *WorkoutLogUpdate {
	wlu.mutation.SetUserID(id)
	return wlu
}

// SetUser sets the "user" edge to the User entity.
func (wlu *WorkoutLogUpdate) SetUser(u *User) *WorkoutLogUpdate {
	return wlu.SetUserID(u.ID)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (wlu *WorkoutLogUpdate) SetWorkoutID(id uuid.UUID) *WorkoutLogUpdate {
	wlu.mutation.SetWorkoutID(id)
	return wlu
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (wlu *WorkoutLogUpdate) SetNillableWorkoutID(id *uuid.UUID) *WorkoutLogUpdate {
	if id != nil {
		wlu = wlu.SetWorkoutID(*id)
	}
	return wlu
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (wlu *WorkoutLogUpdate) SetWorkout(w *Workout) *WorkoutLogUpdate {
	return wlu.SetWorkoutID(w.ID)
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (wlu *WorkoutLogUpdate) AddExerciseSetIDs(ids ...uuid.UUID) *WorkoutLogUpdate {
	wlu.mutation.AddExerciseSetIDs(ids...)
	return wlu
}

// AddExerciseSets adds the "exercise_sets" edges to the ExerciseSet entity.
func (wlu *WorkoutLogUpdate) AddExerciseSets(e ...*ExerciseSet) *WorkoutLogUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wlu.AddExerciseSetIDs(ids...)
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (wlu *WorkoutLogUpdate) AddExerciseInstanceIDs(ids ...uuid.UUID) *WorkoutLogUpdate {
	wlu.mutation.AddExerciseInstanceIDs(ids...)
	return wlu
}

// AddExerciseInstances adds the "exercise_instances" edges to the ExerciseInstance entity.
func (wlu *WorkoutLogUpdate) AddExerciseInstances(e ...*ExerciseInstance) *WorkoutLogUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wlu.AddExerciseInstanceIDs(ids...)
}

// Mutation returns the WorkoutLogMutation object of the builder.
func (wlu *WorkoutLogUpdate) Mutation() *WorkoutLogMutation {
	return wlu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wlu *WorkoutLogUpdate) ClearUser() *WorkoutLogUpdate {
	wlu.mutation.ClearUser()
	return wlu
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (wlu *WorkoutLogUpdate) ClearWorkout() *WorkoutLogUpdate {
	wlu.mutation.ClearWorkout()
	return wlu
}

// ClearExerciseSets clears all "exercise_sets" edges to the ExerciseSet entity.
func (wlu *WorkoutLogUpdate) ClearExerciseSets() *WorkoutLogUpdate {
	wlu.mutation.ClearExerciseSets()
	return wlu
}

// RemoveExerciseSetIDs removes the "exercise_sets" edge to ExerciseSet entities by IDs.
func (wlu *WorkoutLogUpdate) RemoveExerciseSetIDs(ids ...uuid.UUID) *WorkoutLogUpdate {
	wlu.mutation.RemoveExerciseSetIDs(ids...)
	return wlu
}

// RemoveExerciseSets removes "exercise_sets" edges to ExerciseSet entities.
func (wlu *WorkoutLogUpdate) RemoveExerciseSets(e ...*ExerciseSet) *WorkoutLogUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wlu.RemoveExerciseSetIDs(ids...)
}

// ClearExerciseInstances clears all "exercise_instances" edges to the ExerciseInstance entity.
func (wlu *WorkoutLogUpdate) ClearExerciseInstances() *WorkoutLogUpdate {
	wlu.mutation.ClearExerciseInstances()
	return wlu
}

// RemoveExerciseInstanceIDs removes the "exercise_instances" edge to ExerciseInstance entities by IDs.
func (wlu *WorkoutLogUpdate) RemoveExerciseInstanceIDs(ids ...uuid.UUID) *WorkoutLogUpdate {
	wlu.mutation.RemoveExerciseInstanceIDs(ids...)
	return wlu
}

// RemoveExerciseInstances removes "exercise_instances" edges to ExerciseInstance entities.
func (wlu *WorkoutLogUpdate) RemoveExerciseInstances(e ...*ExerciseInstance) *WorkoutLogUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wlu.RemoveExerciseInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wlu *WorkoutLogUpdate) Save(ctx context.Context) (int, error) {
	wlu.defaults()
	return withHooks(ctx, wlu.sqlSave, wlu.mutation, wlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wlu *WorkoutLogUpdate) SaveX(ctx context.Context) int {
	affected, err := wlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wlu *WorkoutLogUpdate) Exec(ctx context.Context) error {
	_, err := wlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wlu *WorkoutLogUpdate) ExecX(ctx context.Context) {
	if err := wlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wlu *WorkoutLogUpdate) defaults() {
	if _, ok := wlu.mutation.UpdatedAt(); !ok {
		v := workoutlog.UpdateDefaultUpdatedAt()
		wlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wlu *WorkoutLogUpdate) check() error {
	if wlu.mutation.UserCleared() && len(wlu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutLog.user"`)
	}
	return nil
}

func (wlu *WorkoutLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workoutlog.Table, workoutlog.Columns, sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID))
	if ps := wlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wlu.mutation.CreatedAt(); ok {
		_spec.SetField(workoutlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wlu.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wlu.mutation.DeletedAt(); ok {
		_spec.SetField(workoutlog.FieldDeletedAt, field.TypeTime, value)
	}
	if wlu.mutation.DeletedAtCleared() {
		_spec.ClearField(workoutlog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wlu.mutation.StartedAt(); ok {
		_spec.SetField(workoutlog.FieldStartedAt, field.TypeTime, value)
	}
	if wlu.mutation.StartedAtCleared() {
		_spec.ClearField(workoutlog.FieldStartedAt, field.TypeTime)
	}
	if value, ok := wlu.mutation.FinishedAt(); ok {
		_spec.SetField(workoutlog.FieldFinishedAt, field.TypeTime, value)
	}
	if wlu.mutation.FinishedAtCleared() {
		_spec.ClearField(workoutlog.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := wlu.mutation.Status(); ok {
		_spec.SetField(workoutlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := wlu.mutation.AddedStatus(); ok {
		_spec.AddField(workoutlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := wlu.mutation.TotalActiveDurationSeconds(); ok {
		_spec.SetField(workoutlog.FieldTotalActiveDurationSeconds, field.TypeUint, value)
	}
	if value, ok := wlu.mutation.AddedTotalActiveDurationSeconds(); ok {
		_spec.AddField(workoutlog.FieldTotalActiveDurationSeconds, field.TypeUint, value)
	}
	if value, ok := wlu.mutation.TotalPauseDurationSeconds(); ok {
		_spec.SetField(workoutlog.FieldTotalPauseDurationSeconds, field.TypeUint, value)
	}
	if value, ok := wlu.mutation.AddedTotalPauseDurationSeconds(); ok {
		_spec.AddField(workoutlog.FieldTotalPauseDurationSeconds, field.TypeUint, value)
	}
	if wlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UserTable,
			Columns: []string{workoutlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UserTable,
			Columns: []string{workoutlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wlu.mutation.WorkoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutTable,
			Columns: []string{workoutlog.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutTable,
			Columns: []string{workoutlog.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wlu.mutation.ExerciseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.RemovedExerciseSetsIDs(); len(nodes) > 0 && !wlu.mutation.ExerciseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.ExerciseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wlu.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.RemovedExerciseInstancesIDs(); len(nodes) > 0 && !wlu.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wlu.mutation.ExerciseInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wlu.mutation.done = true
	return n, nil
}

// WorkoutLogUpdateOne is the builder for updating a single WorkoutLog entity.
type WorkoutLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutLogMutation
}

// SetCreatedAt sets the "created_at" field.
func (wluo *WorkoutLogUpdateOne) SetCreatedAt(t time.Time) *WorkoutLogUpdateOne {
	wluo.mutation.SetCreatedAt(t)
	return wluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkoutLogUpdateOne {
	if t != nil {
		wluo.SetCreatedAt(*t)
	}
	return wluo
}

// SetUpdatedAt sets the "updated_at" field.
func (wluo *WorkoutLogUpdateOne) SetUpdatedAt(t time.Time) *WorkoutLogUpdateOne {
	wluo.mutation.SetUpdatedAt(t)
	return wluo
}

// SetDeletedAt sets the "deleted_at" field.
func (wluo *WorkoutLogUpdateOne) SetDeletedAt(t time.Time) *WorkoutLogUpdateOne {
	wluo.mutation.SetDeletedAt(t)
	return wluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableDeletedAt(t *time.Time) *WorkoutLogUpdateOne {
	if t != nil {
		wluo.SetDeletedAt(*t)
	}
	return wluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wluo *WorkoutLogUpdateOne) ClearDeletedAt() *WorkoutLogUpdateOne {
	wluo.mutation.ClearDeletedAt()
	return wluo
}

// SetStartedAt sets the "started_at" field.
func (wluo *WorkoutLogUpdateOne) SetStartedAt(t time.Time) *WorkoutLogUpdateOne {
	wluo.mutation.SetStartedAt(t)
	return wluo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableStartedAt(t *time.Time) *WorkoutLogUpdateOne {
	if t != nil {
		wluo.SetStartedAt(*t)
	}
	return wluo
}

// ClearStartedAt clears the value of the "started_at" field.
func (wluo *WorkoutLogUpdateOne) ClearStartedAt() *WorkoutLogUpdateOne {
	wluo.mutation.ClearStartedAt()
	return wluo
}

// SetFinishedAt sets the "finished_at" field.
func (wluo *WorkoutLogUpdateOne) SetFinishedAt(t time.Time) *WorkoutLogUpdateOne {
	wluo.mutation.SetFinishedAt(t)
	return wluo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableFinishedAt(t *time.Time) *WorkoutLogUpdateOne {
	if t != nil {
		wluo.SetFinishedAt(*t)
	}
	return wluo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (wluo *WorkoutLogUpdateOne) ClearFinishedAt() *WorkoutLogUpdateOne {
	wluo.mutation.ClearFinishedAt()
	return wluo
}

// SetStatus sets the "status" field.
func (wluo *WorkoutLogUpdateOne) SetStatus(i int) *WorkoutLogUpdateOne {
	wluo.mutation.ResetStatus()
	wluo.mutation.SetStatus(i)
	return wluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableStatus(i *int) *WorkoutLogUpdateOne {
	if i != nil {
		wluo.SetStatus(*i)
	}
	return wluo
}

// AddStatus adds i to the "status" field.
func (wluo *WorkoutLogUpdateOne) AddStatus(i int) *WorkoutLogUpdateOne {
	wluo.mutation.AddStatus(i)
	return wluo
}

// SetTotalActiveDurationSeconds sets the "total_active_duration_seconds" field.
func (wluo *WorkoutLogUpdateOne) SetTotalActiveDurationSeconds(u uint) *WorkoutLogUpdateOne {
	wluo.mutation.ResetTotalActiveDurationSeconds()
	wluo.mutation.SetTotalActiveDurationSeconds(u)
	return wluo
}

// SetNillableTotalActiveDurationSeconds sets the "total_active_duration_seconds" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableTotalActiveDurationSeconds(u *uint) *WorkoutLogUpdateOne {
	if u != nil {
		wluo.SetTotalActiveDurationSeconds(*u)
	}
	return wluo
}

// AddTotalActiveDurationSeconds adds u to the "total_active_duration_seconds" field.
func (wluo *WorkoutLogUpdateOne) AddTotalActiveDurationSeconds(u int) *WorkoutLogUpdateOne {
	wluo.mutation.AddTotalActiveDurationSeconds(u)
	return wluo
}

// SetTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field.
func (wluo *WorkoutLogUpdateOne) SetTotalPauseDurationSeconds(u uint) *WorkoutLogUpdateOne {
	wluo.mutation.ResetTotalPauseDurationSeconds()
	wluo.mutation.SetTotalPauseDurationSeconds(u)
	return wluo
}

// SetNillableTotalPauseDurationSeconds sets the "total_pause_duration_seconds" field if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableTotalPauseDurationSeconds(u *uint) *WorkoutLogUpdateOne {
	if u != nil {
		wluo.SetTotalPauseDurationSeconds(*u)
	}
	return wluo
}

// AddTotalPauseDurationSeconds adds u to the "total_pause_duration_seconds" field.
func (wluo *WorkoutLogUpdateOne) AddTotalPauseDurationSeconds(u int) *WorkoutLogUpdateOne {
	wluo.mutation.AddTotalPauseDurationSeconds(u)
	return wluo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wluo *WorkoutLogUpdateOne) SetUserID(id uuid.UUID) *WorkoutLogUpdateOne {
	wluo.mutation.SetUserID(id)
	return wluo
}

// SetUser sets the "user" edge to the User entity.
func (wluo *WorkoutLogUpdateOne) SetUser(u *User) *WorkoutLogUpdateOne {
	return wluo.SetUserID(u.ID)
}

// SetWorkoutID sets the "workout" edge to the Workout entity by ID.
func (wluo *WorkoutLogUpdateOne) SetWorkoutID(id uuid.UUID) *WorkoutLogUpdateOne {
	wluo.mutation.SetWorkoutID(id)
	return wluo
}

// SetNillableWorkoutID sets the "workout" edge to the Workout entity by ID if the given value is not nil.
func (wluo *WorkoutLogUpdateOne) SetNillableWorkoutID(id *uuid.UUID) *WorkoutLogUpdateOne {
	if id != nil {
		wluo = wluo.SetWorkoutID(*id)
	}
	return wluo
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (wluo *WorkoutLogUpdateOne) SetWorkout(w *Workout) *WorkoutLogUpdateOne {
	return wluo.SetWorkoutID(w.ID)
}

// AddExerciseSetIDs adds the "exercise_sets" edge to the ExerciseSet entity by IDs.
func (wluo *WorkoutLogUpdateOne) AddExerciseSetIDs(ids ...uuid.UUID) *WorkoutLogUpdateOne {
	wluo.mutation.AddExerciseSetIDs(ids...)
	return wluo
}

// AddExerciseSets adds the "exercise_sets" edges to the ExerciseSet entity.
func (wluo *WorkoutLogUpdateOne) AddExerciseSets(e ...*ExerciseSet) *WorkoutLogUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wluo.AddExerciseSetIDs(ids...)
}

// AddExerciseInstanceIDs adds the "exercise_instances" edge to the ExerciseInstance entity by IDs.
func (wluo *WorkoutLogUpdateOne) AddExerciseInstanceIDs(ids ...uuid.UUID) *WorkoutLogUpdateOne {
	wluo.mutation.AddExerciseInstanceIDs(ids...)
	return wluo
}

// AddExerciseInstances adds the "exercise_instances" edges to the ExerciseInstance entity.
func (wluo *WorkoutLogUpdateOne) AddExerciseInstances(e ...*ExerciseInstance) *WorkoutLogUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wluo.AddExerciseInstanceIDs(ids...)
}

// Mutation returns the WorkoutLogMutation object of the builder.
func (wluo *WorkoutLogUpdateOne) Mutation() *WorkoutLogMutation {
	return wluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (wluo *WorkoutLogUpdateOne) ClearUser() *WorkoutLogUpdateOne {
	wluo.mutation.ClearUser()
	return wluo
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (wluo *WorkoutLogUpdateOne) ClearWorkout() *WorkoutLogUpdateOne {
	wluo.mutation.ClearWorkout()
	return wluo
}

// ClearExerciseSets clears all "exercise_sets" edges to the ExerciseSet entity.
func (wluo *WorkoutLogUpdateOne) ClearExerciseSets() *WorkoutLogUpdateOne {
	wluo.mutation.ClearExerciseSets()
	return wluo
}

// RemoveExerciseSetIDs removes the "exercise_sets" edge to ExerciseSet entities by IDs.
func (wluo *WorkoutLogUpdateOne) RemoveExerciseSetIDs(ids ...uuid.UUID) *WorkoutLogUpdateOne {
	wluo.mutation.RemoveExerciseSetIDs(ids...)
	return wluo
}

// RemoveExerciseSets removes "exercise_sets" edges to ExerciseSet entities.
func (wluo *WorkoutLogUpdateOne) RemoveExerciseSets(e ...*ExerciseSet) *WorkoutLogUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wluo.RemoveExerciseSetIDs(ids...)
}

// ClearExerciseInstances clears all "exercise_instances" edges to the ExerciseInstance entity.
func (wluo *WorkoutLogUpdateOne) ClearExerciseInstances() *WorkoutLogUpdateOne {
	wluo.mutation.ClearExerciseInstances()
	return wluo
}

// RemoveExerciseInstanceIDs removes the "exercise_instances" edge to ExerciseInstance entities by IDs.
func (wluo *WorkoutLogUpdateOne) RemoveExerciseInstanceIDs(ids ...uuid.UUID) *WorkoutLogUpdateOne {
	wluo.mutation.RemoveExerciseInstanceIDs(ids...)
	return wluo
}

// RemoveExerciseInstances removes "exercise_instances" edges to ExerciseInstance entities.
func (wluo *WorkoutLogUpdateOne) RemoveExerciseInstances(e ...*ExerciseInstance) *WorkoutLogUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return wluo.RemoveExerciseInstanceIDs(ids...)
}

// Where appends a list predicates to the WorkoutLogUpdate builder.
func (wluo *WorkoutLogUpdateOne) Where(ps ...predicate.WorkoutLog) *WorkoutLogUpdateOne {
	wluo.mutation.Where(ps...)
	return wluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wluo *WorkoutLogUpdateOne) Select(field string, fields ...string) *WorkoutLogUpdateOne {
	wluo.fields = append([]string{field}, fields...)
	return wluo
}

// Save executes the query and returns the updated WorkoutLog entity.
func (wluo *WorkoutLogUpdateOne) Save(ctx context.Context) (*WorkoutLog, error) {
	wluo.defaults()
	return withHooks(ctx, wluo.sqlSave, wluo.mutation, wluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wluo *WorkoutLogUpdateOne) SaveX(ctx context.Context) *WorkoutLog {
	node, err := wluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wluo *WorkoutLogUpdateOne) Exec(ctx context.Context) error {
	_, err := wluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wluo *WorkoutLogUpdateOne) ExecX(ctx context.Context) {
	if err := wluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wluo *WorkoutLogUpdateOne) defaults() {
	if _, ok := wluo.mutation.UpdatedAt(); !ok {
		v := workoutlog.UpdateDefaultUpdatedAt()
		wluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wluo *WorkoutLogUpdateOne) check() error {
	if wluo.mutation.UserCleared() && len(wluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutLog.user"`)
	}
	return nil
}

func (wluo *WorkoutLogUpdateOne) sqlSave(ctx context.Context) (_node *WorkoutLog, err error) {
	if err := wluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workoutlog.Table, workoutlog.Columns, sqlgraph.NewFieldSpec(workoutlog.FieldID, field.TypeUUID))
	id, ok := wluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkoutLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutlog.FieldID)
		for _, f := range fields {
			if !workoutlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workoutlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wluo.mutation.CreatedAt(); ok {
		_spec.SetField(workoutlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wluo.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wluo.mutation.DeletedAt(); ok {
		_spec.SetField(workoutlog.FieldDeletedAt, field.TypeTime, value)
	}
	if wluo.mutation.DeletedAtCleared() {
		_spec.ClearField(workoutlog.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := wluo.mutation.StartedAt(); ok {
		_spec.SetField(workoutlog.FieldStartedAt, field.TypeTime, value)
	}
	if wluo.mutation.StartedAtCleared() {
		_spec.ClearField(workoutlog.FieldStartedAt, field.TypeTime)
	}
	if value, ok := wluo.mutation.FinishedAt(); ok {
		_spec.SetField(workoutlog.FieldFinishedAt, field.TypeTime, value)
	}
	if wluo.mutation.FinishedAtCleared() {
		_spec.ClearField(workoutlog.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := wluo.mutation.Status(); ok {
		_spec.SetField(workoutlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := wluo.mutation.AddedStatus(); ok {
		_spec.AddField(workoutlog.FieldStatus, field.TypeInt, value)
	}
	if value, ok := wluo.mutation.TotalActiveDurationSeconds(); ok {
		_spec.SetField(workoutlog.FieldTotalActiveDurationSeconds, field.TypeUint, value)
	}
	if value, ok := wluo.mutation.AddedTotalActiveDurationSeconds(); ok {
		_spec.AddField(workoutlog.FieldTotalActiveDurationSeconds, field.TypeUint, value)
	}
	if value, ok := wluo.mutation.TotalPauseDurationSeconds(); ok {
		_spec.SetField(workoutlog.FieldTotalPauseDurationSeconds, field.TypeUint, value)
	}
	if value, ok := wluo.mutation.AddedTotalPauseDurationSeconds(); ok {
		_spec.AddField(workoutlog.FieldTotalPauseDurationSeconds, field.TypeUint, value)
	}
	if wluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UserTable,
			Columns: []string{workoutlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.UserTable,
			Columns: []string{workoutlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wluo.mutation.WorkoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutTable,
			Columns: []string{workoutlog.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutlog.WorkoutTable,
			Columns: []string{workoutlog.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wluo.mutation.ExerciseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.RemovedExerciseSetsIDs(); len(nodes) > 0 && !wluo.mutation.ExerciseSetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.ExerciseSetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseSetsTable,
			Columns: []string{workoutlog.ExerciseSetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wluo.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.RemovedExerciseInstancesIDs(); len(nodes) > 0 && !wluo.mutation.ExerciseInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wluo.mutation.ExerciseInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutlog.ExerciseInstancesTable,
			Columns: []string{workoutlog.ExerciseInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exerciseinstance.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkoutLog{config: wluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wluo.mutation.done = true
	return _node, nil
}
