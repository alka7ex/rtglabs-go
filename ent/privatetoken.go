// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"rtglabs-go/ent/privatetoken"
	"rtglabs-go/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// PrivateToken is the model entity for the PrivateToken schema.
type PrivateToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrivateTokenQuery when eager-loading is set.
	Edges              PrivateTokenEdges `json:"edges"`
	user_private_token *uuid.UUID
	selectValues       sql.SelectValues
}

// PrivateTokenEdges holds the relations/edges for other nodes in the graph.
type PrivateTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateTokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrivateToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case privatetoken.FieldToken, privatetoken.FieldType:
			values[i] = new(sql.NullString)
		case privatetoken.FieldExpiresAt, privatetoken.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case privatetoken.FieldID:
			values[i] = new(uuid.UUID)
		case privatetoken.ForeignKeys[0]: // user_private_token
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrivateToken fields.
func (pt *PrivateToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case privatetoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pt.ID = *value
			}
		case privatetoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				pt.Token = value.String
			}
		case privatetoken.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pt.Type = value.String
			}
		case privatetoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				pt.ExpiresAt = value.Time
			}
		case privatetoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case privatetoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_private_token", values[i])
			} else if value.Valid {
				pt.user_private_token = new(uuid.UUID)
				*pt.user_private_token = *value.S.(*uuid.UUID)
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrivateToken.
// This includes values selected through modifiers, order, etc.
func (pt *PrivateToken) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PrivateToken entity.
func (pt *PrivateToken) QueryUser() *UserQuery {
	return NewPrivateTokenClient(pt.config).QueryUser(pt)
}

// Update returns a builder for updating this PrivateToken.
// Note that you need to call PrivateToken.Unwrap() before calling this method if this PrivateToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PrivateToken) Update() *PrivateTokenUpdateOne {
	return NewPrivateTokenClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PrivateToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PrivateToken) Unwrap() *PrivateToken {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrivateToken is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PrivateToken) String() string {
	var builder strings.Builder
	builder.WriteString("PrivateToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("token=")
	builder.WriteString(pt.Token)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pt.Type)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(pt.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrivateTokens is a parsable slice of PrivateToken.
type PrivateTokens []*PrivateToken
